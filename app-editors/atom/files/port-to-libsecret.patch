From 84752ff12332fb4433d4058ba5ad479aa5fbb4e8 Mon Sep 17 00:00:00 2001
From: alzeih <alzeih@users.noreply.github.com>
Date: Sat, 18 Oct 2014 00:55:59 +1300
Subject: [PATCH] Switch posix backend to libsecret

---
 binding.gyp         |  6 ++--
 src/keytar_posix.cc | 84 ++++++++++++++++++++++++++++++++++++-----------------
 2 files changed, 60 insertions(+), 30 deletions(-)

diff --git a/binding.gyp b/binding.gyp
index 9df141c..33292e6 100644
--- a/binding.gyp
+++ b/binding.gyp
@@ -33,16 +33,16 @@
             'src/keytar_posix.cc',
           ],
           'cflags': [
-            '<!(pkg-config --cflags gnome-keyring-1)',
+            '<!(pkg-config --cflags libsecret-1)',
             '-Wno-missing-field-initializers',
             '-Wno-deprecated-declarations',
           ],
           'link_settings': {
             'ldflags': [
-              '<!(pkg-config --libs-only-L --libs-only-other gnome-keyring-1)',
+              '<!(pkg-config --libs-only-L --libs-only-other libsecret-1)',
             ],
             'libraries': [
-              '<!(pkg-config --libs-only-l gnome-keyring-1)',
+              '<!(pkg-config --libs-only-l libsecret-1)',
             ],
           },
         }],
diff --git a/src/keytar_posix.cc b/src/keytar_posix.cc
index 163222c..66ca5c5 100644
--- a/src/keytar_posix.cc
+++ b/src/keytar_posix.cc
@@ -1,16 +1,17 @@
 #include "keytar.h"
 
-#include <gnome-keyring.h>
+#include <libsecret/secret.h>
 #include <stdio.h>
+#include <unistd.h>
 
 namespace keytar {
 
 namespace {
 
-const GnomeKeyringPasswordSchema kGnomeSchema = {
-  GNOME_KEYRING_ITEM_GENERIC_SECRET, {
-    { "service", GNOME_KEYRING_ATTRIBUTE_TYPE_STRING },
-    { "account", GNOME_KEYRING_ATTRIBUTE_TYPE_STRING },
+const SecretSchema kSchema = {
+  "io.github.atom.node-keytar", SECRET_SCHEMA_DONT_MATCH_NAME, {
+    { "service", SECRET_SCHEMA_ATTRIBUTE_STRING },
+    { "account", SECRET_SCHEMA_ATTRIBUTE_STRING },
     { NULL }
   }
 };
@@ -20,57 +21,86 @@ const GnomeKeyringPasswordSchema kGnomeSchema = {
 bool AddPassword(const std::string& service,
                  const std::string& account,
                  const std::string& password) {
-  GnomeKeyringResult result = gnome_keyring_store_password_sync(
-      &kGnomeSchema,
-      NULL,  // Default keyring.
-      (service + "/" + account).c_str(),  // Display name.
+  GError *error = NULL;
+  gboolean result = secret_password_store_sync(
+      &kSchema,
+      SECRET_COLLECTION_DEFAULT,
+      (service + "/" + account).c_str(),  // label
       password.c_str(),
+      NULL,  // not cancellable
+      &error,
       "service", service.c_str(),
       "account", account.c_str(),
       NULL);
-  return result == GNOME_KEYRING_RESULT_OK;
+  if (error != NULL) {
+    fprintf(stderr, "%s\n", error->message);
+    g_error_free(error);
+  }
+  return result;
 }
 
 bool GetPassword(const std::string& service,
                  const std::string& account,
                  std::string* password) {
+  GError *error = NULL;
   gchar* raw_passwords;
-  GnomeKeyringResult result = gnome_keyring_find_password_sync(
-      &kGnomeSchema,
-      &raw_passwords,
+  raw_passwords = secret_password_lookup_sync(
+      &kSchema,
+      NULL,  // not cancellable
+      &error,
       "service", service.c_str(),
       "account", account.c_str(),
       NULL);
-  if (result != GNOME_KEYRING_RESULT_OK)
-    return false;
 
-  if (raw_passwords != NULL)
+  if (error != NULL) {
+    fprintf(stderr, "%s\n", error->message);
+    g_error_free(error);
+    return false;
+  } else if (raw_passwords == NULL) {
+    return false;
+  } else {
     *password = raw_passwords;
-  gnome_keyring_free_password(raw_passwords);
+  }
+  secret_password_free(raw_passwords);
   return true;
 }
 
 bool DeletePassword(const std::string& service, const std::string& account) {
-  return gnome_keyring_delete_password_sync(
-      &kGnomeSchema,
+  GError *error = NULL;
+  gboolean result = secret_password_clear_sync(
+      &kSchema,
+      NULL,  // not cancellable
+      &error,
       "service", service.c_str(),
       "account", account.c_str(),
-      NULL) == GNOME_KEYRING_RESULT_OK;
+      NULL);
+  if (error != NULL) {
+    fprintf(stderr, "%s\n", error->message);
+    g_error_free(error);
+  }
+  return result;
 }
 
 bool FindPassword(const std::string& service, std::string* password) {
+  GError *error = NULL;
   gchar* raw_passwords;
-  GnomeKeyringResult result = gnome_keyring_find_password_sync(
-      &kGnomeSchema,
-      &raw_passwords,
+  raw_passwords = secret_password_lookup_sync(
+      &kSchema,
+      NULL,  // not cancellable
+      &error,
       "service", service.c_str(),
       NULL);
-  if (result != GNOME_KEYRING_RESULT_OK)
-    return false;
 
-  if (raw_passwords != NULL)
+  if (error != NULL) {
+    fprintf(stderr, "%s\n", error->message);
+    g_error_free(error);
+    return false;
+  } else if (raw_passwords == NULL) {
+    return false;
+  } else {
     *password = raw_passwords;
-  gnome_keyring_free_password(raw_passwords);
+  }
+  secret_password_free(raw_passwords);
   return true;
 }
 
