diff --color -ur a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2023-12-04 17:22:26.936991448 +0100
+++ b/CMakeLists.txt	2023-12-04 17:21:43.798751229 +0100
@@ -53,6 +54,12 @@
     PURPOSE "Qt${QT_MAJOR_VERSION} OpenGL support is required to compile the gstreamer backend for Phonon")
 set(QT_QTOPENGL_FOUND Qt${QT_MAJOR_VERSION}OpenGL_FOUND)
 
+find_package(Qt${QT_MAJOR_VERSION}OpenGLWidgets)
+set_package_properties(Qt${QT_MAJOR_VERSION}OpenGLWidgets PROPERTIES
+    TYPE OPTIONAL
+    PURPOSE "Qt${QT_MAJOR_VERSION} OpenGLWidgets support is required to compile the gstreamer backend for Phonon")
+set(QT_QTOPENGLWIDGETS_FOUND Qt${QT_MAJOR_VERSION}OpenGLWidgets_FOUND)
+
 set(REQUIRED_QT_VERSION 5.2.0)
 
 if (QT_MAJOR_VERSION STREQUAL "5")
diff --color -ur a/gstreamer/CMakeLists.txt b/gstreamer/CMakeLists.txt
--- a/gstreamer/CMakeLists.txt	2023-12-04 17:22:26.938991456 +0100
+++ b/gstreamer/CMakeLists.txt	2023-12-04 17:21:43.797751220 +0100
@@ -124,6 +124,7 @@
 endif(USE_INSTALL_PLUGIN)
 if(OPENGL_FOUND)
   target_link_libraries(phonon_gstreamer ${OPENGL_gl_LIBRARY} Qt${QT_MAJOR_VERSION}::OpenGL)
+  target_link_libraries(phonon_gstreamer ${OPENGL_gl_LIBRARY} Qt${QT_MAJOR_VERSION}::OpenGLWidgets)
 endif(OPENGL_FOUND)
 
 install(TARGETS phonon_gstreamer DESTINATION ${PHONON_BACKEND_DIR})
diff --color -ur a/gstreamer/debug.cpp b/gstreamer/debug.cpp
--- a/gstreamer/debug.cpp	2023-12-04 17:22:26.940991464 +0100
+++ b/gstreamer/debug.cpp	2023-12-04 17:21:43.794751196 +0100
@@ -21,7 +21,7 @@
 #include "debug.h"
 #include "debug_p.h"
 
-#include <QtCore/QMutex>
+#include <QtCore/QRecursiveMutex>
 #include <QtCore/QObject>
 #include <QApplication>
 
@@ -37,7 +37,7 @@
 #define DEBUG_INDENT_OBJECTNAME QLatin1String("Debug_Indent_object")
 
 
-QMutex Phonon::Gstreamer::Debug::mutex( QMutex::Recursive );
+QRecursiveMutex Phonon::Gstreamer::Debug::mutex;
 
 using namespace Phonon::Gstreamer;
 using namespace Phonon::Gstreamer::Debug;
diff --color -ur a/gstreamer/debug.h b/gstreamer/debug.h
--- a/gstreamer/debug.h	2023-12-04 17:22:26.940991464 +0100
+++ b/gstreamer/debug.h	2023-12-04 17:21:43.793751188 +0100
@@ -26,7 +26,8 @@
 #undef KDE_NO_DEBUG_OUTPUT
 
 #include <QtCore/QDebug>
-#include <QtCore/QMutex>
+#include <QtCore/QList>
+#include <QtCore/QRecursiveMutex>
 
 #if QT_VERSION >= 0x040700
 # include <QtCore/QElapsedTimer>
@@ -77,7 +78,7 @@
  */
 namespace Debug
 {
-    extern QMutex mutex;
+    extern QRecursiveMutex mutex;
 
     enum DebugLevel {
         DEBUG_INFO  = 0,
@@ -187,8 +188,6 @@
     void stamp();
 }
 
-#include <QtCore/QVariant>
-
 namespace Debug
 {
     /**
diff --color -ur a/gstreamer/debug_p.h b/gstreamer/debug_p.h
--- a/gstreamer/debug_p.h	2023-12-04 17:22:26.940991464 +0100
+++ b/gstreamer/debug_p.h	2023-12-04 17:21:43.793751188 +0100
@@ -21,6 +21,7 @@
 
 #include "debug.h"
 
+#include <QtCore/QIODevice>
 #include <QtCore/QString>
 
 class IndentPrivate
diff --color -ur a/gstreamer/effect.cpp b/gstreamer/effect.cpp
--- a/gstreamer/effect.cpp	2023-12-04 17:22:26.941991468 +0100
+++ b/gstreamer/effect.cpp	2023-12-04 17:21:43.795751204 +0100
@@ -101,7 +101,7 @@
                     case G_TYPE_STRING:
                         m_parameterList.append(Phonon::EffectParameter(i, propertyName,
                             { },   //hints
-                            G_PARAM_SPEC_STRING(param)->default_value,
+                            QString::fromUtf8(G_PARAM_SPEC_STRING(param)->default_value),
                             0,
                             0));
                         break;
diff --color -ur a/gstreamer/glrenderer.cpp b/gstreamer/glrenderer.cpp
--- a/gstreamer/glrenderer.cpp	2023-12-04 17:22:26.942991472 +0100
+++ b/gstreamer/glrenderer.cpp	2023-12-04 17:23:29.201379764 +0100
@@ -32,6 +32,7 @@
 #include "videowidget.h"
 
 #include <QtCore/QTime>
+#include <QtGui/QOpenGLContext>
 
 #if !defined(QT_OPENGL_ES)
 
@@ -76,8 +77,9 @@
     , m_glWindow(0)
 {
     debug() << "Creating OpenGL renderer";
-    QGLFormat format = QGLFormat::defaultFormat();
+    QSurfaceFormat format;
     format.setSwapInterval(1);    // Enable vertical sync on draw to avoid tearing
+    QSurfaceFormat::setDefaultFormat(format);
     m_glWindow = new GLRenderWidgetImplementation(videoWidget, format);
 
     GstElement *videoSink = m_glWindow->createVideoSink();
@@ -218,20 +220,21 @@
     "DP3 result.color.z, R1, c[1].xwyw;"
     "END";
 
-GLRenderWidgetImplementation::GLRenderWidgetImplementation(VideoWidget*videoWidget, const QGLFormat &format) :
-        QGLWidget(format, videoWidget)
+GLRenderWidgetImplementation::GLRenderWidgetImplementation(VideoWidget*videoWidget, QSurfaceFormat format) :
+        QOpenGLWidget(videoWidget)
         , m_program(0)
         , m_yuvSupport(false)
         , m_videoWidget(videoWidget)
 {
+    this->setFormat(format);
     makeCurrent();
     glGenTextures(3, m_texture);
 
-    glProgramStringARB = (_glProgramStringARB) context()->getProcAddress(QLatin1String("glProgramStringARB"));
-    glBindProgramARB = (_glBindProgramARB) context()->getProcAddress(QLatin1String("glBindProgramARB"));
-    glDeleteProgramsARB = (_glDeleteProgramsARB) context()->getProcAddress(QLatin1String("glDeleteProgramsARB"));
-    glGenProgramsARB = (_glGenProgramsARB) context()->getProcAddress(QLatin1String("glGenProgramsARB"));
-    glActiveTexture = (_glActiveTexture) context()->getProcAddress(QLatin1String("glActiveTexture"));
+    glProgramStringARB = (_glProgramStringARB) context()->getProcAddress("glProgramStringARB");
+    glBindProgramARB = (_glBindProgramARB) context()->getProcAddress("glBindProgramARB");
+    glDeleteProgramsARB = (_glDeleteProgramsARB) context()->getProcAddress("glDeleteProgramsARB");
+    glGenProgramsARB = (_glGenProgramsARB) context()->getProcAddress("glGenProgramsARB");
+    glActiveTexture = (_glActiveTexture) context()->getProcAddress("glActiveTexture");
 
     m_hasPrograms = glProgramStringARB && glBindProgramARB && glDeleteProgramsARB && glGenProgramsARB && glActiveTexture;
 
@@ -252,7 +255,7 @@
     }
 
     QPalette palette;
-    palette.setColor(QPalette::Background, Qt::black);
+    palette.setColor(QPalette::Window, Qt::black);
     setPalette(palette);
     setAutoFillBackground(true);
     // Videowidget always have this property to allow hiding the mouse cursor
diff --color -ur a/gstreamer/glrenderer.h b/gstreamer/glrenderer.h
--- a/gstreamer/glrenderer.h	2023-12-04 17:22:26.942991472 +0100
+++ b/gstreamer/glrenderer.h	2023-12-04 17:21:43.793751188 +0100
@@ -22,7 +22,7 @@
 
 #ifndef QT_NO_OPENGL
 
-#include <QtOpenGL/QGLWidget>
+#include <QtOpenGLWidgets/QOpenGLWidget>
 
 #ifndef QT_OPENGL_ES
 class QString;
@@ -49,7 +49,7 @@
     GLRenderWidgetImplementation *m_glWindow;
 };
 
-class GLRenderWidgetImplementation : public QGLWidget
+class GLRenderWidgetImplementation : public QOpenGLWidget
 {
     Q_OBJECT
 
@@ -60,7 +60,7 @@
     typedef void (*_glGenProgramsARB) (GLsizei, GLuint *);
     typedef void (*_glActiveTexture) (GLenum);
 public:
-    GLRenderWidgetImplementation(VideoWidget *control, const QGLFormat &format);
+    GLRenderWidgetImplementation(VideoWidget *control, QSurfaceFormat format);
     void paintEvent(QPaintEvent *event) Q_DECL_OVERRIDE;
     GstElement *createVideoSink();
     void updateTexture(const QByteArray &array, int width, int height);
diff --color -ur a/gstreamer/mediaobject.cpp b/gstreamer/mediaobject.cpp
--- a/gstreamer/mediaobject.cpp	2023-12-04 17:22:26.944991480 +0100
+++ b/gstreamer/mediaobject.cpp	2023-12-04 17:21:43.795751204 +0100
@@ -30,7 +30,6 @@
 #include "gsthelper.h"
 #include "pipeline.h"
 
-#include <QtCore/QByteRef>
 #include <QtCore/QEvent>
 #include <QtCore/QFile>
 #include <QtCore/QFileInfo>
diff --color -ur a/gstreamer/videowidget.cpp b/gstreamer/videowidget.cpp
--- a/gstreamer/videowidget.cpp	2023-12-04 17:22:26.946991488 +0100
+++ b/gstreamer/videowidget.cpp	2023-12-04 17:21:43.796751213 +0100
@@ -33,7 +33,9 @@
 #include "debug.h"
 #include "devicemanager.h"
 #include "mediaobject.h"
+#if defined(BUILD_X11RENDERER)
 #include "x11renderer.h"
+#endif
 #include "phonon-config-gstreamer.h"
 
 #include <gst/video/navigation.h>
@@ -80,10 +82,12 @@
 
 void VideoWidget::updateWindowID()
 {
+#if defined(BUILD_X11RENDERER)
     X11Renderer *render = dynamic_cast<X11Renderer*>(m_renderer);
     if (render) {
         render->setOverlay();
     }
+#endif
 }
 
 void Gstreamer::VideoWidget::syncX()
diff --color -ur a/gstreamer/widgetrenderer.cpp b/gstreamer/widgetrenderer.cpp
--- a/gstreamer/widgetrenderer.cpp	2023-12-04 17:22:26.947991492 +0100
+++ b/gstreamer/widgetrenderer.cpp	2023-12-04 17:21:43.796751213 +0100
@@ -80,7 +80,7 @@
 
     // Clear the background with black by default
     QPalette palette;
-    palette.setColor(QPalette::Background, Qt::black);
+    palette.setColor(QPalette::Window, Qt::black);
     videoWidget()->setPalette(palette);
     videoWidget()->setAutoFillBackground(true);
     videoWidget()->setAttribute(Qt::WA_NoSystemBackground, false);
