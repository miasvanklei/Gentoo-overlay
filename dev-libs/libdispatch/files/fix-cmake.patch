diff --git a/CMakeLists.txt b/CMakeLists.txt
index f6b078e..a68c820 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -69,27 +69,6 @@ else()
   endif()
 endif()
 
-if(CMAKE_SYSTEM_NAME STREQUAL Linux OR
-   CMAKE_SYSTEM_NAME STREQUAL Android OR
-   CMAKE_SYSTEM_NAME STREQUAL Windows)
-  add_library(BlocksRuntime
-              STATIC
-                ${CMAKE_SOURCE_DIR}/src/BlocksRuntime/data.c
-                ${CMAKE_SOURCE_DIR}/src/BlocksRuntime/runtime.c)
-  set_target_properties(BlocksRuntime
-                        PROPERTIES
-                          POSITION_INDEPENDENT_CODE TRUE)
-  if(HAVE_OBJC AND CMAKE_DL_LIBS)
-    set_target_properties(BlocksRuntime
-                          PROPERTIES
-                            INTERFACE_LINK_LIBRARIES ${CMAKE_DL_LIBS})
-  endif()
-  set(WITH_BLOCKS_RUNTIME "${CMAKE_SOURCE_DIR}/src/BlocksRuntime" CACHE PATH "Path to blocks runtime" FORCE)
-else()
-  # TODO(compnerd) support system installed BlocksRuntime
-  # find_package(BlocksRuntime REQUIRED)
-endif()
-
 check_symbol_exists(__GNU_LIBRARY__ "features.h" _GNU_SOURCE)
 if(_GNU_SOURCE)
   set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS} -D_GNU_SOURCE)
@@ -115,7 +94,7 @@ check_function_exists(pthread_workqueue_setdispatch_np HAVE_PTHREAD_WORKQUEUE_SE
 check_function_exists(strlcpy HAVE_STRLCPY)
 check_function_exists(sysconf HAVE_SYSCONF)
 
-if(NOT HAVE_STRLCPY AND NOT HAVE_GETPROGNAME)
+if(NOT HAVE_STRLCPY OR NOT HAVE_GETPROGNAME)
   include(FindPkgConfig)
   pkg_check_modules(BSD_OVERLAY libbsd-overlay)
   if(BSD_OVERLAY_FOUND)
@@ -211,9 +190,9 @@ else()
   add_custom_target(module-map-symlinks
                     ALL
                     COMMAND
-                      ${CMAKE_COMMAND} -E create_symlink "${CMAKE_SOURCE_DIR}/dispatch/generic/module.modulemap" "${CMAKE_SOURCE_DIR}/dispatch/module.modulemap"
+                      cp "${CMAKE_SOURCE_DIR}/dispatch/generic/module.modulemap" "${CMAKE_SOURCE_DIR}/dispatch/module.modulemap"
                     COMMAND
-                      ${CMAKE_COMMAND} -E create_symlink "${CMAKE_SOURCE_DIR}/private/generic/module.modulemap" "${CMAKE_SOURCE_DIR}/private/module.modulemap")
+                      cp "${CMAKE_SOURCE_DIR}/private/generic/module.modulemap" "${CMAKE_SOURCE_DIR}/private/module.modulemap")
 endif()
 configure_file("${CMAKE_SOURCE_DIR}/cmake/config.h.in"
                "${CMAKE_BINARY_DIR}/config/config_ac.h")
diff --git a/cmake/modules/SwiftSupport.cmake b/cmake/modules/SwiftSupport.cmake
index 1965939..295211c 100644
--- a/cmake/modules/SwiftSupport.cmake
+++ b/cmake/modules/SwiftSupport.cmake
@@ -66,4 +66,10 @@ function(add_swift_library library)
                        ${ASL_OUTPUT}
                        ${ASL_MODULE_PATH}
                        ${module_directory}/${ASL_MODULE_NAME}.swiftdoc)
+
+  install(FILES
+            ${module_directory}/${ASL_MODULE_NAME}.swiftdoc
+            ${module_directory}/${ASL_MODULE_NAME}.swiftmodule
+          DESTINATION
+           "${SWIFT_RUNTIME_LIBDIR}/${SWIFT_ARCH}")
 endfunction()
diff --git a/dispatch/CMakeLists.txt b/dispatch/CMakeLists.txt
index dbfb866..27a79ee 100644
--- a/dispatch/CMakeLists.txt
+++ b/dispatch/CMakeLists.txt
@@ -14,11 +14,11 @@ install(FILES
           source.h
           time.h
         DESTINATION
-          ${CMAKE_INSTALL_FULL_INCLUDEDIR}/dispatch/)
+          ${SWIFT_RUNTIME_LIBDIR}/../dispatch)
 if(ENABLE_SWIFT)
   install(FILES
             module.modulemap
           DESTINATION
-            ${CMAKE_INSTALL_FULL_INCLUEDIR}/dispatch/)
+            ${SWIFT_RUNTIME_LIBDIR}/../dispatch)
 endif()
 
diff --git a/os/CMakeLists.txt b/os/CMakeLists.txt
index 6e2b415..c614662 100644
--- a/os/CMakeLists.txt
+++ b/os/CMakeLists.txt
@@ -6,5 +6,5 @@ install(FILES
           object.h
           linux_base.h
         DESTINATION
-          "${CMAKE_INSTALL_FULL_INCLUDEDIR}/os")
+          "${SWIFT_RUNTIME_LIBDIR}/../os")
 
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 2ec2691..5b3e8ea 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -98,6 +98,7 @@ if(CMAKE_SWIFT_COMPILER)
                       -fmodule-map-file=${CMAKE_SOURCE_DIR}/dispatch/module.modulemap
                     SWIFT_FLAGS
                       -I ${CMAKE_SOURCE_DIR}
+                      -I /usr/lib/swift
                       ${swift_optimization_flags})
   target_sources(dispatch
                  PRIVATE
@@ -172,6 +173,12 @@ target_link_libraries(dispatch PRIVATE Threads::Threads)
 if(WITH_BLOCKS_RUNTIME)
   target_link_libraries(dispatch PRIVATE BlocksRuntime)
 endif()
+if(ENABLE_SWIFT)
+  target_link_libraries(dispatch PRIVATE ${SWIFT_RUNTIME_LIBDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}swiftCore${CMAKE_SHARED_LIBRARY_SUFFIX})
+  if(NOT CMAKE_BUILD_TYPE MATCHES Release)
+    target_link_libraries(dispatch PRIVATE ${SWIFT_RUNTIME_LIBDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}swiftSwiftOnoneSupport${CMAKE_SHARED_LIBRARY_SUFFIX})
+  endif()
+endif()
 if(CMAKE_SYSTEM_NAME STREQUAL Darwin)
   set_property(TARGET dispatch
                APPEND_STRING
@@ -200,5 +207,5 @@ add_custom_command(TARGET dispatch POST_BUILD
 install(TARGETS
           dispatch
         DESTINATION
-          "${CMAKE_INSTALL_FULL_LIBDIR}")
+          "${SWIFT_RUNTIME_LIBDIR}")
 
