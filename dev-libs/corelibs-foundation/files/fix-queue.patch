From 50c33e730bf629b738aed1f61ba210400dd0b391 Mon Sep 17 00:00:00 2001
From: Swizzlr <git@swizzlr.co>
Date: Fri, 28 Oct 2016 18:04:47 +0200
Subject: [PATCH 1/2] Implement observation with optional queues.

---
 Foundation/NSNotification.swift | 15 +++++++++------
 1 file changed, 9 insertions(+), 6 deletions(-)

diff --git a/Foundation/NSNotification.swift b/Foundation/NSNotification.swift
index 9c82cb1..b06d6a5 100755
--- a/Foundation/NSNotification.swift
+++ b/Foundation/NSNotification.swift
@@ -93,6 +93,7 @@ private class NSNotificationReceiver : NSObject {
     fileprivate weak var object: NSObject?
     fileprivate var name: Notification.Name?
     fileprivate var block: ((Notification) -> Void)?
+    fileprivate weak var queue: OperationQueue?
     fileprivate var sender: AnyObject?
 }
 
@@ -162,8 +163,13 @@ open class NotificationCenter: NSObject {
             guard let block = observer.block else {
                 continue
             }
-            
-            block(notification)
+            if let queue = observer.queue {
+                queue.addOperation {
+                    block(notification)
+                }
+            } else {
+                block(notification)
+            }
         }
     }
 
@@ -187,10 +193,6 @@ open class NotificationCenter: NSObject {
     }
     
     open func addObserver(forName name: Notification.Name?, object obj: Any?, queue: OperationQueue?, usingBlock block: @escaping (Notification) -> Void) -> NSObjectProtocol {
-        if queue != nil {
-            NSUnimplemented()
-        }
-
         let object = NSObject()
         
         let newObserver = NSNotificationReceiver()
@@ -198,6 +200,7 @@ open class NotificationCenter: NSObject {
         newObserver.name = name
         newObserver.block = block
         newObserver.sender = _SwiftValue.store(obj)
+        newObserver.queue = queue
 
         _observersLock.synchronized({
             _observers.append(newObserver)

From cf6db6e60784c9b5b04b06936d8f97a6b46adc94 Mon Sep 17 00:00:00 2001
From: Swizzlr <git@swizzlr.co>
Date: Sun, 13 Nov 2016 20:53:51 +0000
Subject: [PATCH 2/2] Add unit test for this behaviour. Currently failing due
 to bug in NSNotifications queue handling.

---
 TestFoundation/TestNSNotificationCenter.swift | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/TestFoundation/TestNSNotificationCenter.swift b/TestFoundation/TestNSNotificationCenter.swift
index 0e75761..e736077 100755
--- a/TestFoundation/TestNSNotificationCenter.swift
+++ b/TestFoundation/TestNSNotificationCenter.swift
@@ -26,6 +26,7 @@ class TestNSNotificationCenter : XCTestCase {
             ("test_postMultipleNotifications", test_postMultipleNotifications),
             ("test_addObserverForNilName", test_addObserverForNilName),
             ("test_removeObserver", test_removeObserver),
+            ("test_observeNotificationOnSpecificQueue", test_observeNotificationOnSpecificQueue)
         ]
     }
     
@@ -150,4 +151,18 @@ class TestNSNotificationCenter : XCTestCase {
         XCTAssertTrue(flag)
     }
 
+    func test_observeNotificationOnSpecificQueue() {
+        let nc = NotificationCenter()
+        let name = Notification.Name(rawValue: "test_observeNotificationOnSpecificQueue")
+        let queue = OperationQueue()
+        let x = expectation(description: "expect_notification_fired")
+
+        _ = nc.addObserver(forName: name, object: nil, queue: queue) { notification in
+            XCTAssertEqual(OperationQueue.current, queue)
+            x.fulfill()
+        }
+        nc.post(name: name, object: nil)
+        waitForExpectations(timeout: 1)
+    }
+
 }
