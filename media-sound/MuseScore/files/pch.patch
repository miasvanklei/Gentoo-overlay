--- build/CreatePrecompiledHeader.cmake.bak	2015-03-27 23:39:25.253405886 +0100
+++ build/CreatePrecompiledHeader.cmake	2015-03-27 23:42:07.027079075 +0100
@@ -1,8 +1,7 @@
 macro( precompiled_header includes header_name build_pch)
-    if( ${CMAKE_COMPILER_IS_GNUCXX})
         message(STATUS "precompiled header generation")
         # Get the compiler flags for this build type
-        string( TOUPPER "CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}" flags_for_build_name )
+        string( TOUPPER "CMAKE_CXX_FLAGS" flags_for_build_name )
         set( compile_flags ${${flags_for_build_name}} )
 
         # Add all the Qt include directories
@@ -36,7 +35,7 @@
             set (PCH ${PROJECT_BINARY_DIR}/${header_name}.h.gch)
             add_custom_command(
              OUTPUT ${PROJECT_BINARY_DIR}/${header_name}.h.gch
-             COMMAND ${CMAKE_CXX_COMPILER} -x c++-header -g  ${compile_flags} -o ${header_name}.h.gch ${header_name}.h
+             COMMAND ${CMAKE_CXX_COMPILER} -fPIC -x c++-header ${compile_flags} -o ${header_name}.h.gch ${header_name}.h
              DEPENDS ${PROJECT_BINARY_DIR}/${header_name}.h
              WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
              VERBATIM
@@ -44,7 +43,6 @@
         else ( ${build_pch} )
             message(STATUS "No precompiled header")
         endif( ${build_pch} )
-    endif()
 endmacro()
 
 # Xcode PCH support. Has to be called *AFTER* the target is created.
