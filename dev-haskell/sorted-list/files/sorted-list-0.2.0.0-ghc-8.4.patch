--- a/Data/SortedList.hs	2018-04-15 21:03:46.571757272 +0200
+++ b/Data/SortedList.hs	2018-04-15 21:07:34.240349166 +0200
@@ -80,6 +80,10 @@
 import Data.Monoid (Monoid (..))
 #endif
 --
+#if MIN_VERSION_base(4,9,0)
+import qualified Data.Semigroup as S (Semigroup(..), (<>))
+#endif
+--
 
 -- | Type of sorted lists. Any (non-bottom) value of this type
 --   is a sorted list.
@@ -131,9 +135,18 @@
      then x : mergeSortedLists xs (y:ys)
      else y : mergeSortedLists (x:xs) ys
 
+#if MIN_VERSION_base(4,9,0)
+instance Ord a => S.Semigroup (SortedList a) where
+  (SortedList xs) <> (SortedList ys) = SortedList $ mergeSortedLists xs ys
+#endif
+
 instance Ord a => Monoid (SortedList a) where
   mempty = SortedList []
+#if MIN_VERSION_base(4,9,0)
+  mappend = (S.<>)
+#else
   mappend (SortedList xs) (SortedList ys) = SortedList $ mergeSortedLists xs ys
+#endif
 
 -- | /O(1)/. Create a sorted list with only one element.
 singleton :: a -> SortedList a
