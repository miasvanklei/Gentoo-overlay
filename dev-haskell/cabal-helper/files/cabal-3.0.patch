diff --git a/src/CabalHelper/Runtime/Main.hs b/src/CabalHelper/Runtime/Main.hs
index 44f7764..eb022fd 100644
--- a/src/CabalHelper/Runtime/Main.hs
+++ b/src/CabalHelper/Runtime/Main.hs
@@ -15,16 +15,10 @@
 
 {-# LANGUAGE CPP, BangPatterns, RecordWildCards, RankNTypes, ViewPatterns #-}
 
-#ifdef MIN_VERSION_Cabal
-#undef CH_MIN_VERSION_Cabal
-#define CH_MIN_VERSION_Cabal MIN_VERSION_Cabal
-#endif
-
 import Distribution.Simple.Utils (cabalVersion)
 import Distribution.Simple.Configure
 import Distribution.Package
   ( PackageIdentifier
-  , InstalledPackageId
   , PackageId
   , packageName
   , packageVersion
@@ -63,8 +57,7 @@ import Distribution.Simple.LocalBuildInfo
   , ComponentName(..)
   , ComponentLocalBuildInfo(..)
   , componentBuildInfo
-  , externalPackageDeps
-  , withComponentsLBI
+  , withAllComponentsInBuildOrder
   , withLibLBI
   , withExeLBI
   )
@@ -84,8 +77,7 @@ import Distribution.Simple.Build
   ( initialBuildSteps
   )
 import Distribution.Simple.BuildPaths
-  ( autogenModuleName
-  , cppHeaderName
+  ( cppHeaderName
   )
 import Distribution.Simple.Compiler
   ( PackageDB(..)
@@ -112,26 +104,10 @@ import Distribution.Verbosity
 import Distribution.Version
   ( Version
   )
-
-#if CH_MIN_VERSION_Cabal(1,22,0)
--- CPP >= 1.22
 import Distribution.Utils.NubList
-#endif
-
-#if CH_MIN_VERSION_Cabal(1,23,0)
--- >= 1.23
 import Distribution.Simple.LocalBuildInfo
   ( localUnitId
   )
-#else
--- <= 1.22
-import Distribution.Simple.LocalBuildInfo
-  ( inplacePackageId
-  )
-#endif
-
-#if CH_MIN_VERSION_Cabal(1,25,0)
--- >=1.25
 import Distribution.PackageDescription
   ( unFlagName
   -- , mkFlagName
@@ -140,12 +116,9 @@ import Distribution.Types.ForeignLib
   ( ForeignLib(..)
   )
 import Distribution.Types.UnqualComponentName
-  ( unUnqualComponentName
+  ( UnqualComponentName
+  , unUnqualComponentName
   )
-#endif
-
-#if CH_MIN_VERSION_Cabal(2,0,0)
--- CPP >= 2.0
 import Distribution.Simple.LocalBuildInfo
   ( allLibModules
   , componentBuildDir
@@ -166,6 +139,9 @@ import Distribution.Types.ComponentId
 import Distribution.Types.ComponentLocalBuildInfo
   ( maybeComponentInstantiatedWith
   )
+import Distribution.Types.LibraryName
+  ( LibraryName(..),
+  )
 import Distribution.Types.ModuleRenaming
   ( ModuleRenaming(..),
     isDefaultRenaming
@@ -189,13 +165,9 @@ import Distribution.Version
   , mkVersion
   )
 import qualified Distribution.InstalledPackageInfo as Installed
-#endif
-
-#if CH_MIN_VERSION_Cabal(2,2,0)
 import Distribution.Types.GenericPackageDescription
   ( unFlagAssignment
   )
-#endif
 
 import Control.Applicative ((<$>))
 import Control.Arrow (first, second, (&&&))
@@ -317,21 +289,13 @@ main = do
     "config-flags":[] -> do
       return $ Just $ ChResponseFlags $ sort $
         map (first unFlagName)
-#if CH_MIN_VERSION_Cabal(2,2,0)
           $ unFlagAssignment $ configConfigurationsFlags
-#else
-          $ configConfigurationsFlags
-#endif
           $ configFlags lbi
 
     "non-default-config-flags":[] -> do
       let flagDefinitons = genPackageFlags gpd
           flagAssgnments =
-#if CH_MIN_VERSION_Cabal(2,2,0)
             unFlagAssignment $ configConfigurationsFlags
-#else
-            configConfigurationsFlags
-#endif
               $ configFlags lbi
           nonDefaultFlags =
               [ (flag_name, val)
@@ -409,31 +373,21 @@ main = do
       return $ Just $ ChResponsePkgDbs $ map pkgDb $ withPackageDB lbi
 
     "entrypoints":[] -> do
-#if CH_MIN_VERSION_Cabal(2,0,0)
       includeDirMap <- recursiveDepInfo lbi v distdir
       eps <- componentsMap lbi v distdir $ \c clbi _bi -> do
                case needsBuildOutput includeDirMap (componentUnitId clbi) of
                  ProduceBuildOutput -> return $ componentEntrypoints c
                  NoBuildOutput -> return seps
                    where (_,_,seps) = recursiveIncludeDirs includeDirMap (componentUnitId clbi)
-#else
-      eps <- componentsMap lbi v distdir $ \c _clbi _bi ->
-               return $ componentEntrypoints c
-#endif
       -- MUST append Setup component at the end otherwise CabalHelper gets
       -- confused
       let eps' = eps ++ [(ChSetupHsName, ChSetupEntrypoint)]
       return $ Just $ ChResponseEntrypoints eps'
 
     "needs-build-output":[] -> do
-#if CH_MIN_VERSION_Cabal(2,0,0)
       includeDirMap <- recursiveDepInfo lbi v distdir
       nbs <- componentsMap lbi v distdir $ \c clbi _bi ->
                return $ needsBuildOutput includeDirMap (componentUnitId clbi)
-#else
-      nbs <- componentsMap lbi v distdir $ \c _clbi _bi ->
-               return $ NoBuildOutput
-#endif
       return $ Just $ ChResponseNeedsBuild nbs
 
     "source-dirs":[] -> do
@@ -491,25 +445,19 @@ componentsMap lbi _v _distdir f = do
 
     -- withComponentsLBI is deprecated but also exists in very old versions
     -- it's equivalent to withAllComponentsInBuildOrder in newer versions
-    withComponentsLBI pd lbi $ \c clbi -> do
+    withAllComponentsInBuildOrder pd lbi $ \c clbi -> do
         let bi = componentBuildInfo c
-            name = componentNameFromComponent c
+            name = componentNameToCh $ componentNameFromComponent c
 
         l' <- readIORef lr
         r <- f c clbi bi
-#if CH_MIN_VERSION_Cabal(2,0,0)
-        writeIORef lr $ (componentNameToCh (unUnitId $ componentUnitId clbi) name, r):l'
-#else
-        writeIORef lr $ (componentNameToCh "" name, r):l'
-#endif
+        writeIORef lr $ (name, r) : l'
 
     reverse <$> readIORef lr
 
 componentOptions' (lbi, v, distdir) inplaceFlag flags rf f = do
   let pd = localPkgDescr lbi
-#if CH_MIN_VERSION_Cabal(2,0,0)
   includeDirMap <- recursiveDepInfo lbi v distdir
-#endif
 
   componentsMap lbi v distdir $ \c clbi bi ->
          let
@@ -517,11 +465,7 @@ componentOptions' (lbi, v, distdir) inplaceFlag flags rf f = do
            (clbi', adopts) = case flags of
                                _ | not inplaceFlag -> (clbi, mempty)
                                ["--with-inplace"] -> (clbi, mempty)
-#if CH_MIN_VERSION_Cabal(2,0,0)
                                [] -> removeInplaceDeps v lbi pd clbi includeDirMap
-#else
-                               [] -> removeInplaceDeps v lbi pd clbi
-#endif
            opts = componentGhcOptions normal lbi bi clbi' outdir
            opts' = f opts
 
@@ -533,7 +477,6 @@ componentOptions (lbi, v, distdir) inplaceFlag flags f =
 gmModuleName :: C.ModuleName -> ChModuleName
 gmModuleName = ChModuleName . intercalate "." . components
 
-#if CH_MIN_VERSION_Cabal(2,0,0)
 removeInplaceDeps :: Verbosity
                   -> LocalBuildInfo
                   -> PackageDescription
@@ -592,32 +535,7 @@ removeInplaceDeps _v lbi pd clbi includeDirs = let
                  NoBuildOutput -> libopts
                  ProduceBuildOutput -> mempty { ghcOptPackageDBs = [SpecificPackageDB packageDbDir] }
   in (clbi', libopts')
-#else
-removeInplaceDeps :: Verbosity
-                  -> LocalBuildInfo
-                  -> PackageDescription
-                  -> ComponentLocalBuildInfo
-                  -> (ComponentLocalBuildInfo, GhcOptions)
-removeInplaceDeps _v lbi pd clbi = let
-    (ideps, deps) = partition (isInplaceDep lbi) (componentPackageDeps clbi)
-    hasIdeps = not $ null ideps
-    libopts =
-      case getLibraryClbi pd lbi of
-        Just (lib, libclbi) | hasIdeps ->
-          let
-            libbi = libBuildInfo lib
-            liboutdir = componentOutDir lbi (CLib lib)
-          in
-            (componentGhcOptions normal lbi libbi libclbi liboutdir) {
-                ghcOptPackageDBs = []
-            }
-        _ -> mempty
-    clbi' = clbi { componentPackageDeps = deps }
-  in (clbi', libopts)
-#endif
-
 
-#if CH_MIN_VERSION_Cabal(2,0,0)
 recursiveDepInfo lbi v distdir = do
   includeDirs <- componentsMap lbi v distdir $ \c clbi bi -> do
     return (componentUnitId clbi
@@ -677,72 +595,36 @@ combineEp (Just (ChExeEntrypoint  mi os1))       (ChLibEntrypoint es2 os2 ss2) =
 instantiatedGhcPackage :: (ModuleName,OpenModule) -> [(OpenUnitId, ModuleRenaming)]
 instantiatedGhcPackage (_,OpenModule oui@(DefiniteUnitId _) _) = [(oui,DefaultRenaming)]
 instantiatedGhcPackage (_, _) = []
-#endif
 
 initialBuildStepsForAllComponents distdir pd lbi v =
   initialBuildSteps distdir pd lbi v
 
-
-
-
-
-
-#if !CH_MIN_VERSION_Cabal(1,25,0)
--- CPP < 1.25
-unFlagName (FlagName n) = n
--- mkFlagName n = FlagName n
-#endif
-
 toDataVersion :: Version -> DataVersion.Version
---fromDataVersion :: DataVersion.Version -> Version
-#if CH_MIN_VERSION_Cabal(2,0,0)
 toDataVersion v = DataVersion.Version (versionNumbers v) []
---fromDataVersion (DataVersion.Version vs _) = mkVersion vs
-#else
-toDataVersion = id
---fromDataVersion = id
-#endif
-
-componentNameToCh _uid CLibName = ChLibName
-#if CH_MIN_VERSION_Cabal(1,25,0)
--- CPP >= 1.25
-#if CH_MIN_VERSION_Cabal(2,0,0)
-componentNameToCh uid (CSubLibName n) = ChSubLibName uid
-#else
-componentNameToCh _uid (CSubLibName n) = ChSubLibName (unUnqualComponentName' n)
-#endif
-componentNameToCh uid (CFLibName   n) = ChFLibName (unUnqualComponentName' n)
-#endif
-componentNameToCh _uid (CExeName n) = ChExeName (unUnqualComponentName' n)
-componentNameToCh _uid (CTestName n) = ChTestName (unUnqualComponentName' n)
-componentNameToCh _uid (CBenchName n) = ChBenchName (unUnqualComponentName' n)
-
-#if CH_MIN_VERSION_Cabal(1,25,0)
--- CPP >= 1.25
+
+componentNameToCh :: ComponentName -> ChComponentName
+componentNameToCh (CLibName LMainLibName) = ChLibName ChMainLibName
+componentNameToCh (CLibName (LSubLibName n)) = ChLibName $ ChSubLibName (unUnqualComponentName' n)
+componentNameToCh (CFLibName n) = ChFLibName (unUnqualComponentName' n)
+componentNameToCh (CExeName n) = ChExeName (unUnqualComponentName' n)
+componentNameToCh (CTestName n) = ChTestName (unUnqualComponentName' n)
+componentNameToCh (CBenchName n) = ChBenchName (unUnqualComponentName' n)
+
+unUnqualComponentName' :: UnqualComponentName -> String
 unUnqualComponentName' = unUnqualComponentName
-#else
-unUnqualComponentName' = id
-#endif
-
-#if !CH_MIN_VERSION_Cabal(1,25,0)
--- CPP < 1.25
-componentNameFromComponent (CLib Library {}) = CLibName
-#elif CH_MIN_VERSION_Cabal(1,25,0)
--- CPP >= 1.25 (redundant)
-componentNameFromComponent (CLib Library { libName = Nothing }) = CLibName
-componentNameFromComponent (CLib Library { libName = Just n })  = CSubLibName n
+
+componentNameFromComponent :: Component -> ComponentName
+componentNameFromComponent (CLib Library { libName = n })  = CLibName n
 componentNameFromComponent (CFLib ForeignLib {..}) = CFLibName foreignLibName
-#endif
 componentNameFromComponent (CExe Executable {..}) = CExeName exeName
 componentNameFromComponent (CTest TestSuite {..}) = CTestName testName
 componentNameFromComponent (CBench Benchmark {..}) = CBenchName benchmarkName
 
+
 componentOutDir lbi (CLib Library {..})=
     buildDir lbi
-#if CH_MIN_VERSION_Cabal(2,0,0)
 componentOutDir lbi (CFLib ForeignLib {..}) =
     componentOutDir' lbi (unUnqualComponentName foreignLibName)
-#endif
 componentOutDir lbi (CExe Executable {..}) =
     componentOutDir' lbi (unUnqualComponentName' exeName)
 componentOutDir lbi (CTest TestSuite { testInterface = TestSuiteExeV10 _ _, ..}) =
@@ -764,18 +646,12 @@ componentEntrypoints (CLib Library {..})
     = ChLibEntrypoint
         (map gmModuleName exposedModules)
         (map gmModuleName $ otherModules libBuildInfo)
-#if CH_MIN_VERSION_Cabal(2,0,0)
         (map gmModuleName signatures)
-#else
-        [] -- no signatures prior to Cabal 2.0
-#endif
-#if CH_MIN_VERSION_Cabal(2,0,0)
 componentEntrypoints (CFLib (ForeignLib{..}))
     = ChLibEntrypoint
         []
         (map gmModuleName $ otherModules foreignLibBuildInfo)
         []
-#endif
 componentEntrypoints (CExe Executable {..})
     = ChExeEntrypoint
         modulePath
@@ -791,50 +667,19 @@ componentEntrypoints (CBench Benchmark { benchmarkInterface = BenchmarkExeV10 _
 componentEntrypoints (CBench Benchmark {})
     = ChLibEntrypoint [] [] []
 
-#if CH_MIN_VERSION_Cabal(2,0,0)
 isInplaceCompInc :: ComponentLocalBuildInfo -> (OpenUnitId, ModuleRenaming) -> Bool
 isInplaceCompInc clbi (DefiniteUnitId uid, _mr)     = unDefUnitId uid `elem` componentInternalDeps clbi
 isInplaceCompInc clbi (IndefFullUnitId uid _, _mmr) = False
-#endif
 
-#if CH_MIN_VERSION_Cabal(2,0,0)
 isInplaceDep :: LocalBuildInfo -> ComponentLocalBuildInfo -> (UnitId, MungedPackageId) -> Bool
 isInplaceDep lbi clbi (uid, _mpid) = uid `elem` componentInternalDeps clbi
-#else
-isInplaceDep :: LocalBuildInfo -> (InstalledPackageId, PackageId) -> Bool
-#  if CH_MIN_VERSION_Cabal(1,23,0)
--- CPP >= 1.23
-isInplaceDep lbi (ipid, _pid) = localUnitId lbi == ipid
-#  else
--- CPP <= 1.22
-isInplaceDep _lbi (ipid, pid) = inplacePackageId pid == ipid
-#  endif
-#endif
-
-#if CH_MIN_VERSION_Cabal(1,22,0)
--- CPP >= 1.22
--- >= 1.22 uses NubListR
+
 nubPackageFlags opts = opts
-#else
-nubPackageFlags opts = opts { ghcOptPackages = nub $ ghcOptPackages opts }
-#endif
 
 renderGhcOptions' :: LocalBuildInfo
                   -> Verbosity
                   -> GhcOptions
                   -> IO [String]
-#if !CH_MIN_VERSION_Cabal(1,20,0)
-renderGhcOptions' lbi v opts = do
--- CPP < 1.20
-  (ghcProg, _) <- requireProgram v ghcProgram (withPrograms lbi)
-  let Just ghcVer = programVersion ghcProg
-  return $ renderGhcOptions ghcVer opts
-#elif CH_MIN_VERSION_Cabal(1,20,0) && !CH_MIN_VERSION_Cabal(1,24,0)
-renderGhcOptions' lbi _v opts = do
--- CPP >= 1.20 && < 1.24
-  return $ renderGhcOptions (compiler lbi) opts
-#else
 renderGhcOptions' lbi _v opts = do
 -- CPP >= 1.24
   return $ renderGhcOptions (compiler lbi) (hostPlatform lbi) opts
-#endif
diff --git a/src/CabalHelper/Shared/InterfaceTypes.hs b/src/CabalHelper/Shared/InterfaceTypes.hs
index cca894a..5149dc3 100644
--- a/src/CabalHelper/Shared/InterfaceTypes.hs
+++ b/src/CabalHelper/Shared/InterfaceTypes.hs
@@ -50,14 +50,17 @@ data ChResponse
   deriving (Eq, Ord, Read, Show, Generic)
 
 data ChComponentName = ChSetupHsName
-                     | ChLibName
-                     | ChSubLibName String
+                     | ChLibName ChLibraryName
                      | ChFLibName String
                      | ChExeName String
                      | ChTestName String
                      | ChBenchName String
   deriving (Eq, Ord, Read, Show, Generic)
 
+data ChLibraryName = ChMainLibName
+                   | ChSubLibName String
+  deriving (Eq, Ord, Read, Show, Generic)
+
 newtype ChModuleName = ChModuleName String
     deriving (Eq, Ord, Read, Show, Generic)
 
diff --git a/lib/Distribution/Helper.hs b/lib/Distribution/Helper.hs
index 184deb1..3e6ad37 100644
--- a/lib/Distribution/Helper.hs
+++ b/lib/Distribution/Helper.hs
@@ -84,6 +84,7 @@ module Distribution.Helper (
   -- * Result types
   , ChModuleName(..)
   , ChComponentName(..)
+  , ChLibraryName(..)
   , ChPkgDb(..)
   , ChEntrypoint(..)
   , NeedsBuildOutput(..)
diff --git a/src/CabalHelper/Compiletime/Compile.hs b/src/CabalHelper/Compiletime/Compile.hs
index 2787ca3..326bac5 100644
--- a/src/CabalHelper/Compiletime/Compile.hs
+++ b/src/CabalHelper/Compiletime/Compile.hs
@@ -495,12 +495,12 @@ runSetupHs opts@Options {..} db srcdir ever CabalInstallVersion {..}
 
     go :: ([String] -> IO ()) -> IO ()
     go run = do
-      run $ [ "configure", "--package-db", db, "--prefix", db </> "prefix" ]
+      run $ [ "v1-configure", "--package-db", db, "--prefix", db </> "prefix" ]
               ++ withGHCProgramOptions opts
       mnproc <- join . fmap readMaybe <$> lookupEnv "NPROC"
-      run $ [ "build" ] ++ parmake_opt mnproc
-      run [ "copy" ]
-      run [ "register" ]
+      run $ [ "v1-build" ] ++ parmake_opt mnproc
+      run [ "v1-copy" ]
+      run [ "v1-register" ]
 
 
 
