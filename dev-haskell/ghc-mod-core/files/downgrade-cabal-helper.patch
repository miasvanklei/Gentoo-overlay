--- a/GhcMod/Target.hs
+++ b/GhcMod/Target.hs
@@ -367,8 +367,8 @@
 -- ghc do the warning about it. Right now we run that module through
 -- resolveModule like any other
 resolveChEntrypoints :: FilePath -> ChEntrypoint -> IO [CompilationUnit]
+resolveChEntrypoints _ (ChLibEntrypoint em om) =
+    return $ map (Right . chModToMod) (em ++ om)
-resolveChEntrypoints _ (ChLibEntrypoint em om sm) =
-    return $ map (Right . chModToMod) (em ++ om ++ sm)
 
 resolveChEntrypoints _ (ChExeEntrypoint main om) =
     return $ [Left main] ++ map (Right . chModToMod) om
--- a/GhcMod/CabalHelper.hs
+++ b/GhcMod/CabalHelper.hs
@@ -89,17 +89,28 @@
     cacheLens = Just (lGmcComponents . lGmCaches),
     cacheFile = cabalHelperCacheFile distdir,
     cachedAction = \ _tcf (_progs, _projdir, _ver) _ma -> do
+      runCHQuery $ do
+        q <- join7
+               <$> ghcOptions
+               <*> ghcPkgOptions
+               <*> ghcSrcOptions
+               <*> ghcLangOptions
+               <*> entrypoints
+               <*> entrypoints
+               <*> sourceDirs
+        let cs = flip map q $ curry8 (GmComponent mempty)
+        return ([setupConfigPath distdir], cs)
-      cs <- runCHQuery $ components $
-             GmComponent mempty
-               CH.<$> ghcOptions
-               CH.<.> ghcPkgOptions
-               CH.<.> ghcSrcOptions
-               CH.<.> ghcLangOptions
-               CH.<.> entrypoints
-               CH.<.> entrypoints
-               CH.<.> sourceDirs
-      return ([setupConfigPath distdir], cs)
   }
+ where
+   curry8 fn (a, (b, (c, (d, (e, (f, (g, h))))))) = fn a b c d e f g h
+
+   join7 a b c d e f = join' a . join' b . join' c . join' d . join' e . join' f
+   join' :: Eq a => [(a,b)] -> [(a,c)] -> [(a,(b,c))]
+   join' lb lc = [ (a, (b, c))
+                 | (a, b)  <- lb
+                 , (a', c) <- lc
+                 , a == a'
+                 ]
 
 getQueryEnv :: (IOish m, GmOut m, GmEnv m) => m QueryEnv
 getQueryEnv = do
@@ -108,7 +119,7 @@
   readProc <- gmReadProcess
   let projdir = cradleRootDir crdl
       distdir = projdir </> cradleDistDir crdl
+  return (defaultQueryEnv projdir distdir) {
-  return (mkQueryEnv projdir distdir) {
                   qeReadProcess = readProc
                 , qePrograms = helperProgs progs
                 }
@@ -123,7 +134,7 @@
 prepareCabalHelper = do
   crdl <- cradle
   when (isCabalHelperProject $ cradleProject crdl) $
+       withCabal $ prepare' =<< getQueryEnv
-       withCabal $ prepare =<< getQueryEnv
 
 withAutogen :: (IOish m, GmEnv m, GmOut m, GmLog m) => m a -> m a
 withAutogen action = do
@@ -147,7 +158,7 @@
  where
    writeAutogen = do
      gmLog GmDebug "" $ strDoc $ "writing Cabal autogen files"
+     writeAutogenFiles' =<< getQueryEnv
-     writeAutogenFiles =<< getQueryEnv
 
 
 withCabal :: (IOish m, GmEnv m, GmOut m, GmLog m) => m a -> m a
--- a/GhcMod/Types.hs
+++ b/GhcMod/Types.hs
@@ -284,6 +284,7 @@
                      | GMCResolved
 data GmComponent (t :: GmComponentType) eps = GmComponent {
     gmcHomeModuleGraph :: GmModuleGraph
+  , gmcName            :: ChComponentName
   , gmcGhcOpts         :: [GHCOption]
   , gmcGhcPkgOpts      :: [GHCOption]
   , gmcGhcSrcOpts      :: [GHCOption]
@@ -291,7 +292,6 @@
   , gmcRawEntrypoints  :: ChEntrypoint
   , gmcEntrypoints     :: eps
   , gmcSourceDirs      :: [FilePath]
-  , gmcName            :: ChComponentName
   } deriving (Eq, Ord, Show, Read, Generic, Functor)
 
 instance Binary eps => Binary (GmComponent t eps) where
