--- a/Lvm/Common/Byte.hs
+++ b/Lvm/Common/Byte.hs
@@ -17,6 +17,7 @@ import qualified Control.Exception as CE (catch, IOException)
 import Data.Word
 import System.Exit
 import System.IO
+import Data.Semigroup as Sem
 
 {----------------------------------------------------------------
   types
@@ -67,11 +68,14 @@ max32 = 2^(32::Int) -1 -- Bastiaan (Todo: check)
   Byte lists
 ----------------------------------------------------------------}
 
+instance Sem.Semigroup Bytes where
+   bs  <> Nil = bs
+   Nil <> cs  = cs
+   bs  <> cs  = Cat bs cs
+
 instance Monoid Bytes where
    mempty  = Nil
-   mappend bs  Nil = bs 
-   mappend Nil cs  = cs
-   mappend bs  cs  = Cat bs cs     
+   mappend = (<>)
 
 isEmpty :: Bytes -> Bool
 isEmpty Nil         = True
--- a/Lvm/Common/IdMap.hs
+++ b/Lvm/Common/IdMap.hs
@@ -132,10 +132,10 @@ unionMaps :: [IdMap a] -> IdMap a
 unionMaps = foldr unionMap emptyMap
 
 foldMapWithId :: (Id -> a -> b -> b) -> b -> IdMap a -> b
-foldMapWithId f z (IdMap m) = IntMap.foldWithKey (f . idFromInt) z m
+foldMapWithId f z (IdMap m) = IntMap.foldrWithKey (f . idFromInt) z m
 
 foldMap :: (a -> b -> b) -> b -> IdMap a -> b
-foldMap f z (IdMap m) = IntMap.fold f z m
+foldMap f z (IdMap m) = IntMap.foldr f z m
 
 sizeMap :: IdMap a -> Int
 sizeMap (IdMap m) = IntMap.size m
--- a/Lvm/Common/IdSet.hs
+++ b/Lvm/Common/IdSet.hs
@@ -18,6 +18,7 @@ import Data.IntSet (IntSet)
 import Data.List (sort)
 import Lvm.Common.Id
 import qualified Data.IntSet as IntSet
+import Data.Semigroup as Sem
 
 -- | An efficient set of 'Id's
 newtype IdSet = IdSet IntSet
@@ -25,9 +26,12 @@ newtype IdSet = IdSet IntSet
 instance Show IdSet where
   showsPrec n a = showParen (n >= 11) (showString "IdSet.setFromList " . showsPrec 11 (listFromSet a))
 
+instance Sem.Semigroup IdSet where
+  (<>) = unionSet
+
 instance Monoid IdSet where
-  mempty = emptySet
-  mappend = unionSet
+  mempty  = emptySet
+  mappend = (<>)
   mconcat = unionSets
 
 emptySet :: IdSet
--- a/lvmlib.cabal
+++ b/lvmlib.cabal
@@ -39,6 +39,8 @@ Executable coreasm
 
 Library
   Build-Depends:     base >= 3 && < 5, array, containers, directory, filepath, parsec, wl-pprint
+  if !impl(ghc >= 8.0)
+    Build-Depends: semigroups == 0.18.*
   ghc-options:       -Wall
   default-language:  Haskell98
   hs-source-dirs:    .
