diff --git a/hls-eval-plugin.cabal b/hls-eval-plugin.cabal
index c9ba87be6f..16232b61cc 100644
--- a/hls-eval-plugin.cabal
+++ b/hls-eval-plugin.cabal
@@ -82,22 +82,6 @@ library
     , unliftio
     , unordered-containers
 
-  if impl(ghc < 8.10.5)
-    build-depends:
-      ghc-api-compat ==8.6
-  elif impl(ghc == 8.10.5)
-    build-depends:
-      ghc-api-compat ==8.10.5
-  elif impl(ghc == 8.10.6)
-    build-depends:
-      ghc-api-compat ==8.10.6
-  elif impl(ghc == 8.10.7)
-    build-depends:
-      ghc-api-compat ==8.10.7
-  elif impl(ghc == 9.0.1)
-    build-depends:
-      ghc-api-compat ==9.0.1
-
   ghc-options:
     -Wall -Wno-name-shadowing -Wno-unticked-promoted-constructors
 
diff --git a/src/Ide/Plugin/Eval/Code.hs b/src/Ide/Plugin/Eval/Code.hs
index 7497ae783a..be013e2dc2 100644
--- a/src/Ide/Plugin/Eval/Code.hs
+++ b/src/Ide/Plugin/Eval/Code.hs
@@ -6,22 +6,20 @@
 module Ide.Plugin.Eval.Code (Statement, testRanges, resultRange, evalSetup, propSetup, testCheck, asStatements,myExecStmt) where
 
 import           Control.Lens                   ((^.))
+import           Control.Monad.IO.Class
 import           Data.Algorithm.Diff            (Diff, PolyDiff (..), getDiff)
 import qualified Data.List.NonEmpty             as NE
 import           Data.String                    (IsString)
 import qualified Data.Text                      as T
+import           Development.IDE.GHC.Compat
 import           Development.IDE.Types.Location (Position (..), Range (..))
 import           GHC                            (ExecOptions, ExecResult (..),
                                                  execStmt)
-import           GhcMonad                       (Ghc, liftIO, modifySession)
-import           HscTypes
 import           Ide.Plugin.Eval.Types          (Language (Plain), Loc,
                                                  Located (..),
                                                  Section (sectionLanguage),
                                                  Test (..), Txt, locate,
                                                  locate0)
-import           InteractiveEval                (getContext, parseImportDecl,
-                                                 runDecls, setContext)
 import           Language.LSP.Types.Lens        (line, start)
 import           System.IO.Extra                (newTempFile, readFile')
 
diff --git a/src/Ide/Plugin/Eval/CodeLens.hs b/src/Ide/Plugin/Eval/CodeLens.hs
index c7ef62b912..10b82027a5 100644
--- a/src/Ide/Plugin/Eval/CodeLens.hs
+++ b/src/Ide/Plugin/Eval/CodeLens.hs
@@ -25,7 +25,6 @@ module Ide.Plugin.Eval.CodeLens (
     evalCommand,
 ) where
 
-import           CmdLineParser
 import           Control.Applicative                  (Alternative ((<|>)))
 import           Control.Arrow                        (second, (>>>))
 import           Control.Exception                    (try)
@@ -72,59 +71,30 @@ import           Development.IDE.Core.Compile         (loadModulesHome,
                                                        setupFinderCache)
 import           Development.IDE.Core.PositionMapping (toCurrentRange)
 import           Development.IDE.Core.Rules           (TransitiveDependencies (transitiveModuleDeps))
-import           Development.IDE.GHC.Compat           (AnnotationComment (AnnBlockComment, AnnLineComment),
-                                                       GenLocated (L),
-                                                       GhcException, HscEnv,
-                                                       ParsedModule (..),
-                                                       SrcSpan (UnhelpfulSpan),
-                                                       moduleName,
-                                                       setInteractiveDynFlags,
-                                                       srcSpanFile)
+import           Development.IDE.GHC.Compat           hiding (typeKind,
+                                                       unitState)
+import qualified Development.IDE.GHC.Compat           as Compat
 import qualified Development.IDE.GHC.Compat           as SrcLoc
+import           Development.IDE.GHC.Compat.Util      (GhcException,
+                                                       OverridingBool (..))
+import qualified Development.IDE.GHC.Compat.Util      as FastString
 import           Development.IDE.Types.Options
-import           DynamicLoading                       (initializePlugins)
-import           FastString                           (unpackFS)
 import           GHC                                  (ClsInst,
                                                        ExecOptions (execLineNumber, execSourceFile),
-                                                       FamInst, Fixity,
-                                                       GeneralFlag (..), Ghc,
-                                                       GhcLink (LinkInMemory),
-                                                       GhcMode (CompManager),
-                                                       GhcMonad (getSession),
-                                                       HscTarget (HscInterpreted),
+                                                       FamInst, GhcMonad,
                                                        LoadHowMuch (LoadAllTargets),
-                                                       ModSummary (ms_hspp_opts),
-                                                       NamedThing (getName, getOccName),
-                                                       SuccessFlag (Failed, Succeeded),
-                                                       TcRnExprMode (..),
-                                                       TyThing, defaultFixity,
+                                                       NamedThing (getName),
+                                                       defaultFixity,
                                                        execOptions, exprType,
                                                        getInfo,
                                                        getInteractiveDynFlags,
-                                                       getSessionDynFlags,
                                                        isImport, isStmt, load,
                                                        parseName, pprFamInst,
-                                                       pprInstance, runDecls,
-                                                       setContext, setLogAction,
-                                                       setSessionDynFlags,
-                                                       setTargets, typeKind)
+                                                       pprInstance,
+                                                       setLogAction, setTargets,
+                                                       typeKind)
 import qualified GHC.LanguageExtensions.Type          as LangExt (Extension (..))
-import           GhcPlugins                           (DynFlags (..),
-                                                       defaultLogActionHPutStrDoc,
-                                                       elemNameSet, gopt_set,
-                                                       gopt_unset, hsc_dflags,
-                                                       isSymOcc, mkNameSet,
-                                                       parseDynamicFlagsCmdLine,
-                                                       pprDefinedAt,
-                                                       pprInfixName,
-                                                       targetPlatform,
-                                                       tyThingParent_maybe,
-                                                       xopt_set, xopt_unset)
-
-import           HscTypes                             (InteractiveImport (IIModule),
-                                                       ModSummary (ms_mod),
-                                                       Target (Target),
-                                                       TargetId (TargetFile))
+
 import           Ide.Plugin.Eval.Code                 (Statement, asStatements,
                                                        evalSetup, myExecStmt,
                                                        propSetup, resultRange,
@@ -146,28 +116,15 @@ import           Language.LSP.Types                   hiding
                                                        SemanticTokenRelative (length))
 import           Language.LSP.Types.Lens              (end, line)
 import           Language.LSP.VFS                     (virtualFileText)
-import           Outputable                           (SDoc, empty, hang, nest,
-                                                       ppr, showSDoc, text,
-                                                       vcat, ($$), (<+>))
 import           System.FilePath                      (takeFileName)
 import           System.IO                            (hClose)
 import           UnliftIO.Temporary                   (withSystemTempFile)
-import           Util                                 (OverridingBool (Never))
 
-import           IfaceSyn                             (showToHeader)
-import           PprTyThing                           (pprTyThingInContext,
-                                                       pprTypeForUser)
 #if MIN_VERSION_ghc(9,0,0)
-import           GHC.Driver.Ways                      (hostFullWays,
-                                                       wayGeneralFlags,
-                                                       wayUnsetGeneralFlags)
-import           GHC.Parser.Annotation                (ApiAnns (apiAnnRogueComments))
-import           GHC.Parser.Lexer                     (mkParserFlags)
+import           GHC.Driver.Session                   (unitDatabases, unitState)
 import           GHC.Types.SrcLoc                     (UnhelpfulSpanReason (UnhelpfulInteractive))
 #else
-import           GhcPlugins                           (interpWays, updateWays,
-                                                       wayGeneralFlags,
-                                                       wayUnsetGeneralFlags)
+import           DynFlags
 #endif
 
 #if MIN_VERSION_ghc(9,0,0)
@@ -180,7 +137,7 @@ apiAnnComments' :: SrcLoc.ApiAnns -> [SrcLoc.Located AnnotationComment]
 apiAnnComments' = concat . Map.elems . snd
 
 pattern RealSrcSpanAlready :: SrcLoc.RealSrcSpan -> SrcSpan
-pattern RealSrcSpanAlready x = SrcLoc.RealSrcSpan x
+pattern RealSrcSpanAlready x = SrcLoc.RealSrcSpan x Nothing
 #endif
 
 
@@ -203,7 +160,7 @@ codeLens st plId CodeLensParams{_textDocument} =
                 let comments =
                          foldMap (\case
                             L (RealSrcSpanAlready real) bdy
-                                | unpackFS (srcSpanFile real) ==
+                                | FastString.unpackFS (srcSpanFile real) ==
                                     fromNormalizedFilePath nfp
                                 , let ran0 = realSrcSpanToRange real
                                 , Just curRan <- toCurrentRange posMap ran0
@@ -387,7 +344,7 @@ runEvalCmd st EvalParams{..} =
                         return $ Left err
                     Succeeded -> do
                         -- Evaluation takes place 'inside' the module
-                        setContext [IIModule modName]
+                        setContext [Compat.IIModule modName]
                         Right <$> getSession
 
             edits <-
@@ -601,11 +558,10 @@ evals (st, fp) df stmts = do
                 dbg "{DECL " stmt
                 void $ runDecls stmt
                 return Nothing
+    pf = initParserOpts df
 #if !MIN_VERSION_ghc(9,0,0)
-    pf = df
     unhelpfulReason = "<interactive>"
 #else
-    pf = mkParserFlags df
     unhelpfulReason = UnhelpfulInteractive
 #endif
     exec stmt l =
@@ -766,7 +722,7 @@ doKindCmd True df arg = do
 doTypeCmd :: DynFlags -> Text -> Ghc (Maybe Text)
 doTypeCmd dflags arg = do
     let (emod, expr) = parseExprMode arg
-    ty <- exprType emod $ T.unpack expr
+    ty <- GHC.exprType emod $ T.unpack expr
     let rawType = T.strip $ T.pack $ showSDoc dflags $ pprTypeForUser ty
         broken = T.any (\c -> c == '\r' || c == '\n') rawType
     pure $
@@ -812,29 +768,20 @@ parseGhciLikeCmd input = do
 
 setupDynFlagsForGHCiLike :: HscEnv -> DynFlags -> IO DynFlags
 setupDynFlagsForGHCiLike env dflags = do
-    let dflags3 =
-            dflags
-                { hscTarget = HscInterpreted
-                , ghcMode = CompManager
-                , ghcLink = LinkInMemory
-                }
+    let dflags3 = setInterpreterLinkerOptions dflags
         platform = targetPlatform dflags3
-#if MIN_VERSION_ghc(9,0,0)
-        evalWays = hostFullWays
-#else
-        evalWays = interpWays
-#endif
-        dflags3a = dflags3{ways = evalWays}
+        evalWays = Compat.hostFullWays
+        dflags3a = setWays evalWays dflags3
         dflags3b =
             foldl gopt_set dflags3a $
-                concatMap (wayGeneralFlags platform) evalWays
+                concatMap (Compat.wayGeneralFlags platform) evalWays
         dflags3c =
             foldl gopt_unset dflags3b $
-                concatMap (wayUnsetGeneralFlags platform) evalWays
+                concatMap (Compat.wayUnsetGeneralFlags platform) evalWays
         dflags4 =
             dflags3c
                 `gopt_set` Opt_ImplicitImportQualified
                 `gopt_set` Opt_IgnoreOptimChanges
                 `gopt_set` Opt_IgnoreHpcChanges
                 `gopt_unset` Opt_DiagnosticsShowCaret
-    initializePlugins env dflags4
+    Compat.hsc_dflags <$> Compat.initializePlugins (Compat.hscSetFlags dflags4 env)
diff --git a/src/Ide/Plugin/Eval/GHC.hs b/src/Ide/Plugin/Eval/GHC.hs
index ae3c26150c..e5232759ce 100644
--- a/src/Ide/Plugin/Eval/GHC.hs
+++ b/src/Ide/Plugin/Eval/GHC.hs
@@ -13,22 +13,15 @@ module Ide.Plugin.Eval.GHC (
     showDynFlags,
 ) where
 
-import           Data.List                   (isPrefixOf)
-import           Data.Maybe                  (mapMaybe)
-import           Data.String                 (fromString)
+import           Data.List                       (isPrefixOf)
+import           Data.Maybe                      (mapMaybe)
+import           Data.String                     (fromString)
 import           Development.IDE.GHC.Compat
-import qualified EnumSet
-import           GHC.LanguageExtensions.Type (Extension (..))
-import           GhcMonad                    (modifySession)
-import           GhcPlugins                  (fsLit, hsc_IC, pprHsString)
-import           HscTypes                    (InteractiveContext (ic_dflags))
-import           Ide.Plugin.Eval.Util        (asS, gStrictTry)
-import qualified Lexer
-import           Outputable                  (Outputable (ppr), SDoc,
-                                              showSDocUnsafe, text, vcat, (<+>))
-import qualified Parser
-import           SrcLoc                      (mkRealSrcLoc)
-import           StringBuffer                (stringToStringBuffer)
+import           Development.IDE.GHC.Compat.Util
+import qualified Development.IDE.GHC.Compat.Util as EnumSet
+
+import           GHC.LanguageExtensions.Type     (Extension (..))
+import           Ide.Plugin.Eval.Util            (asS, gStrictTry)
 
 {- $setup
 >>> import GHC
@@ -72,9 +65,9 @@ pkgNames_ :: [PackageFlag] -> [String]
 pkgNames_ =
     mapMaybe
         ( \case
-            ExposePackage _ (PackageArg n) _                 -> Just n
-            ExposePackage _ (UnitIdArg (DefiniteUnitId n)) _ -> Just $ asS n
-            _                                                -> Nothing
+            ExposePackage _ (PackageArg n) _  -> Just n
+            ExposePackage _ (UnitIdArg uid) _ -> Just $ asS uid
+            _                                 -> Nothing
         )
 
 {- | Expose a list of packages.
diff --git a/src/Ide/Plugin/Eval/Util.hs b/src/Ide/Plugin/Eval/Util.hs
index 1c0a6822d0..a249aa1214 100644
--- a/src/Ide/Plugin/Eval/Util.hs
+++ b/src/Ide/Plugin/Eval/Util.hs
@@ -15,30 +15,30 @@ module Ide.Plugin.Eval.Util (
     logWith,
 ) where
 
-import           Control.Monad.Extra        (maybeM)
-import           Control.Monad.IO.Class     (MonadIO (liftIO))
-import           Control.Monad.Trans.Class  (lift)
-import           Control.Monad.Trans.Except (ExceptT (..), runExceptT, throwE)
-import           Data.Aeson                 (Value (Null))
-import           Data.Bifunctor             (first)
-import           Data.String                (IsString (fromString))
-import qualified Data.Text                  as T
-import           Development.IDE            (IdeState, Priority (..), ideLogger,
-                                             logPriority)
-import           Development.IDE.GHC.Compat (gcatch)
-import           Exception                  (ExceptionMonad, SomeException (..),
-                                             evaluate)
-import           GHC.Exts                   (toList)
-import           GHC.Stack                  (HasCallStack, callStack,
-                                             srcLocFile, srcLocStartCol,
-                                             srcLocStartLine)
+import           Control.Exception               (SomeException, evaluate)
+import           Control.Monad.Extra             (maybeM)
+import           Control.Monad.IO.Class          (MonadIO (liftIO))
+import           Control.Monad.Trans.Class       (lift)
+import           Control.Monad.Trans.Except      (ExceptT (..), runExceptT,
+                                                  throwE)
+import           Data.Aeson                      (Value (Null))
+import           Data.Bifunctor                  (first)
+import           Data.String                     (IsString (fromString))
+import qualified Data.Text                       as T
+import           Development.IDE                 (IdeState, Priority (..),
+                                                  ideLogger, logPriority)
+import           Development.IDE.GHC.Compat      (Outputable, ppr,
+                                                  showSDocUnsafe)
+import           Development.IDE.GHC.Compat.Util (MonadCatch, catch)
+import           GHC.Exts                        (toList)
+import           GHC.Stack                       (HasCallStack, callStack,
+                                                  srcLocFile, srcLocStartCol,
+                                                  srcLocStartLine)
 import           Language.LSP.Server
 import           Language.LSP.Types
-import           Outputable                 (Outputable (ppr), ppr,
-                                             showSDocUnsafe)
-import           System.FilePath            (takeExtension)
-import           System.Time.Extra          (duration, showDuration)
-import           UnliftIO.Exception         (catchAny)
+import           System.FilePath                 (takeExtension)
+import           System.Time.Extra               (duration, showDuration)
+import           UnliftIO.Exception              (catchAny)
 
 asS :: Outputable a => a -> String
 asS = showSDocUnsafe . ppr
@@ -93,9 +93,9 @@ response' act = do
         _ <- sendRequest SWorkspaceApplyEdit (ApplyWorkspaceEditParams Nothing a) (\_ -> pure ())
         return $ Right Null
 
-gStrictTry :: ExceptionMonad m => m b -> m (Either String b)
+gStrictTry :: (MonadIO m, MonadCatch m) => m b -> m (Either String b)
 gStrictTry op =
-    gcatch
+    catch
         (op >>= fmap Right . gevaluate)
         showErr
 
