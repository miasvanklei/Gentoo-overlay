--- a/src/Refact/Apply.hs	2001-09-09 03:46:40.000000000 +0200
+++ b/src/Refact/Apply.hs	2020-03-01 13:34:18.989651923 +0100
@@ -34,10 +34,13 @@
 import Data.Data
 import Data.Generics.Schemes
 
-import HsExpr as GHC hiding (Stmt)
-import HsImpExp
-import HsSyn hiding (Pat, Stmt)
+import GHC.Hs.Expr as GHC hiding (Stmt)
+import GHC.Hs.ImpExp
+import Bag as GHC
+import ErrUtils as GHC
+import GHC.Hs hiding (Pat, Stmt)
 import SrcLoc
+import Outputable (text, showSDocUnsafe)
 import qualified GHC hiding (parseModule)
 import qualified OccName as GHC
 import Data.Generics hiding (GT)
@@ -67,7 +70,7 @@
 -- | Apply a set of refactorings as supplied by hlint
 applyRefactorings :: Maybe (Int, Int) -> [(String, [Refactoring R.SrcSpan])] -> FilePath -> IO String
 applyRefactorings optionsPos inp file = do
-  (as, m) <- either (error . show) (uncurry applyFixities)
+  (as, m) <- either (error . show . map showSDocUnsafe . pprErrMsgBagWithLoc) (uncurry applyFixities)
               <$> parseModuleWithOptions rigidLayout file
   let noOverlapInp = removeOverlap Silent inp
       refacts = (fmap . fmap . fmap) (toGhcSrcSpan file) <$> noOverlapInp
@@ -187,6 +190,8 @@
 
 -- Specialised parsers
 
+mkError :: String -> GHC.DynFlags -> GHC.SrcSpan -> ErrorMessages
+mkError s dyn l = GHC.unitBag (GHC.mkPlainErrMsg dyn l (text s))
 
 parseModuleName :: GHC.SrcSpan -> Parser (GHC.Located GHC.ModuleName)
 parseModuleName ss _ _ s =
@@ -198,7 +203,7 @@
   case parseDecl dyn fname s of
     -- Safe as we add no annotations to the ValD
     Right (as, GHC.L l (GHC.ValD _ b)) -> Right (as, GHC.L l b)
-    Right (_, GHC.L l _) -> Left (l, "Not a HsBind")
+    Right (_, GHC.L l _) -> Left (mkError "Not a HsBind" dyn l)
     Left e -> Left e
 parseMatch :: Parser (GHC.LMatch GHC.GhcPs (GHC.LHsExpr GHC.GhcPs))
 parseMatch dyn fname s =
@@ -206,8 +211,8 @@
     Right (as, GHC.L l GHC.FunBind{fun_matches}) ->
       case unLoc (GHC.mg_alts fun_matches) of
            [x] -> Right (as, x)
-           _   -> Left (l, "Not a single match")
-    Right (_, GHC.L l _) -> Left (l, "Not a funbind")
+           _   -> Left (mkError "Not a single match" dyn l)
+    Right (_, GHC.L l _) -> Left (mkError "Not a funbind" dyn l)
     Left e -> Left e
 
 -- Substitute variables into templates
@@ -332,7 +337,7 @@
       p s = unsafePerformIO (withDynFlags (\d -> parser d uniqueName s))
       (relat, template) = case p orig of
                               Right xs -> xs
-                              Left err -> error (show err)
+                              Left err -> error $ show $ map showSDocUnsafe $ pprErrMsgBagWithLoc err
       (newExpr, newAnns) = runState (substTransform m subts template) (mergeAnns as relat)
       replacementPred (GHC.L l _) = l == replExprLocation
       transformation = everywhereM (mkM (doGenReplacement m (replacementPred . decomposeSrcSpan) newExpr))
--- a/src/Refact/Fixity.hs	2001-09-09 03:46:40.000000000 +0200
+++ b/src/Refact/Fixity.hs	2020-03-01 13:34:18.989651923 +0100
@@ -7,9 +7,9 @@
 
 import Refact.Utils
 import BasicTypes (Fixity(..), defaultFixity, compareFixity, negateFixity, FixityDirection(..), SourceText(..))
-import HsExpr
+import GHC.Hs.Expr
 import RdrName
-import HsExtension
+import GHC.Hs.Extension
 import OccName
 import Data.Generics hiding (Fixity)
 import Data.Maybe
--- a/src/Refact/Run.hs	2001-09-09 03:46:40.000000000 +0200
+++ b/src/Refact/Run.hs	2020-03-01 13:34:18.989651923 +0100
@@ -47,6 +47,8 @@
 import Debug.Trace
 
 import SrcLoc
+import Outputable (showSDocUnsafe)
+import ErrUtils
 import Text.Read
 import Data.Char
 
@@ -189,7 +191,7 @@
 
 -- Pipe
 
-parseModuleWithArgs :: [String] -> FilePath -> IO (Either (SrcSpan, String) (Anns, GHC.ParsedSource))
+parseModuleWithArgs :: [String] -> FilePath -> IO (Either ErrorMessages (Anns, GHC.ParsedSource))
 parseModuleWithArgs ghcArgs fp = EP.ghcWrapper $ do
   dflags1 <- EP.initDynFlags fp
   (dflags2, _, _) <- GHC.parseDynamicFlagsCmdLine dflags1 (map GHC.noLoc ghcArgs)
@@ -202,7 +204,7 @@
   let verb = optionsVerbosity
   let ghcArgs = map ("-X" ++) optionsLanguage
   when (verb == Loud) (traceM "Parsing module")
-  (as, m) <- either (error . show) (uncurry applyFixities)
+  (as, m) <- either (error . show . map showSDocUnsafe . pprErrMsgBagWithLoc) (uncurry applyFixities)
               <$> parseModuleWithArgs ghcArgs file
   when optionsDebug (putStrLn (showAnnData as 0 m))
   rawhints <- getHints optionsRefactFile
--- a/src/Refact/Utils.hs	2001-09-09 03:46:40.000000000 +0200
+++ b/src/Refact/Utils.hs	2020-03-01 13:34:18.989651923 +0100
@@ -30,15 +30,15 @@
 import Language.Haskell.GHC.ExactPrint.Types
 
 import Data.Data
-import HsExpr as GHC hiding (Stmt)
+import GHC.Hs.Expr as GHC hiding (Stmt)
 import SrcLoc
 import qualified SrcLoc as GHC
 import qualified RdrName as GHC
-import qualified HsExtension as GHC
+import qualified GHC.Hs.Extension as GHC
 import qualified ApiAnnotation as GHC
 import qualified FastString    as GHC
 import qualified GHC hiding (parseModule)
-import HsImpExp
+import GHC.Hs.ImpExp
 import Control.Monad.State
 
 import qualified Data.Map as Map
