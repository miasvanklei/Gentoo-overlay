--- script/bootstrap.py
+++ script/bootstrap.py
@@ -26,6 +26,23 @@ def main():
   os.chdir(SOURCE_ROOT)
 
   args = parse_args()
+  if (args.libcc_source_path != None and
+      args.libcc_shared_library_path != None and
+      args.libcc_static_library_path != None):
+    if (not os.path.isdir(args.libcc_source_path)):
+      print "Error: Directory does not exist:", args.libcc_source_path
+      sys.exit(0)
+    elif (not os.path.isdir(args.libcc_shared_library_path)):
+      print "Error: Directory does not exist:", args.libcc_shared_library_path
+      sys.exit(0)
+    elif (not os.path.isdir(args.libcc_static_library_path)):
+      print "Error: Directory does not exist:", args.libcc_static_library_path
+      sys.exit(0)
+  elif (args.libcc_source_path != None or
+        args.libcc_shared_library_path != None or
+        args.libcc_static_library_path != None):
+    print "Error: All options of libchromiumcontent are required OR let electron choose it"
+    sys.exit(0)
   if not args.yes and PLATFORM != 'win32':
     check_root()
   if args.verbose:
@@ -39,7 +56,10 @@ def main():
   update_submodules()
   setup_python_libs()
   update_node_modules('.')
-  bootstrap_brightray(args.dev, args.url, args.target_arch)
+  bootstrap_brightray(args.dev, args.url, args.target_arch,
+                      args.libcc_source_path,
+                      args.libcc_shared_library_path,
+                      args.libcc_static_library_path)
 
   if args.target_arch in ['arm', 'ia32'] and PLATFORM == 'linux':
     download_sysroot(args.target_arch)
@@ -69,6 +89,12 @@ def parse_args():
                            'prompts.')
   parser.add_argument('--target_arch', default=get_target_arch(),
                       help='Manually specify the arch to build for')
+  parser.add_argument('--libcc_source_path', required=False,
+                        help='The source path of libchromiumcontent. NOTE: All options of libchromiumcontent are required OR let electron choose it')
+  parser.add_argument('--libcc_shared_library_path', required=False,
+                        help='The shared library path of libchromiumcontent. NOTE: All options of libchromiumcontent are required OR let electron choose it')
+  parser.add_argument('--libcc_static_library_path', required=False,
+                        help='The static library path of libchromiumcontent. NOTE: All options of libchromiumcontent are required OR let electron choose it')
   return parser.parse_args()
 
 
@@ -91,15 +117,23 @@ def setup_python_libs():
       execute_stdout([sys.executable, 'setup.py', 'build'])
 
 
-def bootstrap_brightray(is_dev, url, target_arch):
+def bootstrap_brightray(is_dev, url, target_arch, libcc_source_path,
+                        libcc_shared_library_path,
+                        libcc_static_library_path):
   bootstrap = os.path.join(VENDOR_DIR, 'brightray', 'script', 'bootstrap')
   args = [
     '--commit', LIBCHROMIUMCONTENT_COMMIT,
     '--target_arch', target_arch,
-    url,
+    url
   ]
   if is_dev:
     args = ['--dev'] + args
+  if (libcc_source_path != None and
+      libcc_shared_library_path != None and
+      libcc_static_library_path != None):
+    args = args + ['--libcc_source_path', libcc_source_path,
+                  '--libcc_shared_library_path', libcc_shared_library_path,
+                  '--libcc_static_library_path', libcc_static_library_path]
   execute_stdout([sys.executable, bootstrap] + args)
 
 
--- vendor/brightray/brightray.gypi
+++ vendor/brightray/brightray.gypi
@@ -3,16 +3,15 @@
     'vendor/download/libchromiumcontent/filenames.gypi',
   ],
   'variables': {
-    'libchromiumcontent_src_dir': '<(libchromiumcontent_root_dir)/src',
     'libchromiumcontent_component%': 1,
     'conditions': [
       # The "libchromiumcontent_component" is defined when calling "gyp".
       ['libchromiumcontent_component', {
-        'libchromiumcontent_dir%': '<(libchromiumcontent_root_dir)/shared_library',
+        'libchromiumcontent_dir%': '<(libchromiumcontent_shared_libraries_dir)',
         'libchromiumcontent_libraries%': '<(libchromiumcontent_shared_libraries)',
         'libchromiumcontent_v8_libraries%': '<(libchromiumcontent_shared_v8_libraries)',
       }, {
-        'libchromiumcontent_dir%': '<(libchromiumcontent_root_dir)/static_library',
+        'libchromiumcontent_dir%': '<(libchromiumcontent_static_libraries_dir)',
         'libchromiumcontent_libraries%': '<(libchromiumcontent_static_libraries)',
         'libchromiumcontent_v8_libraries%': '<(libchromiumcontent_static_v8_libraries)',
       }],
--- vendor/brightray/script/bootstrap
+++ vendor/brightray/script/bootstrap
@@ -14,9 +14,28 @@ DOWNLOAD_DIR = os.path.join(VENDOR_DIR, 'download')
 
 def main():
   args = parse_args()
-
+  if (args.libcc_source_path != None and
+      args.libcc_shared_library_path != None and
+      args.libcc_static_library_path != None):
+    if (not os.path.isdir(args.libcc_source_path)):
+      print "Error: Directory does not exist:", args.libcc_source_path
+      sys.exit(0)
+    elif (not os.path.isdir(args.libcc_shared_library_path)):
+      print "Error: Directory does not exist:", args.libcc_shared_library_path
+      sys.exit(0)
+    elif (not os.path.isdir(args.libcc_static_library_path)):
+      print "Error: Directory does not exist:", args.libcc_static_library_path
+      sys.exit(0)
+  elif (args.libcc_source_path != None or
+        args.libcc_shared_library_path != None or
+        args.libcc_static_library_path != None):
+    print "Error: All options of libchromiumcontent are required OR let brightray choose it"
+    sys.exit(0)
   update_submodules()
-  download_libchromiumcontent(args.dev, args.commit, args.target_arch, args.url)
+  setup_libchromiumcontent(args.dev, args.commit, args.target_arch, args.url,
+                           args.libcc_source_path,
+                           args.libcc_shared_library_path,
+                           args.libcc_static_library_path)
 
 
 def parse_args():
@@ -30,6 +49,12 @@ def parse_args():
   parser.add_argument('url', help='The base URL from which to download '
                       'libchromiumcontent (i.e., the URL you passed to '
                       'libchromiumcontent\'s script/upload script')
+  parser.add_argument('--libcc_source_path', required=False,
+                        help='The source path of libchromiumcontent. NOTE: All options of libchromiumcontent are required OR let brightray choose it')
+  parser.add_argument('--libcc_shared_library_path', required=False,
+                        help='The shared library path of libchromiumcontent. NOTE: All options of libchromiumcontent are required OR let brightray choose it')
+  parser.add_argument('--libcc_static_library_path', required=False,
+                        help='The static library path of libchromiumcontent. NOTE: All options of libchromiumcontent are required OR let brightray choose it')
   return parser.parse_args()
 
 
@@ -39,17 +64,27 @@ def update_submodules():
                            '--recursive']))
 
 
-def download_libchromiumcontent(is_dev, commit, target_arch, url):
-  mkdir_p(DOWNLOAD_DIR)
-  download = os.path.join(VENDOR_DIR, 'libchromiumcontent', 'script',
-                          'download')
-  target_dir = os.path.join(DOWNLOAD_DIR, 'libchromiumcontent')
-  args = ['-f', '-c', commit, '--target_arch', target_arch, url, target_dir]
-  if is_dev:
-    subprocess.check_call([sys.executable, download] + args)
-  else:
-    subprocess.check_call([sys.executable, download, '-s'] + args)
-
+def setup_libchromiumcontent(is_dev, commit, target_arch, url,
+                             libcc_source_path,
+                             libcc_shared_library_path,
+                             libcc_static_library_path):
+    target_dir = os.path.join(DOWNLOAD_DIR, 'libchromiumcontent')
+    download = os.path.join(VENDOR_DIR, 'libchromiumcontent', 'script',
+                            'download')
+    args = ['-f', '-c', commit, '--target_arch', target_arch, url, target_dir]
+    if (libcc_source_path != None and
+        libcc_shared_library_path != None and
+        libcc_static_library_path != None):
+      args += ['--libcc_source_path', libcc_source_path,
+                '--libcc_shared_library_path', libcc_shared_library_path,
+                '--libcc_static_library_path', libcc_static_library_path]
+      mkdir_p(target_dir)
+    else:
+      mkdir_p(DOWNLOAD_DIR)
+    if is_dev:
+        subprocess.check_call([sys.executable, download] + args)
+    else:
+        subprocess.check_call([sys.executable, download, '-s'] + args)
 
 def mkdir_p(path):
   try:
--- vendor/brightray/vendor/libchromiumcontent/script/download
+++ vendor/brightray/vendor/libchromiumcontent/script/download
@@ -32,23 +32,48 @@ class ProgramError(Exception):
 def main():
   try:
     args = parse_args()
-    if args.commit == 'HEAD':
-      commit = head_commit()
+    if (args.libcc_source_path != None and
+        args.libcc_shared_library_path != None and
+        args.libcc_static_library_path != None):
+      if (not os.path.isdir(args.libcc_source_path)):
+        print "Error: Directory does not exist:", args.libcc_source_path
+        sys.exit(0)
+      elif (not os.path.isdir(args.libcc_shared_library_path)):
+        print "Error: Directory does not exist:", args.libcc_shared_library_path
+        sys.exit(0)
+      elif (not os.path.isdir(args.libcc_static_library_path)):
+        print "Error: Directory does not exist:", args.libcc_static_library_path
+        sys.exit(0)
+      generate_filenames_gypi(os.path.join(args.path, 'filenames.gypi'),
+                              args.libcc_source_path,
+                              args.libcc_shared_library_path,
+                              args.libcc_static_library_path)
+    elif (args.libcc_source_path != None or
+          args.libcc_shared_library_path != None or
+          args.libcc_static_library_path != None):
+      print "Error: All options of libchromiumcontent are required OR let libchromiumcontent choose it"
+      sys.exit(0)
     else:
-      commit = args.commit
-    if os.environ.has_key('MAS_BUILD'):
-      platform = 'mas'
-    else:
-      platform = PLATFORM_KEY
-    base_url = '{0}/{1}/{2}'.format(args.url, platform, args.target_arch)
-    download_if_needed(args.path, base_url, commit, SHARED_LIBRARY_FILENAME,
-                       args.force)
-    if (args.static and
-        not os.path.exists(os.path.join(args.path, 'static_library'))):
-      download(args.path, base_url, commit, STATIC_LIBRARY_FILENAME)
-    with open(os.path.join(args.path, '.target_arch'), 'w') as f:
-      f.write(args.target_arch)
-    generate_filenames_gypi(args.path)
+        if args.commit == 'HEAD':
+          commit = head_commit()
+        else:
+          commit = args.commit
+        if os.environ.has_key('MAS_BUILD'):
+          platform = 'mas'
+        else:
+          platform = PLATFORM_KEY
+        base_url = '{0}/{1}/{2}'.format(args.url, platform, args.target_arch)
+        download_if_needed(args.path, base_url, commit, SHARED_LIBRARY_FILENAME,
+                           args.force)
+        if (args.static and
+            not os.path.exists(os.path.join(args.path, 'static_library'))):
+          download(args.path, base_url, commit, STATIC_LIBRARY_FILENAME)
+        with open(os.path.join(args.path, '.target_arch'), 'w') as f:
+          f.write(args.target_arch)
+        generate_filenames_gypi(os.path.join(args.path, 'filenames.gypi'),
+                                os.path.join(args.path, 'src'),
+                                os.path.join(args.path, 'shared_library'),
+                                os.path.join(args.path, 'static_library'))
   except ProgramError as e:
     return e.message
 
@@ -67,6 +92,12 @@ def parse_args():
   parser.add_argument('url', help='The base URL from which to download '
                       '(i.e., the URL you passed to script/upload)')
   parser.add_argument('path', help='The path to extract to')
+  parser.add_argument('--libcc_source_path', required=False,
+                        help='The source path of libchromiumcontent. NOTE: All options of libchromiumcontent are required OR let libchromiumcontent choose it')
+  parser.add_argument('--libcc_shared_library_path', required=False,
+                        help='The shared library path of libchromiumcontent. NOTE: All options of libchromiumcontent are required OR let libchromiumcontent choose it')
+  parser.add_argument('--libcc_static_library_path', required=False,
+                        help='The static library path of libchromiumcontent. NOTE: All options of libchromiumcontent are required OR let libchromiumcontent choose it')
   return parser.parse_args()
 
 
@@ -135,13 +166,13 @@ def download_and_extract(destination, url):
       z.extractall(destination)
 
 
-def generate_filenames_gypi(destination):
+def generate_filenames_gypi(target_file, libcc_source_path,
+                            libcc_shared_library_path,
+                            libcc_static_library_path):
   generate = os.path.join(SOURCE_ROOT, 'tools', 'generate_filenames_gypi.py')
-  subprocess.check_call([sys.executable, generate,
-                         os.path.join(destination, 'filenames.gypi'),
-                         os.path.join(destination, 'shared_library'),
-                         os.path.join(destination, 'static_library')])
-
+  subprocess.check_call([sys.executable, generate] + [target_file,
+                         libcc_source_path, libcc_shared_library_path,
+                         libcc_static_library_path])
 
 def rm_rf(path):
   try:
diff --git a/tools/generate_filenames_gypi.py b/tools/generate_filenames_gypi.py
index cf0365b..69dbdec 100755
--- vendor/brightray/vendor/libchromiumcontent/tools/generate_filenames_gypi.py
+++ vendor/brightray/vendor/libchromiumcontent/tools/generate_filenames_gypi.py
@@ -52,7 +52,9 @@
 GYPI_TEMPLATE = """\
 {
   'variables': {
-    'libchromiumcontent_root_dir': %(src)s,
+    'libchromiumcontent_src_dir': %(src)s,
+    'libchromiumcontent_shared_libraries_dir': %(shared_libraries_dir)s,
+    'libchromiumcontent_static_libraries_dir': %(static_libraries_dir)s,
     'libchromiumcontent_shared_libraries': %(shared_libraries)s,
     'libchromiumcontent_shared_v8_libraries': %(shared_v8_libraries)s,
     'libchromiumcontent_static_libraries': %(static_libraries)s,
@@ -62,13 +64,15 @@
 """
 
 
-def main(target_file, shared_src, static_src):
+def main(target_file, code_dir, shared_dir, static_dir):
   (shared_libraries, shared_v8_libraries) = searh_files(
-      shared_src, SHARED_LIBRARY_SUFFIX, EXCLUDE_SHARED_LIBRARIES)
+      shared_dir, SHARED_LIBRARY_SUFFIX, EXCLUDE_SHARED_LIBRARIES)
   (static_libraries, static_v8_libraries) = searh_files(
-      static_src, STATIC_LIBRARY_SUFFIX, EXCLUDE_STATIC_LIBRARIES)
+      static_dir, STATIC_LIBRARY_SUFFIX, EXCLUDE_STATIC_LIBRARIES)
   content = GYPI_TEMPLATE % {
-    'src': repr(os.path.abspath(os.path.dirname(target_file))),
+    'src': repr(os.path.abspath(code_dir)),
+    'shared_libraries_dir': repr(os.path.abspath(shared_dir)),
+    'static_libraries_dir': repr(os.path.abspath(static_dir)),
     'shared_libraries': shared_libraries,
     'shared_v8_libraries': shared_v8_libraries,
     'static_libraries': static_libraries,
@@ -77,7 +81,6 @@ def main(target_file, shared_src, static_src):
   with open(target_file, 'wb+') as f:
     f.write(content)
 
-
 def searh_files(src, suffix, exclude):
   files = glob.glob(os.path.join(src, '*.' + suffix))
   files = [f for f in files if os.path.basename(f) not in exclude]
@@ -91,4 +94,4 @@ def is_v8_library(p):
 
 
 if __name__ == '__main__':
-  sys.exit(main(sys.argv[1], sys.argv[2], sys.argv[3]))
+  sys.exit(main(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4]))
