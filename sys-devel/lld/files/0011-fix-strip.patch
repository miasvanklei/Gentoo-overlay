--- a/ELF/MarkLive.cpp	2016-07-18 18:05:09.000000000 +0200
+++ b/ELF/MarkLive.cpp	2016-10-21 00:45:56.806658428 +0200
@@ -51,7 +51,7 @@
 template <class ELFT>
 static typename ELFT::uint getAddend(InputSectionBase<ELFT> &Sec,
                                      const typename ELFT::Rel &Rel) {
-  return Target->getImplicitAddend(Sec.getSectionData().begin(),
+  return Target->getImplicitAddend(Sec.getSectionData().begin() + Rel.r_offset,
                                    Rel.getType(Config->Mips64EL));
 }
 
@@ -120,6 +120,8 @@
   case SHT_PREINIT_ARRAY:
     return true;
   default:
+    if (!(Sec->getSectionHdr()->sh_flags & SHF_ALLOC))
+      return true;
     StringRef S = Sec->getSectionName();
 
     // We do not want to reclaim sections if they can be referred
@@ -140,7 +142,7 @@
   SmallVector<InputSection<ELFT> *, 256> Q;
 
   auto Enqueue = [&](ResolvedReloc<ELFT> R) {
-    if (!R.Sec)
+    if (!R.Sec || R.Sec == &InputSection<ELFT>::Discarded)
       return;
 
     // Usually, a whole section is marked as live or dead, but in mergeable
@@ -153,7 +155,8 @@
       return;
     R.Sec->Live = true;
     if (InputSection<ELFT> *S = dyn_cast<InputSection<ELFT>>(R.Sec))
-      Q.push_back(S);
+      if (S->getSectionHdr()->sh_flags & SHF_ALLOC)
+        Q.push_back(S);
   };
 
   auto MarkSymbol = [&](const SymbolBody *Sym) {
@@ -180,7 +183,8 @@
   for (const std::unique_ptr<ObjectFile<ELFT>> &F :
        Symtab<ELFT>::X->getObjectFiles())
     for (InputSectionBase<ELFT> *Sec : F->getSections())
-      if (Sec && Sec != &InputSection<ELFT>::Discarded) {
+      if (!Sec || Sec == &InputSection<ELFT>::Discarded) {
+         continue;
         // .eh_frame is always marked as live now, but also it can reference to
         // sections that contain personality. We preserve all non-text sections
         // referred by .eh_frame here.
--- a/ELF/InputSection.cpp	2016-10-21 00:42:39.704674646 +0200
+++ b/ELF/InputSection.cpp	2016-10-21 00:43:09.056672231 +0200
@@ -540,9 +540,16 @@
   else
     this->Pieces = splitNonStrings(Data, EntSize);
 
-  if (Config->GcSections)
-    for (uintX_t Off : LiveOffsets)
-      this->getSectionPiece(Off)->Live = true;
+  if (Config->GcSections) {
+    if (this->getSectionHdr()->sh_flags & SHF_ALLOC) {
+      for (uintX_t Off : LiveOffsets)
+        this->getSectionPiece(Off)->Live = true;
+      return;
+    }
+
+    for (SectionPiece &Piece : this->Pieces)
+      Piece.Live = true;
+  }
 }
 
 template <class ELFT>
