diff --git a/ELF/Symbols.h b/ELF/Symbols.h
index 192433e..aec12e9 100644
--- a/ELF/Symbols.h
+++ b/ELF/Symbols.h
@@ -406,6 +406,9 @@ struct Symbol {
   // Version definition index.
   uint16_t VersionId;
 
+  // If a symbol has been processed.
+  bool VersionScriptProcessed = false;
+
   // Symbol visibility. This is the computed minimum visibility of all
   // observed non-DSO symbols.
   unsigned Visibility : 2;
diff --git a/ELF/SymbolTable.h b/ELF/SymbolTable.h
index 2bf9abc..fc97d8e 100644
--- a/ELF/SymbolTable.h
+++ b/ELF/SymbolTable.h
@@ -102,7 +102,7 @@ private:
   std::vector<SymbolBody *> findAllByVersion(SymbolVersion Ver);
 
   llvm::StringMap<std::vector<SymbolBody *>> &getDemangledSyms();
-  void handleAnonymousVersion();
+  void handleAnonymousVersion(std::vector<SymbolVersion> &symbolversions, size_t Version);
   void assignExactVersion(SymbolVersion Ver, uint16_t VersionId,
                           StringRef VersionName);
   void assignWildcardVersion(SymbolVersion Ver, uint16_t VersionId);
diff --git a/ELF/LinkerScript.cpp b/ELF/LinkerScript.cpp
index a9a5a0b..39c1ad2 100644
--- a/ELF/LinkerScript.cpp
+++ b/ELF/LinkerScript.cpp
@@ -1827,14 +1827,8 @@ void ScriptParser::readAnonymousDeclaration() {
     Config->VersionScriptGlobals = readSymbols();
 
   // Next, read local symbols.
-  if (consume("local:")) {
-    if (consume("*")) {
-      Config->DefaultSymbolVersion = VER_NDX_LOCAL;
-      expect(";");
-    } else {
-      setError("local symbol list for anonymous version is not supported");
-    }
-  }
+  if (consume("local:"))
+    Config->VersionScriptLocals = readSymbols();
   expect("}");
   expect(";");
 }
diff --git a/ELF/SymbolTable.cpp b/ELF/SymbolTable.cpp
index 2d727358..4dbcdfcb 100644
--- a/ELF/SymbolTable.cpp
+++ b/ELF/SymbolTable.cpp
@@ -608,15 +608,22 @@ SymbolTable<ELFT>::findAllByVersion(SymbolVersion Ver) {
 // but just specifies symbols visibilities. We assume that the script was
 // in the form of { global: foo; bar; local *; }. So, local is default.
 // In this function, we make specified symbols global.
-template <class ELFT> void SymbolTable<ELFT>::handleAnonymousVersion() {
-  for (SymbolVersion &Ver : Config->VersionScriptGlobals) {
+template <class ELFT> void SymbolTable<ELFT>::handleAnonymousVersion(
+            std::vector<SymbolVersion> &symbolversions, size_t Version) {
+  for (SymbolVersion &Ver : symbolversions) {
     if (Ver.HasWildcard) {
-      for (SymbolBody *B : findAllByVersion(Ver))
-        B->symbol()->VersionId = VER_NDX_GLOBAL;
+      for (SymbolBody *B : findAllByVersion(Ver)) {
+         if (Version == VER_NDX_GLOBAL)
+           B->symbol()->VersionScriptProcessed = true;
+         else if (!B->symbol()->VersionScriptProcessed)
+           B->symbol()->VersionId = Version;
+      }
       continue;
     }
-    for (SymbolBody *B : findByVersion(Ver))
-      B->symbol()->VersionId = VER_NDX_GLOBAL;
+    for (SymbolBody *B : findByVersion(Ver)) {
+      B->symbol()->VersionId = Version;
+      B->symbol()->VersionScriptProcessed = true;
+    }
   }
 }
 
@@ -679,10 +687,16 @@ template <class ELFT> void SymbolTable<ELFT>::scanVersionScript() {
       Sym->body()->parseSymbolVersion();
 
   // Handle edge cases first.
-  if (!Config->VersionScriptGlobals.empty()) {
-    handleAnonymousVersion();
+  bool gresult = !Config->VersionScriptGlobals.empty();
+  bool lresult = !Config->VersionScriptLocals.empty();
+
+  if (gresult)
+    handleAnonymousVersion(Config->VersionScriptGlobals, VER_NDX_GLOBAL);
+  if (lresult)
+    handleAnonymousVersion(Config->VersionScriptLocals, VER_NDX_LOCAL);
+
+  if (gresult || lresult)
     return;
-  }
 
   if (Config->VersionDefinitions.empty())
     return;
diff --git a/ELF/Symbols.cpp b/ELF/Symbols.cpp
index ba1f2189..919be03d 100644
--- a/ELF/Symbols.cpp
+++ b/ELF/Symbols.cpp
@@ -213,6 +213,7 @@ void SymbolBody::parseSymbolVersion() {
       symbol()->VersionId = Ver.Id;
     else
       symbol()->VersionId = Ver.Id | VERSYM_HIDDEN;
+    symbol()->VersionScriptProcessed = true;
     return;
   }
 
