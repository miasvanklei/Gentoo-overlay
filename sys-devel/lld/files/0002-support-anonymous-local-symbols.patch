diff --git a/ELF/Config.h b/ELF/Config.h
index b828cdb2..1a8a7ae3 100644
--- a/ELF/Config.h
+++ b/ELF/Config.h
@@ -62,6 +62,7 @@ struct VersionDefinition {
   llvm::StringRef Name;
   uint16_t Id;
   std::vector<SymbolVersion> Globals;
+  std::vector<SymbolVersion> Locals;
   size_t NameOff; // Offset in string table.
 };
 
diff --git a/ELF/LinkerScript.cpp b/ELF/LinkerScript.cpp
index ccc10599..e22294ab 100644
--- a/ELF/LinkerScript.cpp
+++ b/ELF/LinkerScript.cpp
@@ -1849,7 +1849,7 @@ void ScriptParser::readAnonymousDeclaration() {
       Config->DefaultSymbolVersion = VER_NDX_LOCAL;
       expect(";");
     } else {
-      setError("local symbol list for anonymous version is not supported");
+      Config->VersionScriptLocals = readSymbols();
     }
   }
   expect("}");
@@ -1872,10 +1872,8 @@ void ScriptParser::readVersionDeclaration(StringRef VerStr) {
     if (consume("*")) {
       Config->DefaultSymbolVersion = VER_NDX_LOCAL;
       expect(";");
-    } else {
-      for (SymbolVersion V : readSymbols())
-        Config->VersionScriptLocals.push_back(V);
-    }
+    } else
+      Config->VersionDefinitions.back().Locals = readSymbols();
   }
   expect("}");
 
diff --git a/ELF/SymbolTable.cpp b/ELF/SymbolTable.cpp
index f08fa622..90cfc0c1 100644
--- a/ELF/SymbolTable.cpp
+++ b/ELF/SymbolTable.cpp
@@ -608,15 +608,22 @@ SymbolTable<ELFT>::findAllByVersion(SymbolVersion Ver) {
 // but just specifies symbols visibilities. We assume that the script was
 // in the form of { global: foo; bar; local *; }. So, local is default.
 // In this function, we make specified symbols global.
-template <class ELFT> void SymbolTable<ELFT>::handleAnonymousVersion() {
-  for (SymbolVersion &Ver : Config->VersionScriptGlobals) {
+template <class ELFT> void SymbolTable<ELFT>::handleAnonymousVersion(
+            std::vector<SymbolVersion> &symbolversions, size_t Version) {
+  for (SymbolVersion &Ver : symbolversions) {
     if (Ver.HasWildcard) {
-      for (SymbolBody *B : findAllByVersion(Ver))
-        B->symbol()->VersionId = VER_NDX_GLOBAL;
+      for (SymbolBody *B : findAllByVersion(Ver)) {
+         if (Version == VER_NDX_GLOBAL)
+           B->symbol()->VersionScriptProcessed = true;
+         else if (!B->symbol()->VersionScriptProcessed)
+           B->symbol()->VersionId = Version;
+      }
       continue;
     }
-    for (SymbolBody *B : findByVersion(Ver))
-      B->symbol()->VersionId = VER_NDX_GLOBAL;
+    for (SymbolBody *B : findByVersion(Ver)) {
+      B->symbol()->VersionId = Version;
+      B->symbol()->VersionScriptProcessed = true;
+    }
   }
 }
 
@@ -673,10 +680,16 @@ template <class ELFT> void SymbolTable<ELFT>::scanVersionScript() {
       Sym->body()->parseSymbolVersion();
 
   // Handle edge cases first.
-  if (!Config->VersionScriptGlobals.empty()) {
-    handleAnonymousVersion();
+  bool gresult = !Config->VersionScriptGlobals.empty();
+  bool lresult = !Config->VersionScriptLocals.empty();
+
+  if (gresult)
+    handleAnonymousVersion(Config->VersionScriptGlobals, VER_NDX_GLOBAL);
+  if (lresult)
+    handleAnonymousVersion(Config->VersionScriptLocals, VER_NDX_LOCAL);
+
+  if (gresult || lresult)
     return;
-  }
 
   if (Config->VersionDefinitions.empty())
     return;
@@ -687,21 +700,23 @@ template <class ELFT> void SymbolTable<ELFT>::scanVersionScript() {
 
   // First, we assign versions to exact matching symbols,
   // i.e. version definitions not containing any glob meta-characters.
-  for (SymbolVersion &Ver : Config->VersionScriptLocals)
-    assignExactVersion(Ver, VER_NDX_LOCAL, "local");
-  for (VersionDefinition &V : Config->VersionDefinitions)
+  for (VersionDefinition &V : Config->VersionDefinitions) {
     for (SymbolVersion &Ver : V.Globals)
       assignExactVersion(Ver, V.Id, V.Name);
+    for (SymbolVersion &Ver : V.Locals)
+      assignExactVersion(Ver, VER_NDX_LOCAL, "local");
+  }
 
   // Next, we assign versions to fuzzy matching symbols,
   // i.e. version definitions containing glob meta-characters.
   // Note that because the last match takes precedence over previous matches,
   // we iterate over the definitions in the reverse order.
-  for (SymbolVersion &Ver : Config->VersionScriptLocals)
-    assignWildcardVersion(Ver, VER_NDX_LOCAL);
-  for (VersionDefinition &V : llvm::reverse(Config->VersionDefinitions))
+  for (VersionDefinition &V : llvm::reverse(Config->VersionDefinitions)) {
     for (SymbolVersion &Ver : V.Globals)
       assignWildcardVersion(Ver, V.Id);
+    for (SymbolVersion &Ver : V.Locals)
+      assignWildcardVersion(Ver, VER_NDX_LOCAL);
+  }
 }
 
 template class elf::SymbolTable<ELF32LE>;
diff --git a/ELF/SymbolTable.h b/ELF/SymbolTable.h
index 1e5a335a..92ea10c7 100644
--- a/ELF/SymbolTable.h
+++ b/ELF/SymbolTable.h
@@ -98,7 +98,7 @@ private:
   std::vector<SymbolBody *> findAllByVersion(SymbolVersion Ver);
 
   llvm::StringMap<std::vector<SymbolBody *>> &getDemangledSyms();
-  void handleAnonymousVersion();
+  void handleAnonymousVersion(std::vector<SymbolVersion> &symbolversions, size_t Version);
   void assignExactVersion(SymbolVersion Ver, uint16_t VersionId,
                           StringRef VersionName);
   void assignWildcardVersion(SymbolVersion Ver, uint16_t VersionId);
diff --git a/ELF/Symbols.cpp b/ELF/Symbols.cpp
index 72bcff4e..e873167e 100644
--- a/ELF/Symbols.cpp
+++ b/ELF/Symbols.cpp
@@ -216,6 +216,7 @@ void SymbolBody::parseSymbolVersion() {
       symbol()->VersionId = Ver.Id;
     else
       symbol()->VersionId = Ver.Id | VERSYM_HIDDEN;
+    symbol()->VersionScriptProcessed = true;
     return;
   }
 
diff --git a/ELF/Symbols.h b/ELF/Symbols.h
index 38889571..e50f398a 100644
--- a/ELF/Symbols.h
+++ b/ELF/Symbols.h
@@ -390,6 +390,9 @@ struct Symbol {
   // Version definition index.
   uint16_t VersionId;
 
+  // If a symbol has been processed.
+  bool VersionScriptProcessed = false;
+
   // Symbol visibility. This is the computed minimum visibility of all
   // observed non-DSO symbols.
   unsigned Visibility : 2;
