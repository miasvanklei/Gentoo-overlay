diff --git a/ELF/LinkerScript.cpp b/ELF/LinkerScript.cpp
index e25175d..f8719f7 100644
--- a/ELF/LinkerScript.cpp
+++ b/ELF/LinkerScript.cpp
@@ -1835,16 +1835,10 @@ void ScriptParser::readSymbols(std::vector<SymbolVersion> &V) {
 }
 
 void ScriptParser::readLocal(StringRef VerStr) {
-  if (consume("*")) {
-    Config->DefaultSymbolVersion = VER_NDX_LOCAL;
-    expect(";");
-    return;
-  }
-
   if (VerStr.empty())
-    setError("locals list for anonymous version is not supported");
-
-  readSymbols(Config->VersionScriptLocals);
+    readSymbols(Config->VersionScriptLocals);
+  else
+    readSymbols(Config->VersionDefinitions.back().Locals);
 }
 
 void ScriptParser::readVersionExtern(std::vector<SymbolVersion> *V) {
diff --git a/ELF/Config.h b/ELF/Config.h
index a46a8a8..5157bbf 100644
--- a/ELF/Config.h
+++ b/ELF/Config.h
@@ -62,6 +62,7 @@ struct VersionDefinition {
   llvm::StringRef Name;
   size_t Id;
   std::vector<SymbolVersion> Globals;
+  std::vector<SymbolVersion> Locals;
   size_t NameOff; // Offset in string table.
 }; 
 
diff --git a/ELF/Symbols.h b/ELF/Symbols.h
index 192433e..aec12e9 100644
--- a/ELF/Symbols.h
+++ b/ELF/Symbols.h
@@ -406,6 +406,9 @@ struct Symbol {
   // Version definition index.
   uint16_t VersionId;
 
+  // If a symbol has been processed.
+  bool VersionScriptProcessed = false;
+
   // Symbol visibility. This is the computed minimum visibility of all
   // observed non-DSO symbols.
   unsigned Visibility : 2;
diff --git a/ELF/SymbolTable.cpp b/ELF/SymbolTable.cpp
index efbcba9..dfc5f09 100644
--- a/ELF/SymbolTable.cpp
+++ b/ELF/SymbolTable.cpp
@@ -648,22 +648,30 @@ SymbolTable<ELFT>::findAllDemangled(const StringMatcher &M) {
 // but just specifies symbols visibilities. We assume that the script was
 // in the form of { global: foo; bar; local *; }. So, local is default.
 // In this function, we make specified symbols global.
-template <class ELFT> void SymbolTable<ELFT>::handleAnonymousVersion() {
+template <class ELFT> void SymbolTable<ELFT>::handleAnonymousVersion(
+            std::vector<SymbolVersion> &symbolversions, size_t Version) {
   std::vector<StringRef> Patterns;
-  for (SymbolVersion &Ver : Config->VersionScriptGlobals) {
+  for (SymbolVersion &Ver : symbolversions) {
     if (hasWildcard(Ver.Name)) {
       Patterns.push_back(Ver.Name);
       continue;
     }
-    if (SymbolBody *B = find(Ver.Name))
-      B->symbol()->VersionId = VER_NDX_GLOBAL;
+    if (SymbolBody *B = find(Ver.Name)) {
+      B->symbol()->VersionId = Version;
+      B->symbol()->VersionScriptProcessed = true;
+    }
   }
+
   if (Patterns.empty())
     return;
   StringMatcher M(Patterns);
   std::vector<SymbolBody *> Syms = findAll(M);
-  for (SymbolBody *B : Syms)
-    B->symbol()->VersionId = VER_NDX_GLOBAL;
+  for (SymbolBody *B : Syms) {
+    if (Version == VER_NDX_GLOBAL)
+      B->symbol()->VersionScriptProcessed = true;
+    else if (!B->symbol()->VersionScriptProcessed)
+      B->symbol()->VersionId = Version;
+  }
 }
 
 template <class ELFT>
@@ -687,10 +695,16 @@ void SymbolTable<ELFT>::assignWildcardVersion(SymbolVersion Ver,
 // member of symbols.
 template <class ELFT> void SymbolTable<ELFT>::scanVersionScript() {
   // Handle edge cases first.
-  if (!Config->VersionScriptGlobals.empty()) {
-    handleAnonymousVersion();
+  bool gresult = !Config->VersionScriptGlobals.empty();
+  bool lresult = !Config->VersionScriptLocals.empty();
+
+  if (lresult)
+    handleAnonymousVersion(Config->VersionScriptGlobals, VER_NDX_GLOBAL);
+  if (gresult)
+    handleAnonymousVersion(Config->VersionScriptLocals, VER_NDX_LOCAL);
+
+  if (gresult || lresult)
     return;
-  }
 
   if (Config->VersionDefinitions.empty())
     return;
@@ -716,21 +729,23 @@ template <class ELFT> void SymbolTable<ELFT>::scanVersionScript() {
 
   // First, we assign versions to exact matching symbols,
   // i.e. version definitions not containing any glob meta-characters.
-  for (SymbolVersion Sym : Config->VersionScriptLocals)
-    assignVersion(Sym, VER_NDX_LOCAL, "local");
-  for (VersionDefinition &V : Config->VersionDefinitions)
+  for (VersionDefinition &V : Config->VersionDefinitions) {
     for (SymbolVersion Sym : V.Globals)
       assignVersion(Sym, V.Id, V.Name);
+    for (SymbolVersion Sym : V.Locals)
+      assignVersion(Sym, VER_NDX_LOCAL, "local");
+  }
 
   // Next, we assign versions to fuzzy matching symbols,
   // i.e. version definitions containing glob meta-characters.
   // Note that because the last match takes precedence over previous matches,
   // we iterate over the definitions in the reverse order.
-  for (SymbolVersion &Ver : Config->VersionScriptLocals)
-    assignWildcardVersion(Ver, VER_NDX_LOCAL);
-  for (size_t I = Config->VersionDefinitions.size() - 1; I != (size_t)-1; --I)
+  for (size_t I = Config->VersionDefinitions.size() - 1; I != (size_t)-1; --I) {
     for (SymbolVersion &Ver : Config->VersionDefinitions[I].Globals)
       assignWildcardVersion(Ver, Config->VersionDefinitions[I].Id);
+    for (SymbolVersion &Ver : Config->VersionDefinitions[I].Locals)
+      assignWildcardVersion(Ver, VER_NDX_LOCAL);
+  }
 }
 
 template class elf::SymbolTable<ELF32LE>;
diff --git a/ELF/SymbolTable.h b/ELF/SymbolTable.h
index d78287c..dc139ba 100644
--- a/ELF/SymbolTable.h
+++ b/ELF/SymbolTable.h
@@ -102,7 +102,7 @@ private:
   std::vector<SymbolBody *> findAllDemangled(const StringMatcher &M);
 
   void initDemangledSyms();
-  void handleAnonymousVersion();
+  void handleAnonymousVersion(std::vector<SymbolVersion> &symbolversions, size_t Version);
   void assignWildcardVersion(SymbolVersion Ver, size_t VersionId);
 
   struct SymIndex {
