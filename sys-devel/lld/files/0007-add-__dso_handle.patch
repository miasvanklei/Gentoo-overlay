From e93125509b81139173d32ec97f87820ae6a5f742 Mon Sep 17 00:00:00 2001
From: Petr Hosek <phosek@chromium.org>
Date: Mon, 5 Jun 2017 20:42:34 +0000
Subject: [PATCH] [ELF] Define __dso_handle symbol if needed

Traditionally, it has been defined in crtbegin.o, which is typically
provided by libgcc or as part of the C library on some systems. However,
but there's no principled reason for it to be there. We optionaly
define this symbol, which can be used on platforms that don't provide
__dso_handle in crtbegin.o or which don't use crtbegin.o at all.

Differential Revision: https://reviews.llvm.org/D33856

git-svn-id: https://llvm.org/svn/llvm-project/lld/trunk@304732 91177308-0d34-0410-b5e6-96231b3b80d8
---
 ELF/Writer.cpp        |  5 +++++
 test/ELF/dso_handle.s | 19 +++++++++++++++++++
 2 files changed, 24 insertions(+)
 create mode 100644 test/ELF/dso_handle.s

diff --git a/ELF/Writer.cpp b/ELF/Writer.cpp
index 4b36d8840..dd95c9ac9 100644
--- a/ELF/Writer.cpp
+++ b/ELF/Writer.cpp
@@ -907,6 +907,11 @@ template <class ELFT> void Writer<ELFT>::addReservedSymbols() {
   if (!InX::DynSymTab)
     Symtab<ELFT>::X->addIgnored("__tls_get_addr");
 
+  // __dso_handle symbol is passed to cxa_finalize as a marker to identify
+  // each DSO. The address of the symbol doesn't matter as long as they are
+  // different in different DSOs, so we chose the start address of the DSO.
+  addOptionalRegular<ELFT>("__dso_handle", Out::ElfHeader, 0, STV_HIDDEN);
+
   // __ehdr_start is the location of ELF file headers. Note that we define
   // this symbol unconditionally even when using a linker script, which
   // differs from the behavior implemented by GNU linker which only define
diff --git a/test/ELF/dso_handle.s b/test/ELF/dso_handle.s
new file mode 100644
index 000000000..99e2594ef
--- /dev/null
+++ b/test/ELF/dso_handle.s
@@ -0,0 +1,19 @@
+# REQUIRES: x86
+
+# RUN: llvm-mc -filetype=obj -triple=x86_64-unknown-linux %s -o %t.o
+# RUN: ld.lld -shared %t.o -o %t
+# RUN: llvm-readobj -symbols %t | FileCheck %s
+# CHECK:    Name: __dso_handle
+# CHECK-NEXT:    Value: 0x0
+# CHECK-NEXT:    Size: 0
+# CHECK-NEXT:    Binding: Local
+# CHECK-NEXT:    Type: None
+# CHECK-NEXT:    Other [
+# CHECK-NEXT:      STV_HIDDEN
+# CHECK-NEXT:    ]
+# CHECK-NEXT:    Section: .dynsym
+
+.text
+.global foo, __dso_handle
+foo:
+  lea __dso_handle(%rip),%rax
