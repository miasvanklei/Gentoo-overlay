--- a/ELF/DriverUtils.cpp	2016-07-16 21:16:15.000000000 +0200
+++ b/ELF/DriverUtils.cpp	2016-10-05 23:14:28.135320326 +0200
@@ -95,6 +95,14 @@
 void elf::printHelp(const char *Argv0) {
   ELFOptTable Table;
   Table.PrintHelp(outs(), Argv0, "lld", false);
+
+  // keep track of supported targets in Driver.cpp
+  std::string Targets = std::string("\nld: supported targets: aarch64elf");
+  Targets += std::string(" aarch64linux armelf_linux_eabi elf32-x86-64");
+  Targets += std::string(" elf32btsmip elf32ltsmip elf32btsmipn32 elf32ltsmipn32");
+  Targets += std::string(" elf32ppc elf64btsmip elf64ltsmip elf64ppc elf_amd64");
+  Targets += std::string(" elf_x86_64 elf_i386 elf_iamcu\n");
+  outs() << Targets;
 }
 
 // Reconstructs command line arguments so that so that you can re-run
--- a/lib/Config/Version.cpp	2016-11-08 21:30:51.463263010 +0100
+++ b/lib/Config/Version.cpp	2016-11-08 21:35:24.520637918 +0100
@@ -39,5 +39,5 @@
 
 // Returns a version string, e.g., "LLD 4.0 (lld/trunk 284614)".
 std::string lld::getLLDVersion() {
-  return "LLD " + std::string(LLD_VERSION_STRING) + getRepository();
+  return "GNU gold " + std::string(LLD_VERSION_STRING) + getRepository();
 }
--- a/ELF/InputFiles.cpp	2016-11-11 19:48:19.308726806 +0100
+++ b/ELF/InputFiles.cpp	2016-11-11 19:53:59.125750362 +0100
@@ -165,14 +165,17 @@
 }
 
 Optional<MemoryBufferRef> elf::readFile(StringRef Path) {
-  if (Config->Verbose)
-    outs() << Path << "\n";
+  StringRef attempt = "attempt to open ";
 
   auto MBOrErr = MemoryBuffer::getFile(Path);
   if (auto EC = MBOrErr.getError()) {
-    error(EC, "cannot open " + Path);
+    error(EC, attempt + Path + " failed");
     return None;
   }
+  else
+    if (Config->Verbose)
+      outs() << attempt << Path << " succeeded\n";
+
   std::unique_ptr<MemoryBuffer> &MB = *MBOrErr;
   MemoryBufferRef MBRef = MB->getMemBufferRef();
   OwningMBs.push_back(std::move(MB)); // take MB ownership
