diff --git a/ELF/Config.h b/ELF/Config.h
index b828cdb2..42501d79 100644
--- a/ELF/Config.h
+++ b/ELF/Config.h
@@ -12,7 +12,6 @@
 
 #include "llvm/ADT/MapVector.h"
 #include "llvm/ADT/StringRef.h"
-#include "llvm/ADT/StringSet.h"
 #include "llvm/Support/ELF.h"
 
 #include <vector>
@@ -34,8 +33,8 @@ enum ELFKind {
 // For --build-id.
 enum class BuildIdKind { None, Fast, Md5, Sha1, Hexstring, Uuid };
 
-// For --discard-{all,locals,none} and --retain-symbols-file.
-enum class DiscardPolicy { Default, All, Locals, RetainFile, None };
+// For --discard-{all,locals,none}.
+enum class DiscardPolicy { Default, All, Locals, None };
 
 // For --strip-{all,debug}.
 enum class StripPolicy { None, All, Debug };
@@ -83,7 +82,6 @@ struct Configuration {
   llvm::StringRef OutputFile;
   llvm::StringRef SoName;
   llvm::StringRef Sysroot;
-  llvm::StringSet<> RetainSymbolsFile;
   std::string RPath;
   std::vector<VersionDefinition> VersionDefinitions;
   std::vector<llvm::StringRef> AuxiliaryList;
diff --git a/ELF/Driver.cpp b/ELF/Driver.cpp
index a11dbc7c..f4b8aa28 100644
--- a/ELF/Driver.cpp
+++ b/ELF/Driver.cpp
@@ -615,15 +615,6 @@ void LinkerDriver::readConfigs(opt::InputArgList &Args) {
     if (Optional<MemoryBufferRef> Buffer = readFile(Arg->getValue()))
       Config->SymbolOrderingFile = getLines(*Buffer);
 
-  // If --retain-symbol-file is used, we'll retail only the symbols listed in
-  // the file and discard all others.
-  if (auto *Arg = Args.getLastArg(OPT_retain_symbols_file)) {
-    Config->Discard = DiscardPolicy::RetainFile;
-    if (Optional<MemoryBufferRef> Buffer = readFile(Arg->getValue()))
-      for (StringRef S : getLines(*Buffer))
-        Config->RetainSymbolsFile.insert(S);
-  }
-
   for (auto *Arg : Args.filtered(OPT_export_dynamic_symbol))
     Config->VersionScriptGlobals.push_back(
         {Arg->getValue(), /*IsExternCpp*/ false, /*HasWildcard*/ false});
diff --git a/ELF/Writer.cpp b/ELF/Writer.cpp
index e056384f..e332e029 100644
--- a/ELF/Writer.cpp
+++ b/ELF/Writer.cpp
@@ -412,12 +412,6 @@ template <class ELFT> static bool includeInSymtab(const SymbolBody &B) {
   if (!B.isLocal() && !B.symbol()->IsUsedInRegularObj)
     return false;
 
-  // If --retain-symbols-file is given, we'll keep only symbols listed in that
-  // file.
-  if (Config->Discard == DiscardPolicy::RetainFile &&
-      !Config->RetainSymbolsFile.count(B.getName()))
-    return false;
-
   if (auto *D = dyn_cast<DefinedRegular<ELFT>>(&B)) {
     // Always include absolute symbols.
     if (!D->Section)
diff --git a/test/ELF/retain-symbols-file.s b/test/ELF/retain-symbols-file.s
deleted file mode 100644
index b146bd79..00000000
--- a/test/ELF/retain-symbols-file.s
+++ /dev/null
@@ -1,44 +0,0 @@
-# REQUIRES: x86
-# RUN: llvm-mc -filetype=obj -triple=x86_64-pc-linux %s -o %t
-# RUN: echo "bar" > %t_retain.txt
-# RUN: echo "foo" >> %t_retain.txt
-# RUN: ld.lld -shared --retain-symbols-file=%t_retain.txt %t -o %t2
-# RUN: llvm-readobj -s -sd -t %t2 | FileCheck %s
-
-## Check separate form.
-# RUN: ld.lld -shared --retain-symbols-file %t_retain.txt %t -o %t2
-# RUN: llvm-readobj -s -sd -t %t2 | FileCheck %s
-
-# CHECK:       Symbols [
-# CHECK-NEXT:   Symbol {
-# CHECK-NEXT:     Name:  (0)
-# CHECK:        Symbol {
-# CHECK-NEXT:     Name: bar
-# CHECK:        Symbol {
-# CHECK-NEXT:     Name: foo
-# CHECK-NOT:    Symbol
-
-.text
-.globl _start
-_start:
-call zed@PLT
-call und@PLT
-
-.globl foo
-.type foo,@function
-foo:
-retq
-
-.globl bar
-.type bar,@function
-bar:
-retq
-
-.globl zed
-.type zed,@function
-zed:
-retq
-
-.type loc,@function
-loc:
-retq
