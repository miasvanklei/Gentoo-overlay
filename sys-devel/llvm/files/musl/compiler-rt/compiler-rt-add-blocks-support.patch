--- projects/compiler-rt/lib/builtins/CMakeLists.txt	2015-01-14 16:55:17.000000000 +0100
+++ projects/compiler-rt/lib/builtins/CMakeLists.txt	2015-04-08 19:40:41.143179536 +0200
@@ -18,7 +18,7 @@
   ashrdi3.c
   ashrti3.c
   # FIXME: atomic.c may only be compiled if host compiler understands _Atomic
-  # atomic.c
+  atomic.c
   clear_cache.c
   clzdi2.c
   clzsi2.c
@@ -134,7 +134,9 @@
   udivti3.c
   umoddi3.c
   umodsi3.c
-  umodti3.c)
+  umodti3.c
+  ../BlocksRuntime/runtime.c
+  ../BlocksRuntime/data.c)
 
 if (HAVE_UNWIND_H)
   set(GENERIC_SOURCES
--- projects/compiler-rt/include/CMakeLists.txt	2014-07-07 19:39:31.000000000 +0200
+++ projects/compiler-rt/include/CMakeLists.txt	2015-04-08 19:40:41.117179700 +0200
@@ -8,6 +8,11 @@
   sanitizer/msan_interface.h
   sanitizer/tsan_interface_atomic.h)
 
+set(BLOCKSRUNTIME_HEADERS
+  ../lib/BlocksRuntime/Block.h
+  ../lib/BlocksRuntime/Block_private.h
+  ../lib/BlocksRuntime/config.h)
+
 set(output_dir ${COMPILER_RT_OUTPUT_DIR}/include)
 
 # Copy compiler-rt headers to the build tree.
@@ -29,3 +34,7 @@
 install(FILES ${SANITIZER_HEADERS}
   PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
   DESTINATION ${COMPILER_RT_INSTALL_PATH}/include/sanitizer)
+
+install(FILES ${BLOCKSRUNTIME_HEADERS}
+  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
+  DESTINATION ${COMPILER_RT_INSTALL_PATH}/include)
--- /dev/null	2015-04-08 17:57:08.408096785 +0200
+++ projects/compiler-rt/lib/BlocksRuntime/config.h	2015-04-08 19:40:14.066352552 +0200
@@ -0,0 +1,64 @@
+#ifndef _CONFIG_H_
+#define _CONFIG_H_
+
+#ifdef __APPLE__
+
+#define HAVE_AVAILABILITY_MACROS_H 1
+#define HAVE_TARGET_CONDITIONALS_H 1
+#define HAVE_OSATOMIC_COMPARE_AND_SWAP_INT 1
+#define HAVE_OSATOMIC_COMPARE_AND_SWAP_LONG 1
+#define HAVE_LIBKERN_OSATOMIC_H
+
+/* Be sneaky and turn OSAtomicCompareAndSwapInt into OSAtomicCompareAndSwap32
+ * and OSAtomicCompareAndSwapLong into either OSAtomicCompareAndSwap32
+ * or OSAtomicCompareAndSwap64 (depending on __LP64__) so that the library
+ * is Tiger compatible!
+ */
+#include <libkern/OSAtomic.h>
+#undef OSAtomicCompareAndSwapInt
+#undef OSAtomicCompareAndSwapLong
+#define OSAtomicCompareAndSwapInt(o,n,v) OSAtomicCompareAndSwap32Compat(o,n,v)
+#ifdef __LP64__
+#define OSAtomicCompareAndSwapLong(o,n,v) OSAtomicCompareAndSwap64Compat(o,n,v)
+#else
+#define OSAtomicCompareAndSwapLong(o,n,v) OSAtomicCompareAndSwap32Compat(o,n,v)
+#endif
+
+static __inline bool OSAtomicCompareAndSwap32Compat(int32_t o, int32_t n, volatile int32_t *v)
+{return OSAtomicCompareAndSwap32(o,n,(int32_t *)v);}
+#ifdef __LP64__
+static __inline bool OSAtomicCompareAndSwap64Compat(int64_t o, int64_t n, volatile int64_t *v)
+{return OSAtomicCompareAndSwap64(o,n,(int64_t *)v);}
+#endif
+
+#else /* !__APPLE__ */
+
+#if defined(__WIN32__) || defined(_WIN32)
+
+/* Poor runtime.c code causes warnings calling InterlockedCompareExchange */
+#define _CRT_SECURE_NO_WARNINGS 1
+#include <windows.h>
+static __inline int InterlockedCompareExchangeCompat(volatile void *v, long n, long o)
+{return (int)InterlockedCompareExchange((LONG *)v, (LONG)n, (LONG)o);}
+#undef InterlockedCompareExchange
+#define InterlockedCompareExchange(v,n,o) InterlockedCompareExchangeCompat(v,n,o)
+
+#elif defined(__GNUC__) /* && !defined(__WIN32__) && !defined(_WIN32) */
+
+#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) /* GCC >= 4.1 */
+
+/* runtime.c ignores these if __WIN32__ or _WIN32 is defined */
+#define HAVE_SYNC_BOOL_COMPARE_AND_SWAP_INT 1
+#define HAVE_SYNC_BOOL_COMPARE_AND_SWAP_LONG 1
+
+#else /* GCC earlier than version 4.1 */
+
+#error GCC version 4.1 (or compatible) or later is required on non-apple, non-w32 targets
+
+#endif /* GCC earlier than version 4.1 */
+
+#endif /* !defined(__GNUC__) && !defined(__WIN32__) && !defined(_WIN32) */
+
+#endif /* !__APPLE__ */
+
+#endif /* _CONFIG_H_ */
