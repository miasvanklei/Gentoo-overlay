--- a/tools/llvm-objcopy/ObjcopyOpts.td	2018-09-11 11:09:40.365265721 +0200
+++ b/tools/llvm-objcopy/ObjcopyOpts.td	2018-09-11 11:11:01.708359204 +0200
@@ -50,6 +50,8 @@
                 HelpText<"Remove non-allocated sections other than .gnu.warning* sections">;
 def strip_all_gnu : Flag<["-", "--"], "strip-all-gnu">,
                     HelpText<"Compaitable with GNU objcopy's --strip-all">;
+def S : Flag<["-"], "S">,
+        Alias<strip_all>;
 def strip_debug : Flag<["-", "--"], "strip-debug">,
                   HelpText<"Remove all debug information">;
 def strip_dwo : Flag<["-", "--"], "strip-dwo">,
--- a/tools/llvm-objcopy/llvm-objcopy.cpp	2018-09-12 11:10:29.060945185 +0200
+++ b/tools/llvm-objcopy/llvm-objcopy.cpp	2018-09-12 11:14:49.709159973 +0200
@@ -536,6 +536,11 @@
 }
 
 static void ExecuteElfObjcopy(const CopyConfig &Config) {
+  // get permissions of input file.
+  auto f_perms = sys::fs::getPermissions(Config.InputFilename);
+  if (auto EC = f_perms.getError())
+    reportError(Config.InputFilename, EC);
+
   Expected<OwningBinary<llvm::object::Binary>> BinaryOrErr =
       createBinary(Config.InputFilename);
   if (!BinaryOrErr)
@@ -546,6 +551,9 @@
 
   FileBuffer FB(Config.OutputFilename);
   ExecuteElfObjcopyOnBinary(Config, *BinaryOrErr.get().getBinary(), FB);
+
+  // set permissions equal to input file
+  sys::fs::setPermissions(Config.OutputFilename, *f_perms);
 }
 
 // ParseObjcopyOptions returns the config and sets the input arguments. If a
--- a/tools/llvm-objcopy/StripOpts.td	2018-09-13 15:09:26.510703842 +0200
+++ b/tools/llvm-objcopy/StripOpts.td	2018-09-13 15:09:47.309682932 +0200
@@ -24,7 +24,7 @@
         Alias<strip_debug>;
 
 def S : Flag<["-"], "S">,
-        Alias<strip_debug>;
+        Alias<strip_all>;
 
 defm remove_section : Eq<"remove-section">,
                       MetaVarName<"section">,
