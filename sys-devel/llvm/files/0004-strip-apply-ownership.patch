--- a/include/llvm/Support/FileSystem.h
+++ b/include/llvm/Support/FileSystem.h
@@ -661,6 +661,15 @@ std::error_code status(file_t FD, file_status &Result);
 ///       umask(2) never fails. It is not thread safe.
 unsigned getUmask();
 
+/// Set file ownership.
+///
+/// @param FD Filedescriptor to set permissions on.
+/// @param User New file user.
+/// @param Group New file group.
+/// @returns errc::success if the permissions were successfully set, otherwise
+///          a platform-specific error_code.
+std::error_code setOwnership(int FD, uint32_t User, uint32_t Group);
+
 /// Set file permissions.
 ///
 /// @param Path File to set permissions on.
--- a/lib/Support/Unix/Path.inc
+++ b/lib/Support/Unix/Path.inc
@@ -702,6 +702,12 @@ unsigned getUmask() {
   return Mask;
 }
 
+std::error_code setOwnership(int FD, uint32_t User, uint32_t Group) {
+  if (::fchown(FD, User, Group))
+    return std::error_code(errno, std::generic_category());
+  return std::error_code();
+}
+
 std::error_code setPermissions(const Twine &Path, perms Permissions) {
   SmallString<128> PathStorage;
   StringRef P = Path.toNullTerminatedStringRef(PathStorage);
--- a/lib/Support/Windows/Path.inc
+++ b/lib/Support/Windows/Path.inc
@@ -742,6 +742,10 @@ unsigned getUmask() {
   return 0;
 }
 
+std::error_code setOwnership(int FD, uint32_t User, uint32_t Group) {
+  // FIXME Not implemented.
+  return std::make_error_code(std::errc::not_supported);
+}
 std::error_code setPermissions(const Twine &Path, perms Permissions) {
   SmallVector<wchar_t, 128> PathUTF16;
   if (std::error_code EC = widenPath(Path, PathUTF16))
--- a/tools/llvm-objcopy/llvm-objcopy.cpp
+++ b/tools/llvm-objcopy/llvm-objcopy.cpp
@@ -226,6 +226,11 @@ static Error restoreStatOnFile(StringRef Filename,
   if (std::error_code EC = sys::fs::status(FD, OStat))
     return createFileError(Filename, EC);
   if (OStat.type() == sys::fs::file_type::regular_file)
+#ifndef _WIN32
+    if (auto EC = sys::fs::setOwnership(
+            FD, Stat.getUser(), Stat.getGroup()))
+      return createFileError(Filename, EC);
+#endif
 #ifdef _WIN32
     if (auto EC = sys::fs::setPermissions(
             Filename, static_cast<sys::fs::perms>(Stat.permissions() &
