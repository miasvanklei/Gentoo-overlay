diff --git a/tools/llvm-objcopy/CMakeLists.txt b/tools/llvm-objcopy/CMakeLists.txt
index 05aa727ab9d..b30a04b2479 100644
--- a/tools/llvm-objcopy/CMakeLists.txt
+++ b/tools/llvm-objcopy/CMakeLists.txt
@@ -10,4 +10,5 @@ add_llvm_tool(llvm-objcopy
 
 if(LLVM_INSTALL_BINUTILS_SYMLINKS)
   add_llvm_tool_symlink(objcopy llvm-objcopy)
+  add_llvm_tool_symlink(strip llvm-objcopy)
 endif()
diff --git a/tools/llvm-objcopy/llvm-objcopy.cpp b/tools/llvm-objcopy/llvm-objcopy.cpp
index 20ce93bb40e..07472a53177 100644
--- a/tools/llvm-objcopy/llvm-objcopy.cpp
+++ b/tools/llvm-objcopy/llvm-objcopy.cpp
@@ -37,6 +37,8 @@
 #include <string>
 #include <system_error>
 #include <utility>
+#include <sys/stat.h>
+#include <unistd.h>
 
 using namespace llvm;
 using namespace object;
@@ -72,8 +76,8 @@
 } // end namespace llvm
 
 static cl::opt<std::string> InputFilename(cl::Positional, cl::desc("<input>"));
-static cl::opt<std::string> OutputFilename(cl::Positional, cl::desc("<output>"),
-                                           cl::init("-"));
+static cl::opt<std::string> OutputFilename(cl::Positional, cl::desc("<output>"));
+
 static cl::opt<std::string>
     OutputFormat("O", cl::desc("Set output format to one of the following:"
                                "\n\tbinary"));
@@ -89,6 +96,10 @@
 static cl::opt<bool>
     StripAllGNU("strip-all-gnu",
                 cl::desc("Removes symbol, relocation, and debug information"));
+static cl::alias StripAllGNUA("S", cl::desc("Alias for strip-all-gnu"),
+                           cl::aliasopt(StripAllGNU));
+static cl::alias StripUnneeded("strip-unneeded", cl::desc("Alias for strip-all-gnu"),
+                           cl::aliasopt(StripAllGNU));
 static cl::list<std::string> Keep("keep", cl::desc("Keep <section>"),
                                   cl::value_desc("section"));
 static cl::list<std::string> OnlyKeep("only-keep",
@@ -98,6 +109,8 @@
                            cl::aliasopt(OnlyKeep));
 static cl::opt<bool> StripDebug("strip-debug",
                                 cl::desc("Removes all debug information"));
+static cl::alias StripDebugA("g", cl::desc("Alias for strip-debug"),
+                           cl::aliasopt(StripDebug));
 static cl::opt<bool> StripSections("strip-sections",
                                    cl::desc("Remove all section headers"));
 static cl::opt<bool>
@@ -307,7 +335,17 @@
   }
 
   Obj->finalize();
-  WriteObjectFile(*Obj, OutputFilename.getValue());
+
+  // get permissions of input file.
+  struct stat ret;
+  stat(InputFilename.c_str(), &ret);
+
+  StringRef Output = OutputFilename.empty() ? InputFilename : OutputFilename;
+  WriteObjectFile(*Obj, Output);
+
+  // set permissions equal to input file
+  chown(Output.str().c_str(), ret.st_uid, ret.st_gid);
+  chmod(Output.str().c_str(), ret.st_mode);
 }
 
 int main(int argc, char **argv) {
@@ -321,6 +359,9 @@
     cl::PrintHelpMessage();
     return 2;
   }
+  if (InputFilename.find(".a") != std::string::npos) {
+    return 0;
+  }
   Expected<OwningBinary<Binary>> BinaryOrErr = createBinary(InputFilename);
   if (!BinaryOrErr)
     reportError(InputFilename, BinaryOrErr.takeError());
