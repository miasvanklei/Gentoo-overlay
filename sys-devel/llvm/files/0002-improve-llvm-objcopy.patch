diff --git a/include/llvm/Support/FileOutputBuffer.h b/include/llvm/Support/FileOutputBuffer.h
index 6aed423a01e..a98fe826985 100644
--- a/include/llvm/Support/FileOutputBuffer.h
+++ b/include/llvm/Support/FileOutputBuffer.h
@@ -40,6 +40,12 @@ public:
   static Expected<std::unique_ptr<FileOutputBuffer>>
   create(StringRef FilePath, size_t Size, unsigned Flags = 0);
 
+  /// Factory method to create an OutputBuffer object which manages a Mode
+  /// buffer of the specified size. When committed, the buffer will be written
+  /// to the file at the specified path.
+  static Expected<std::unique_ptr<FileOutputBuffer>>
+  createWithMode(StringRef FilePath, size_t Size, unsigned Mode);
+
   /// Returns a pointer to the start of the buffer.
   virtual uint8_t *getBufferStart() const = 0;
 
diff --git a/lib/Support/FileOutputBuffer.cpp b/lib/Support/FileOutputBuffer.cpp
index c4ff563e5f4..c9b1dce1b92 100644
--- a/lib/Support/FileOutputBuffer.cpp
+++ b/lib/Support/FileOutputBuffer.cpp
@@ -141,11 +141,7 @@ createOnDiskBuffer(StringRef Path, size_t Size, unsigned Mode) {
 
 // Create an instance of FileOutputBuffer.
 Expected<std::unique_ptr<FileOutputBuffer>>
-FileOutputBuffer::create(StringRef Path, size_t Size, unsigned Flags) {
-  unsigned Mode = fs::all_read | fs::all_write;
-  if (Flags & F_executable)
-    Mode |= fs::all_exe;
-
+FileOutputBuffer::createWithMode(StringRef Path, size_t Size, unsigned Mode) {
   fs::file_status Stat;
   fs::status(Path, Stat);
 
@@ -168,3 +164,12 @@ FileOutputBuffer::create(StringRef Path, size_t Size, unsigned Flags) {
     return createInMemoryBuffer(Path, Size, Mode);
   }
 }
+
+// Create an instance of FileOutputBuffer.
+Expected<std::unique_ptr<FileOutputBuffer>>
+FileOutputBuffer::create(StringRef Path, size_t Size, unsigned Flags) {
+  unsigned Mode = fs::all_read | fs::all_write;
+  if (Flags & F_executable)
+    Mode |= fs::all_exe;
+  return createWithMode(Path, Size, Mode);
+}
diff --git a/tools/llvm-objcopy/CMakeLists.txt b/tools/llvm-objcopy/CMakeLists.txt
index 05aa727ab9d..b30a04b2479 100644
--- a/tools/llvm-objcopy/CMakeLists.txt
+++ b/tools/llvm-objcopy/CMakeLists.txt
@@ -10,4 +10,5 @@ add_llvm_tool(llvm-objcopy
 
 if(LLVM_INSTALL_BINUTILS_SYMLINKS)
   add_llvm_tool_symlink(objcopy llvm-objcopy)
+  add_llvm_tool_symlink(strip llvm-objcopy)
 endif()
diff --git a/tools/llvm-objcopy/Object.cpp b/tools/llvm-objcopy/Object.cpp
index 9e82448187e..17a1c8dad6b 100644
--- a/tools/llvm-objcopy/Object.cpp
+++ b/tools/llvm-objcopy/Object.cpp
@@ -162,6 +162,16 @@ void SymbolTableSection::addSymbol(StringRef Name, uint8_t Bind, uint8_t Type,
   Size += this->EntrySize;
 }
 
+void SymbolTableSection::renameSymbols(std::vector<std::vector<std::string>> rsymbols) {
+  for (const auto &Sym : Symbols) {
+    for (const auto pair : rsymbols) {
+      if (Sym->Name == pair[0]) {
+        Sym->Name = pair[1];
+      }
+    }
+  }
+}
+
 void SymbolTableSection::removeSectionReferences(const SectionBase *Sec) {
   if (SymbolNames == Sec) {
     error("String table " + SymbolNames->Name +
diff --git a/tools/llvm-objcopy/Object.h b/tools/llvm-objcopy/Object.h
index 639f0f29ceb..b5ae3fede97 100644
--- a/tools/llvm-objcopy/Object.h
+++ b/tools/llvm-objcopy/Object.h
@@ -188,7 +188,7 @@ struct Symbol {
   SectionBase *DefinedIn = nullptr;
   SymbolShndxType ShndxType;
   uint32_t Index;
-  StringRef Name;
+  std::string Name;
   uint32_t NameIndex;
   uint64_t Size;
   uint8_t Type;
@@ -213,6 +213,7 @@ public:
   void addSymbolNames();
   const SectionBase *getStrTab() const { return SymbolNames; }
   const Symbol *getSymbolByIndex(uint32_t Index) const;
+  void renameSymbols(std::vector<std::vector<std::string>> symbols);
   void removeSectionReferences(const SectionBase *Sec) override;
   void initialize(SectionTableRef SecTable) override;
   void finalize() override;
@@ -384,7 +385,7 @@ public:
   Object(const object::ELFObjectFile<ELFT> &Obj);
   virtual ~Object() = default;
 
-  const SymbolTableSection *getSymTab() const { return SymbolTable; }
+  SymbolTableSection *getSymTab() const { return SymbolTable; }
   const SectionBase *getSectionHeaderStrTab() const { return SectionNames; }
   void removeSections(std::function<bool(const SectionBase &)> ToRemove);
   void addSection(StringRef SecName, ArrayRef<uint8_t> Data);
diff --git a/tools/llvm-objcopy/llvm-objcopy.cpp b/tools/llvm-objcopy/llvm-objcopy.cpp
index 20ce93bb40e..07472a53177 100644
--- a/tools/llvm-objcopy/llvm-objcopy.cpp
+++ b/tools/llvm-objcopy/llvm-objcopy.cpp
@@ -23,6 +23,7 @@
 #include "llvm/Support/Error.h"
 #include "llvm/Support/ErrorHandling.h"
 #include "llvm/Support/ErrorOr.h"
+#include "llvm/Support/FileSystem.h"
 #include "llvm/Support/FileOutputBuffer.h"
 #include "llvm/Support/ManagedStatic.h"
 #include "llvm/Support/PrettyStackTrace.h"
@@ -31,9 +32,11 @@
 #include <algorithm>
 #include <cassert>
 #include <cstdlib>
+#include <fstream>
 #include <functional>
 #include <iterator>
 #include <memory>
+#include <sstream>
 #include <string>
 #include <system_error>
 #include <utility>
@@ -72,8 +75,11 @@ LLVM_ATTRIBUTE_NORETURN void reportError(StringRef File, Error E) {
 } // end namespace llvm
 
 static cl::opt<std::string> InputFilename(cl::Positional, cl::desc("<input>"));
-static cl::opt<std::string> OutputFilename(cl::Positional, cl::desc("<output>"),
-                                           cl::init("-"));
+static cl::opt<std::string> OutputFilename(cl::Positional, cl::desc("<output>"));
+
+static cl::opt<std::string>
+    RedefineSyms("redefine-syms", cl::desc("rename symbols pair \"old new\" in file"));
+
 static cl::opt<std::string>
     OutputFormat("O", cl::desc("Set output format to one of the following:"
                                "\n\tbinary"));
@@ -89,6 +95,8 @@ static cl::opt<bool> StripAll(
 static cl::opt<bool>
     StripAllGNU("strip-all-gnu",
                 cl::desc("Removes symbol, relocation, and debug information"));
+static cl::alias StripAllGNUA("S", cl::desc("Alias for strip-all-gnu"),
+                           cl::aliasopt(StripAllGNU));
 static cl::list<std::string> Keep("keep", cl::desc("Keep <section>"),
                                   cl::value_desc("section"));
 static cl::list<std::string> OnlyKeep("only-keep",
@@ -98,6 +106,8 @@ static cl::alias OnlyKeepA("j", cl::desc("Alias for only-keep"),
                            cl::aliasopt(OnlyKeep));
 static cl::opt<bool> StripDebug("strip-debug",
                                 cl::desc("Removes all debug information"));
+static cl::alias StripDebugA("g", cl::desc("Alias for strip-debug"),
+                           cl::aliasopt(StripDebug));
 static cl::opt<bool> StripSections("strip-sections",
                                    cl::desc("Remove all section headers"));
 static cl::opt<bool>
@@ -134,10 +144,11 @@ bool OnlyKeepDWOPred(const Object<ELFT> &Obj, const SectionBase &Sec) {
 
 template <class ELFT>
 void WriteObjectFile(const Object<ELFT> &Obj, StringRef File) {
+  sys::fs::file_status Stat;
+  sys::fs::status(InputFilename, Stat);
   std::unique_ptr<FileOutputBuffer> Buffer;
   Expected<std::unique_ptr<FileOutputBuffer>> BufferOrErr =
-      FileOutputBuffer::create(File, Obj.totalSize(),
-                               FileOutputBuffer::F_executable);
+      FileOutputBuffer::createWithMode(File, Obj.totalSize(), Stat.permissions());
   handleAllErrors(BufferOrErr.takeError(), [](const ErrorInfoBase &) {
     error("failed to open " + OutputFilename);
   });
@@ -177,6 +188,21 @@ template <class ELFT> void CopyBinary(const ELFObjectFile<ELFT> &ObjFile) {
   else
     Obj = llvm::make_unique<ELFObject<ELFT>>(ObjFile);
 
+  if (!RedefineSyms.empty()) {
+    std::ifstream file(RedefineSyms.getValue());
+    auto syms = Obj->getSymTab();
+    std::string line;
+    std::vector<std::vector<std::string>> symbols;
+    while (std::getline(file, line)) {
+      std::stringstream ss(line);
+      std::vector<std::string> pair(2, "");
+      std::getline(ss, pair[0], ' ');
+      std::getline(ss, pair[1], ' ');
+      symbols.push_back(pair);
+    }
+    Obj->getSymTab()->renameSymbols(symbols);
+  }
+
   if (!SplitDWO.empty())
     SplitDWOToFile<ELFT>(ObjFile, SplitDWO.getValue());
 
@@ -307,7 +333,9 @@ template <class ELFT> void CopyBinary(const ELFObjectFile<ELFT> &ObjFile) {
   }
 
   Obj->finalize();
-  WriteObjectFile(*Obj, OutputFilename.getValue());
+
+  StringRef Output = OutputFilename.empty() ? InputFilename : OutputFilename;
+  WriteObjectFile(*Obj, Output);
 }
 
 int main(int argc, char **argv) {
