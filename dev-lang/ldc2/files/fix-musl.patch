--- a/runtime/druntime/src/rt/sections_elf_shared.d
+++ b/runtime/druntime/src/rt/sections_elf_shared.d
@@ -646,8 +646,6 @@
             if (dyn.d_tag == DT_STRTAB)
             {
                 version (linux)
-                    strtab = cast(const(char)*)dyn.d_un.d_ptr;
-                else version (FreeBSD)
                     strtab = cast(const(char)*)(info.dlpi_addr + dyn.d_un.d_ptr); // relocate
                 else
                     static assert(0, "unimplemented");
--- a/runtime/phobos/std/socket.d
+++ b/runtime/phobos/std/socket.d
@@ -159,52 +159,11 @@
     {
         char[80] buf;
         const(char)* cs;
-        version (CRuntime_Glibc)
-        {
-            cs = strerror_r(err, buf.ptr, buf.length);
-        }
-        else version (OSX)
-        {
-            auto errs = strerror_r(err, buf.ptr, buf.length);
-            if (errs == 0)
-                cs = buf.ptr;
-            else
-                return "Socket error " ~ to!string(err);
-        }
-        else version (FreeBSD)
-        {
-            auto errs = strerror_r(err, buf.ptr, buf.length);
-            if (errs == 0)
-                cs = buf.ptr;
-            else
-                return "Socket error " ~ to!string(err);
-        }
-        else version (NetBSD)
-        {
-            auto errs = strerror_r(err, buf.ptr, buf.length);
-            if (errs == 0)
-                cs = buf.ptr;
-            else
-                return "Socket error " ~ to!string(err);
-        }
-        else version (Solaris)
-        {
-            auto errs = strerror_r(err, buf.ptr, buf.length);
-            if (errs == 0)
-                cs = buf.ptr;
-            else
-                return "Socket error " ~ to!string(err);
-        }
-        else version (CRuntime_Bionic)
-        {
-            auto errs = strerror_r(err, buf.ptr, buf.length);
-            if (errs == 0)
-                cs = buf.ptr;
-            else
-                return "Socket error " ~ to!string(err);
-        }
+        auto errs = strerror_r(err, buf.ptr, buf.length);
+        if (errs == 0)
+            cs = buf.ptr;
         else
-            static assert(0);
+            return "Socket error " ~ to!string(err);
 
         auto len = strlen(cs);
 
--- a/runtime/druntime/src/core/stdc/string.d
+++ b/runtime/druntime/src/core/stdc/string.d
@@ -76,36 +76,8 @@
 char*  strtok(return char* s1, scope const char* s2);
 ///
 char*  strerror(int errnum);
-version (CRuntime_Glibc)
-{
-    ///
-    const(char)* strerror_r(int errnum, return char* buf, size_t buflen);
-}
-else version (Darwin)
-{
-    int strerror_r(int errnum, scope char* buf, size_t buflen);
-}
-else version (FreeBSD)
-{
-    int strerror_r(int errnum, scope char* buf, size_t buflen);
-}
-else version (NetBSD)
-{
-    int strerror_r(int errnum, char* buf, size_t buflen);
-}
-else version (OpenBSD)
-{
-    int strerror_r(int errnum, scope char* buf, size_t buflen);
-}
-else version (Solaris)
-{
-    int strerror_r(int errnum, scope char* buf, size_t buflen);
-}
-else version (CRuntime_Bionic)
-{
-    ///
-    int strerror_r(int errnum, scope char* buf, size_t buflen);
-}
+///
+int strerror_r(int errnum, scope char* buf, size_t buflen);
 ///
 pure size_t strlen(scope const char* s);
 ///
--- a/runtime/phobos/std/exception.d
+++ b/runtime/phobos/std/exception.d
@@ -1483,13 +1483,7 @@ private bool isUnionAliasedImpl(T)(size_t offset)
 package string errnoString(int errno) nothrow @trusted
 {
     import core.stdc.string : strlen;
-    version (CRuntime_Glibc)
-    {
-        import core.stdc.string : strerror_r;
-        char[1024] buf = void;
-        auto s = strerror_r(errno, buf.ptr, buf.length);
-    }
-    else version (Posix)
+    version (Posix)
     {
         // XSI-compliant
         import core.stdc.string : strerror_r;
