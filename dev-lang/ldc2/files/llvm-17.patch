diff --color -ur b/dmd/expression.h b/dmd/expression.h
--- a/dmd/expression.h	2023-08-26 13:27:47.000000000 +0200
+++ b/dmd/expression.h	2023-09-01 20:36:45.487758184 +0200
@@ -141,7 +141,7 @@
     Expression *ctfeInterpret();
     int isConst();
     virtual bool isIdentical(const Expression *e) const;
-    virtual Optional<bool> toBool();
+    virtual std::optional<bool> toBool();
     virtual bool hasCode()
     {
         return true;
@@ -274,7 +274,7 @@
     real_t toReal() override;
     real_t toImaginary() override;
     complex_t toComplex() override;
-    Optional<bool> toBool() override;
+    std::optional<bool> toBool() override;
     Expression *toLvalue(Scope *sc, Expression *e) override;
     void accept(Visitor *v) override { v->visit(this); }
     dinteger_t getInteger() { return value; }
@@ -306,7 +306,7 @@
     real_t toReal() override;
     real_t toImaginary() override;
     complex_t toComplex() override;
-    Optional<bool> toBool() override;
+    std::optional<bool> toBool() override;
     void accept(Visitor *v) override { v->visit(this); }
 };
 
@@ -324,7 +324,7 @@
     real_t toReal() override;
     real_t toImaginary() override;
     complex_t toComplex() override;
-    Optional<bool> toBool() override;
+    std::optional<bool> toBool() override;
     void accept(Visitor *v) override { v->visit(this); }
 };
 
@@ -363,7 +363,7 @@
     VarDeclaration *var;
 
     ThisExp *syntaxCopy() override;
-    Optional<bool> toBool() override;
+    std::optional<bool> toBool() override;
     bool isLvalue() override final;
     Expression *toLvalue(Scope *sc, Expression *e) override final;
 
@@ -380,7 +380,7 @@
 {
 public:
     bool equals(const RootObject * const o) const override;
-    Optional<bool> toBool() override;
+    std::optional<bool> toBool() override;
     StringExp *toStringExp() override;
     void accept(Visitor *v) override { v->visit(this); }
 };
@@ -403,7 +403,7 @@
     void setCodeUnit(d_size_t i, char32_t c);
     StringExp *toStringExp() override;
     StringExp *toUTF8(Scope *sc);
-    Optional<bool> toBool() override;
+    std::optional<bool> toBool() override;
     bool isLvalue() override;
     Expression *toLvalue(Scope *sc, Expression *e) override;
     Expression *modifiableLvalue(Scope *sc, Expression *e) override;
@@ -461,7 +461,7 @@
     bool equals(const RootObject * const o) const override;
     Expression *getElement(d_size_t i); // use opIndex instead
     Expression *opIndex(d_size_t i);
-    Optional<bool> toBool() override;
+    std::optional<bool> toBool() override;
     StringExp *toStringExp() override;
 
     void accept(Visitor *v) override { v->visit(this); }
@@ -476,7 +476,7 @@
 
     bool equals(const RootObject * const o) const override;
     AssocArrayLiteralExp *syntaxCopy() override;
-    Optional<bool> toBool() override;
+    std::optional<bool> toBool() override;
 
     void accept(Visitor *v) override { v->visit(this); }
 };
@@ -620,7 +620,7 @@
 public:
     dinteger_t offset;
 
-    Optional<bool> toBool() override;
+    std::optional<bool> toBool() override;
 
     void accept(Visitor *v) override { v->visit(this); }
 };
@@ -993,7 +993,7 @@
     bool isLvalue() override;
     Expression *toLvalue(Scope *sc, Expression *e) override;
     Expression *modifiableLvalue(Scope *sc, Expression *e) override;
-    Optional<bool> toBool() override;
+    std::optional<bool> toBool() override;
 
     void accept(Visitor *v) override { v->visit(this); }
 };
@@ -1064,7 +1064,7 @@
     bool isLvalue() override;
     Expression *toLvalue(Scope *sc, Expression *e) override;
     Expression *modifiableLvalue(Scope *sc, Expression *e) override;
-    Optional<bool> toBool() override;
+    std::optional<bool> toBool() override;
     Expression *addDtorHook(Scope *sc) override;
     void accept(Visitor *v) override { v->visit(this); }
 
diff --color -ur b/dmd/frontend.h b/dmd/frontend.h
--- a/dmd/frontend.h	2023-08-26 13:27:47.000000000 +0200
+++ b/dmd/frontend.h	2023-09-01 20:36:45.487758184 +0200
@@ -954,7 +954,7 @@
     T value;
     bool present;
     Optional(T value);
-    static Optional<T > create(T val);
+    static std::optional<T > create(T val);
     bool isPresent() const;
     bool isEmpty() const;
     T get();
@@ -1005,7 +1005,7 @@
     Expression* ctfeInterpret();
     int32_t isConst();
     virtual bool isIdentical(const Expression* const e) const;
-    virtual Optional<bool > toBool();
+    virtual std::optional<bool > toBool();
     virtual bool hasCode();
     IntegerExp* isIntegerExp();
     ErrorExp* isErrorExp();
@@ -7032,7 +7032,7 @@
     _d_real toReal() override;
     _d_real toImaginary() override;
     complex_t toComplex() override;
-    Optional<bool > toBool() override;
+    std::optional<bool > toBool() override;
     Expression* toLvalue(Scope* sc, Expression* e) override;
     void accept(Visitor* v) override;
     dinteger_t getInteger();
@@ -7071,7 +7071,7 @@
     _d_real toReal() override;
     _d_real toImaginary() override;
     complex_t toComplex() override;
-    Optional<bool > toBool() override;
+    std::optional<bool > toBool() override;
     void accept(Visitor* v) override;
 };
 
@@ -7088,7 +7088,7 @@
     _d_real toReal() override;
     _d_real toImaginary() override;
     complex_t toComplex() override;
-    Optional<bool > toBool() override;
+    std::optional<bool > toBool() override;
     void accept(Visitor* v) override;
 };
 
@@ -7124,7 +7124,7 @@
     VarDeclaration* var;
     ThisExp(const Loc& loc, const EXP tok);
     ThisExp* syntaxCopy() override;
-    Optional<bool > toBool() override;
+    std::optional<bool > toBool() override;
     bool isLvalue() final override;
     Expression* toLvalue(Scope* sc, Expression* e) final override;
     void accept(Visitor* v) override;
@@ -7140,7 +7140,7 @@
 {
 public:
     bool equals(const RootObject* const o) const override;
-    Optional<bool > toBool() override;
+    std::optional<bool > toBool() override;
     StringExp* toStringExp() override;
     void accept(Visitor* v) override;
 };
@@ -7172,7 +7172,7 @@
     StringExp* toStringExp() override;
     StringExp* toUTF8(Scope* sc);
     int32_t compare(const StringExp* const se2) const;
-    Optional<bool > toBool() override;
+    std::optional<bool > toBool() override;
     bool isLvalue() override;
     Expression* toLvalue(Scope* sc, Expression* e) override;
     Expression* modifiableLvalue(Scope* sc, Expression* e) override;
@@ -7203,7 +7203,7 @@
     bool equals(const RootObject* const o) const override;
     Expression* getElement(size_t i);
     Expression* opIndex(size_t i);
-    Optional<bool > toBool() override;
+    std::optional<bool > toBool() override;
     StringExp* toStringExp() override;
     void accept(Visitor* v) override;
 };
@@ -7216,7 +7216,7 @@
     Array<Expression* >* values;
     bool equals(const RootObject* const o) const override;
     AssocArrayLiteralExp* syntaxCopy() override;
-    Optional<bool > toBool() override;
+    std::optional<bool > toBool() override;
     void accept(Visitor* v) override;
 };
 
@@ -7324,7 +7324,7 @@
 {
 public:
     dinteger_t offset;
-    Optional<bool > toBool() override;
+    std::optional<bool > toBool() override;
     void accept(Visitor* v) override;
 };
 
@@ -7648,7 +7648,7 @@
     bool isLvalue() override;
     Expression* toLvalue(Scope* sc, Expression* e) override;
     Expression* modifiableLvalue(Scope* sc, Expression* e) override;
-    Optional<bool > toBool() override;
+    std::optional<bool > toBool() override;
     void accept(Visitor* v) override;
 };
 
@@ -7684,7 +7684,7 @@
     bool isLvalue() override;
     Expression* toLvalue(Scope* sc, Expression* e) override;
     Expression* modifiableLvalue(Scope* sc, Expression* e) override;
-    Optional<bool > toBool() override;
+    std::optional<bool > toBool() override;
     Expression* addDtorHook(Scope* sc) override;
     void accept(Visitor* v) override;
     static void allow(Expression* exp);
diff --color -ur b/dmd/globals.h b/dmd/globals.h
--- a/dmd/globals.h	2023-08-26 13:27:47.000000000 +0200
+++ b/dmd/globals.h	2023-09-01 20:36:45.487758184 +0200
@@ -17,7 +17,7 @@
 #include "compiler.h"
 
 #if IN_LLVM
-#include "llvm/ADT/Triple.h"
+#include "llvm/TargetParser/Triple.h"
 
 enum OUTPUTFLAG
 {
diff --color -ur b/dmd/root/optional.h b/dmd/root/optional.h
--- a/dmd/root/optional.h	2023-08-26 13:27:47.000000000 +0200
+++ b/dmd/root/optional.h	2023-09-01 20:36:45.458757763 +0200
@@ -29,7 +29,7 @@
     Optional(T);
 
     /** Creates an `Optional` with the given value **/
-    static Optional<T> create(T);
+    static std::optional<T> create(T);
 
     /** Checks whether this `Optional` contains a value **/
     bool isPresent() const;
diff --color -ur b/driver/archiver.cpp b/driver/archiver.cpp
--- a/driver/archiver.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/driver/archiver.cpp	2023-09-01 20:36:45.496758314 +0200
@@ -14,7 +14,7 @@
 #include "driver/timetrace.h"
 #include "driver/tool.h"
 #include "gen/logger.h"
-#include "llvm/ADT/Triple.h"
+#include "llvm/TargetParser/Triple.h"
 #include "llvm/Object/Archive.h"
 #include "llvm/Object/ArchiveWriter.h"
 #include "llvm/Object/MachO.h"
diff --color -ur b/driver/cl_options-llvm.cpp b/driver/cl_options-llvm.cpp
--- a/driver/cl_options-llvm.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/driver/cl_options-llvm.cpp	2023-09-01 20:36:45.496758314 +0200
@@ -10,7 +10,7 @@
 #include "driver/cl_options-llvm.h"
 
 #if LDC_WITH_LLD
-#include "llvm/ADT/Triple.h"
+#include "llvm/TargetParser/Triple.h"
 #endif
 
 // Pull in command-line options and helper functions from special LLVM header
@@ -31,11 +31,11 @@
   return codegen::getMArch();
 }
 
-Optional<Reloc::Model> getRelocModel() {
+std::optional<Reloc::Model> getRelocModel() {
   return codegen::getExplicitRelocModel();
 }
 
-Optional<CodeModel::Model> getCodeModel() {
+std::optional<CodeModel::Model> getCodeModel() {
   return codegen::getExplicitCodeModel();
 }
 
@@ -45,7 +45,7 @@
 using FPK = llvm::FramePointer::FP;
 #endif
 
-llvm::Optional<FPK> framePointerUsage() {
+std::optional<FPK> framePointerUsage() {
   // Defaults to `FP::None`; no way to check if set explicitly by user except
   // indirectly via setFunctionAttributes()...
   return codegen::getFramePointerUsage();
@@ -93,11 +93,11 @@
   return ::opts::InitTargetOptionsFromCodeGenFlags(llvm::Triple());
 }
 
-Optional<Reloc::Model> getRelocModelFromCMModel() {
+std::optional<Reloc::Model> getRelocModelFromCMModel() {
   return ::opts::getRelocModel();
 }
 
-Optional<CodeModel::Model> getCodeModelFromCMModel() {
+std::optional<CodeModel::Model> getCodeModelFromCMModel() {
   return ::opts::getCodeModel();
 }
 
diff --color -ur b/driver/cl_options-llvm.h b/driver/cl_options-llvm.h
--- a/driver/cl_options-llvm.h	2023-08-26 13:27:47.000000000 +0200
+++ b/driver/cl_options-llvm.h	2023-09-01 20:36:45.496758314 +0200
@@ -9,7 +9,6 @@
 
 #pragma once
 
-#include "llvm/ADT/Optional.h"
 #include "llvm/Support/CommandLine.h"
 #include "llvm/Support/CodeGen.h"
 #include "llvm/Target/TargetOptions.h"
@@ -22,12 +21,12 @@
 namespace opts {
 
 std::string getArchStr();
-llvm::Optional<llvm::Reloc::Model> getRelocModel();
-llvm::Optional<llvm::CodeModel::Model> getCodeModel();
+std::optional<llvm::Reloc::Model> getRelocModel();
+std::optional<llvm::CodeModel::Model> getCodeModel();
 #if LDC_LLVM_VER >= 1300
-llvm::Optional<llvm::FramePointerKind> framePointerUsage();
+std::optional<llvm::FramePointerKind> framePointerUsage();
 #else
-llvm::Optional<llvm::FramePointer::FP> framePointerUsage();
+std::optional<llvm::FramePointer::FP> framePointerUsage();
 #endif
 
 bool disableRedZone();
diff --color -ur b/driver/cl_options_instrumentation.cpp b/driver/cl_options_instrumentation.cpp
--- a/driver/cl_options_instrumentation.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/driver/cl_options_instrumentation.cpp	2023-09-01 20:36:45.496758314 +0200
@@ -18,7 +18,7 @@
 #include "dmd/errors.h"
 #include "dmd/globals.h"
 #include "gen/to_string.h"
-#include "llvm/ADT/Triple.h"
+#include "llvm/TargetParser/Triple.h"
 
 namespace {
 namespace cl = llvm::cl;
diff --color -ur b/driver/linker.cpp b/driver/linker.cpp
--- a/driver/linker.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/driver/linker.cpp	2023-09-01 20:36:45.496758314 +0200
@@ -192,7 +192,7 @@
 
 //////////////////////////////////////////////////////////////////////////////
 
-llvm::Optional<std::vector<std::string>> getExplicitPlatformLibs() {
+std::optional<std::vector<std::string>> getExplicitPlatformLibs() {
   if (platformLib.getNumOccurrences() > 0)
     return parseLibNames(platformLib);
 #if LDC_LLVM_VER < 1600
diff --color -ur b/driver/linker.h b/driver/linker.h
--- a/driver/linker.h	2023-08-26 13:27:47.000000000 +0200
+++ b/driver/linker.h	2023-09-01 20:36:45.496758314 +0200
@@ -43,7 +43,7 @@
  * Returns the -platformlib library names, if specified.
  */
 #if LDC_LLVM_VER < 1600
-llvm::Optional<std::vector<std::string>> getExplicitPlatformLibs();
+std::optional<std::vector<std::string>> getExplicitPlatformLibs();
 #else
 std::optional<std::vector<std::string>> getExplicitPlatformLibs();
 #endif
diff --color -ur b/driver/main.cpp b/driver/main.cpp
--- a/driver/main.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/driver/main.cpp	2023-09-01 20:36:45.496758314 +0200
@@ -593,7 +593,6 @@
   initializeTarget(Registry);
 
 // Initialize passes not included above
-  initializeRewriteSymbolsLegacyPassPass(Registry);
   initializeSjLjEHPreparePass(Registry);
 }
 
diff --color -ur b/driver/targetmachine.cpp b/driver/targetmachine.cpp
--- a/driver/targetmachine.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/driver/targetmachine.cpp	2023-09-01 20:36:45.496758314 +0200
@@ -20,13 +20,12 @@
 #include "gen/logger.h"
 #include "llvm/ADT/StringExtras.h"
 #include "llvm/ADT/StringSwitch.h"
-#include "llvm/ADT/Triple.h"
+#include "llvm/TargetParser/Triple.h"
 #include "llvm/IR/Module.h"
 #include "llvm/MC/MCObjectFileInfo.h"
-#include "llvm/MC/SubtargetFeature.h"
-#include "llvm/Support/Host.h"
+#include "llvm/TargetParser/SubtargetFeature.h"
 #include "llvm/Support/CommandLine.h"
-#include "llvm/Support/TargetParser.h"
+#include "llvm/TargetParser/Host.h"
 #if LDC_LLVM_VER >= 1400
 #include "llvm/MC/TargetRegistry.h"
 #else
@@ -36,8 +35,8 @@
 #include "llvm/Target/TargetMachine.h"
 #include "llvm/Target/TargetOptions.h"
 #if LDC_LLVM_VER >= 1400
-#include "llvm/Support/AArch64TargetParser.h"
-#include "llvm/Support/ARMTargetParser.h"
+#include "llvm/TargetParser/AArch64TargetParser.h"
+#include "llvm/TargetParser/ARMTargetParser.h"
 #endif
 
 #include "gen/optimizer.h"
@@ -383,8 +382,8 @@
                     std::string cpu, const std::string featuresString,
                     const ExplicitBitness::Type bitness,
                     FloatABI::Type &floatABI,
-                    llvm::Optional<llvm::Reloc::Model> relocModel,
-                    llvm::Optional<llvm::CodeModel::Model> codeModel,
+                    std::optional<llvm::Reloc::Model> relocModel,
+                    std::optional<llvm::CodeModel::Model> codeModel,
                     const llvm::CodeGenOpt::Level codeGenOptLevel,
                     const bool noLinkerStripDead) {
   // Determine target triple. If the user didn't explicitly specify one, use
@@ -550,7 +549,6 @@
   // LLVM fork. LLVM 7+ enables regular emutls by default; prevent that.
   if (triple.getEnvironment() == llvm::Triple::Android) {
     targetOptions.EmulatedTLS = false;
-    targetOptions.ExplicitEmulatedTLS = true;
   }
 
   const std::string finalFeaturesString =
diff --color -ur b/driver/targetmachine.h b/driver/targetmachine.h
--- a/driver/targetmachine.h	2023-08-26 13:27:47.000000000 +0200
+++ b/driver/targetmachine.h	2023-09-01 20:36:45.496758314 +0200
@@ -14,7 +14,6 @@
 
 #pragma once
 
-#include "llvm/ADT/Optional.h"
 #include "llvm/ADT/SmallVector.h"
 #include "llvm/ADT/StringRef.h"
 #include "llvm/Support/CodeGen.h"
@@ -57,8 +56,8 @@
 createTargetMachine(std::string targetTriple, std::string arch, std::string cpu,
                     std::string featuresString, ExplicitBitness::Type bitness,
                     FloatABI::Type &floatABI,
-                    llvm::Optional<llvm::Reloc::Model> relocModel,
-                    llvm::Optional<llvm::CodeModel::Model> codeModel,
+                    std::optional<llvm::Reloc::Model> relocModel,
+                    std::optional<llvm::CodeModel::Model> codeModel,
                     llvm::CodeGenOpt::Level codeGenOptLevel,
                     bool noLinkerStripDead);
 
diff --color -ur b/driver/toobj.cpp b/driver/toobj.cpp
--- a/driver/toobj.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/driver/toobj.cpp	2023-09-01 20:36:45.496758314 +0200
@@ -47,11 +47,6 @@
 
 using CodeGenFileType = llvm::CodeGenFileType;
 
-static llvm::cl::opt<bool>
-    NoIntegratedAssembler("no-integrated-as", llvm::cl::ZeroOrMore,
-                          llvm::cl::Hidden,
-                          llvm::cl::desc("Disable integrated assembler"));
-
 namespace {
 
 // The dllimport relocation pass on Windows is *not* an optimization pass.
@@ -287,8 +282,7 @@
   // There is no integrated assembler on AIX because XCOFF is not supported.
   // Starting with LLVM 3.5 the integrated assembler can be used with MinGW.
   return global.params.output_o &&
-         (NoIntegratedAssembler ||
-          global.params.targetTriple->getOS() == llvm::Triple::AIX);
+    (global.params.targetTriple->getOS() == llvm::Triple::AIX);
 }
 
 bool shouldOutputObjectFile() {
diff --color -ur b/gen/abi/nvptx.cpp b/gen/abi/nvptx.cpp
--- a/gen/abi/nvptx.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/gen/abi/nvptx.cpp	2023-09-01 20:36:45.490758227 +0200
@@ -39,7 +39,7 @@
   }
   void rewriteArgument(IrFuncTy &fty, IrFuncTyArg &arg) override {
     Type *ty = arg.type->toBasetype();
-    llvm::Optional<DcomputePointer> ptr;
+    std::optional<DcomputePointer> ptr;
     if (ty->ty == TY::Tstruct &&
         (ptr = toDcomputePointer(static_cast<TypeStruct *>(ty)->sym))) {
       pointerRewite.applyTo(arg);
diff --color -ur b/gen/abi/spirv.cpp b/gen/abi/spirv.cpp
--- a/gen/abi/spirv.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/gen/abi/spirv.cpp	2023-09-01 20:36:45.490758227 +0200
@@ -49,7 +49,7 @@
   }
   void rewriteArgument(IrFuncTy &fty, IrFuncTyArg &arg) override {
     Type *ty = arg.type->toBasetype();
-    llvm::Optional<DcomputePointer> ptr;
+    std::optional<DcomputePointer> ptr;
     if (ty->ty == TY::Tstruct &&
         (ptr = toDcomputePointer(static_cast<TypeStruct *>(ty)->sym))) {
       pointerRewite.applyTo(arg);
diff --color -ur b/gen/dcompute/druntime.cpp b/gen/dcompute/druntime.cpp
--- a/gen/dcompute/druntime.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/gen/dcompute/druntime.cpp	2023-09-01 20:36:45.491758242 +0200
@@ -41,10 +41,10 @@
   return isFromLDC_Mod(sym,Id::opencl);
 }
 
-llvm::Optional<DcomputePointer> toDcomputePointer(StructDeclaration *sd) {
+std::optional<DcomputePointer> toDcomputePointer(StructDeclaration *sd) {
   if (sd->ident != Id::dcPointer || !isFromLDC_DCompute(sd)) {
 #if LDC_LLVM_VER < 1600
-    return llvm::Optional<DcomputePointer>(llvm::None);
+    return std::optional<DcomputePointer>(llvm::None);
 #else
     return std::optional<DcomputePointer>(std::nullopt);
 #endif
@@ -53,5 +53,5 @@
   TemplateInstance *ti = sd->isInstantiated();
   int addrspace = isExpression((*ti->tiargs)[0])->toInteger();
   Type *type = isType((*ti->tiargs)[1]);
-  return llvm::Optional<DcomputePointer>(DcomputePointer(addrspace, type));
+  return std::optional<DcomputePointer>(DcomputePointer(addrspace, type));
 }
diff --color -ur b/gen/dcompute/druntime.h b/gen/dcompute/druntime.h
--- a/gen/dcompute/druntime.h	2023-08-26 13:27:47.000000000 +0200
+++ b/gen/dcompute/druntime.h	2023-09-01 20:36:45.491758242 +0200
@@ -17,7 +17,6 @@
 #include "gen/irstate.h"
 #include "gen/llvm.h"
 #include "gen/tollvm.h"
-#include "llvm/ADT/Optional.h"
 
 class Dsymbol;
 class Type;
@@ -37,4 +36,4 @@
     return llType->getPointerTo(as);
   }
 };
-llvm::Optional<DcomputePointer> toDcomputePointer(StructDeclaration *sd);
+std::optional<DcomputePointer> toDcomputePointer(StructDeclaration *sd);
diff --color -ur b/gen/dcompute/targetOCL.cpp b/gen/dcompute/targetOCL.cpp
--- a/gen/dcompute/targetOCL.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/gen/dcompute/targetOCL.cpp	2023-09-01 20:36:45.491758242 +0200
@@ -174,7 +174,7 @@
   void decodeTypes(std::array<llvm::SmallVector<llvm::Metadata *, 8>,count_KernArgMD>& attrs,
                    VarDeclaration *v)
   {
-    llvm::Optional<DcomputePointer> ptr;
+    std::optional<DcomputePointer> ptr;
     std::string typeQuals;
     std::string baseTyName;
     std::string tyName;
diff --color -ur b/gen/dibuilder.cpp b/gen/dibuilder.cpp
--- a/gen/dibuilder.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/gen/dibuilder.cpp	2023-09-01 20:36:45.492758256 +0200
@@ -379,7 +379,7 @@
 DIType DIBuilder::CreatePointerType(TypePointer *type) {
   // TODO: The addressspace is important for dcompute targets. See e.g.
   // https://www.mail-archive.com/dwarf-discuss@lists.dwarfstd.org/msg00326.html
-  const llvm::Optional<unsigned> DWARFAddressSpace = llvm::None;
+  const std::optional<unsigned> DWARFAddressSpace = {};
 
   const auto name = processDIName(type->toPrettyChars(true));
 
@@ -729,7 +729,7 @@
 }
 
 DISubroutineType DIBuilder::CreateEmptyFunctionType() {
-  auto paramsArray = DBuilder.getOrCreateTypeArray(llvm::None);
+  auto paramsArray = DBuilder.getOrCreateTypeArray({});
   return DBuilder.createSubroutineType(paramsArray);
 }
 
@@ -775,7 +775,7 @@
     // display null as void*
     return DBuilder.createPointerType(
         CreateTypeDescription(Type::tvoid), target.ptrsize * 8, 0,
-        /* DWARFAddressSpace */ llvm::None, "typeof(null)");
+        /* DWARFAddressSpace */ {}, "typeof(null)");
   }
   if (auto te = t->isTypeEnum())
     return CreateEnumType(te);
@@ -798,7 +798,7 @@
     const auto name =
         (tc->sym->toPrettyChars(true) + llvm::StringRef("*")).str();
     return DBuilder.createPointerType(aggregateDIType, target.ptrsize * 8, 0,
-                                      llvm::None, processDIName(name));
+                                      {}, processDIName(name));
   }
   if (auto tf = t->isTypeFunction())
     return CreateFunctionType(tf);
diff --color -ur b/gen/modules.cpp b/gen/modules.cpp
--- a/gen/modules.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/gen/modules.cpp	2023-09-01 20:36:45.492758256 +0200
@@ -48,6 +48,7 @@
 #include "llvm/ProfileData/InstrProfReader.h"
 #include "llvm/Support/CommandLine.h"
 #include "llvm/Support/FileSystem.h"
+#include "llvm/Support/VirtualFileSystem.h"
 #include "llvm/Support/Path.h"
 #include "llvm/Transforms/Utils/ModuleUtils.h"
 
@@ -353,8 +354,9 @@
     IF_LOG Logger::println("Read profile data from %s",
                            global.params.datafileInstrProf);
 
+    auto FS = llvm::vfs::getRealFileSystem();
     auto readerOrErr =
-        llvm::IndexedInstrProfReader::create(global.params.datafileInstrProf);
+        llvm::IndexedInstrProfReader::create(global.params.datafileInstrProf, *FS);
     if (auto E = readerOrErr.takeError()) {
       handleAllErrors(std::move(E), [&](const llvm::ErrorInfoBase &EI) {
         irs->dmodule->error("Could not read profile file '%s': %s",
diff --color -ur b/gen/optimizer.cpp b/gen/optimizer.cpp
--- a/gen/optimizer.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/gen/optimizer.cpp	2023-09-01 20:36:45.492758256 +0200
@@ -20,7 +20,7 @@
 #include "driver/cl_options_sanitizers.h"
 #include "driver/plugins.h"
 #include "driver/targetmachine.h"
-#include "llvm/ADT/Triple.h"
+#include "llvm/TargetParser/Triple.h"
 #include "llvm/Analysis/InlineCost.h"
 #include "llvm/Analysis/TargetLibraryInfo.h"
 #include "llvm/Analysis/TargetTransformInfo.h"
@@ -31,10 +31,10 @@
 #include "llvm/IR/Verifier.h"
 #include "llvm/LinkAllPasses.h"
 #include "llvm/Support/CommandLine.h"
+#include "llvm/Support/VirtualFileSystem.h"
 #include "llvm/Target/TargetMachine.h"
 #include "llvm/Transforms/Instrumentation.h"
 #include "llvm/Transforms/IPO.h"
-#include "llvm/Transforms/IPO/PassManagerBuilder.h"
 #include "llvm/Transforms/Instrumentation/MemorySanitizer.h"
 #include "llvm/Transforms/Instrumentation/ThreadSanitizer.h"
 #include "llvm/Transforms/Instrumentation/AddressSanitizer.h"
@@ -543,17 +543,18 @@
 }
 
 
-static llvm::Optional<PGOOptions> getPGOOptions() {
+static std::optional<PGOOptions> getPGOOptions() {
  //FIXME: Do we have these anywhere?
  bool debugInfoForProfiling=false;
  bool pseudoProbeForProfiling=false;
+ auto FS = llvm::vfs::getRealFileSystem();
  if (opts::isInstrumentingForIRBasedPGO()) {
-    return PGOOptions(global.params.datafileInstrProf, "", "",
+    return PGOOptions(global.params.datafileInstrProf, "", "", "", FS,
                      PGOOptions::PGOAction::IRInstr,
                      PGOOptions::CSPGOAction::NoCSAction,
                      debugInfoForProfiling, pseudoProbeForProfiling);
   } else if (opts::isUsingIRBasedPGOProfile()) {
-    return PGOOptions(global.params.datafileInstrProf, "", "",
+    return PGOOptions(global.params.datafileInstrProf, "", "", "", FS,
                      PGOOptions::PGOAction::IRUse,
                      PGOOptions::CSPGOAction::NoCSAction,
                      debugInfoForProfiling, pseudoProbeForProfiling);
@@ -632,7 +633,7 @@
   StandardInstrumentations si(M->getContext(), debugLogging, /*VerifyEach=*/false, ppo);
 #endif
 
-  si.registerCallbacks(pic, &fam);
+  si.registerCallbacks(pic, &mam);
 
   PassBuilder pb(gTargetMachine, getPipelineTuningOptions(optLevelVal, sizeLevelVal),
                  getPGOOptions(), &pic);
diff --color -ur b/gen/passes/DLLImportRelocation.cpp b/gen/passes/DLLImportRelocation.cpp
--- a/gen/passes/DLLImportRelocation.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/gen/passes/DLLImportRelocation.cpp	2023-09-01 20:36:45.488758198 +0200
@@ -276,7 +276,7 @@
   Impl impl(m);
   bool hasChanged = false;
 
-  for (GlobalVariable &global : m.getGlobalList()) {
+  for (GlobalVariable &global : m.globals()) {
     // TODO: thread-local globals would need to be initialized in a separate TLS
     // ctor
     if (!global.hasInitializer() || global.isThreadLocal())
diff --color -ur b/gen/pgo_ASTbased.cpp b/gen/pgo_ASTbased.cpp
--- a/gen/pgo_ASTbased.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/gen/pgo_ASTbased.cpp	2023-09-01 20:36:45.492758256 +0200
@@ -920,7 +920,7 @@
   auto EC = RecordExpected.takeError();
 
   if (EC) {
-    auto IPE = llvm::InstrProfError::take(std::move(EC));
+    auto IPE = llvm::InstrProfError::take(std::move(EC)).first;
     if (IPE == llvm::instrprof_error::unknown_function) {
       IF_LOG Logger::println("No profile data for function: %s",
                              FuncName.c_str());
diff --color -ur b/gen/tollvm.cpp b/gen/tollvm.cpp
--- a/gen/tollvm.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/gen/tollvm.cpp	2023-09-01 20:36:45.488758198 +0200
@@ -594,7 +594,7 @@
 // deprecation for versions >= LLVM 16 above (8 lines up).
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-      t = t->getPointerElementType();
+      t = t->getNonOpaquePointerElementType();
 #pragma GCC diagnostic pop
     }
     while (indirections-- != 0)
diff --color -ur b/gen/uda.cpp b/gen/uda.cpp
--- a/gen/uda.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/gen/uda.cpp	2023-09-01 20:36:45.492758256 +0200
@@ -211,7 +211,7 @@
     builder.addAllocSizeAttr(llvmSizeIdx, llvmNumIdx);
   } else {
 #if LDC_LLVM_VER < 1600
-    builder.addAllocSizeAttr(llvmSizeIdx, llvm::Optional<unsigned>());
+    builder.addAllocSizeAttr(llvmSizeIdx, std::optional<unsigned>());
 #else
     builder.addAllocSizeAttr(llvmSizeIdx, std::optional<unsigned>());
 #endif
@@ -446,8 +446,6 @@
           .Case("swifttailcc", llvm::CallingConv::SwiftTail)
 #endif
           .Case("x86_intrcc", llvm::CallingConv::X86_INTR)
-          .Case("hhvmcc", llvm::CallingConv::HHVM)
-          .Case("hhvm_ccc", llvm::CallingConv::HHVM_C)
           .Case("cxx_fast_tlscc", llvm::CallingConv::CXX_FAST_TLS)
           .Case("amdgpu_vs", llvm::CallingConv::AMDGPU_VS)
 #if LDC_LLVM_VER >= 1200
diff --color -ur b/ir/irtypestruct.cpp b/ir/irtypestruct.cpp
--- a/ir/irtypestruct.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/ir/irtypestruct.cpp	2023-09-01 20:36:45.455757720 +0200
@@ -71,7 +71,7 @@
 
   // For ldc.dcomptetypes.Pointer!(uint n,T),
   // emit { T addrspace(gIR->dcomputetarget->mapping[n])* }
-  llvm::Optional<DcomputePointer> p;
+  std::optional<DcomputePointer> p;
 
   if (gIR->dcomputetarget && (p = toDcomputePointer(sd))) {
     // Translate the virtual dcompute address space into the real one for
diff --color -ur b/runtime/druntime/src/ldc/intrinsics.di b/runtime/druntime/src/ldc/intrinsics.di
--- a/runtime/druntime/src/ldc/intrinsics.di	2023-08-26 13:27:47.000000000 +0200
+++ b/runtime/druntime/src/ldc/intrinsics.di	2023-09-01 20:36:45.253754790 +0200
@@ -26,6 +26,7 @@
 else version (LDC_LLVM_1400) enum LLVM_version = 1400;
 else version (LDC_LLVM_1500) enum LLVM_version = 1500;
 else version (LDC_LLVM_1600) enum LLVM_version = 1600;
+else version (LDC_LLVM_1700) enum LLVM_version = 1700;
 else static assert(false, "LDC LLVM version not supported");
 
 enum LLVM_atleast(int major) = (LLVM_version >= major * 100);
diff --color -ur b/runtime/jit-rt/cpp-so/bind.h b/runtime/jit-rt/cpp-so/bind.h
--- a/runtime/jit-rt/cpp-so/bind.h	2023-08-26 13:27:47.000000000 +0200
+++ b/runtime/jit-rt/cpp-so/bind.h	2023-09-01 20:36:45.259754877 +0200
@@ -27,7 +27,7 @@
 class Function;
 }
 
-using BindOverride = llvm::Optional<
+using BindOverride = std::optional<
     llvm::function_ref<llvm::Constant *(llvm::Type &, const void *, size_t)>>;
 
 llvm::Function *
diff --color -ur b/runtime/jit-rt/cpp-so/disassembler.cpp b/runtime/jit-rt/cpp-so/disassembler.cpp
--- a/runtime/jit-rt/cpp-so/disassembler.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/runtime/jit-rt/cpp-so/disassembler.cpp	2023-09-01 20:36:45.259754877 +0200
@@ -12,7 +12,7 @@
 #include <algorithm>
 #include <unordered_map>
 
-#include "llvm/ADT/Triple.h"
+#include "llvm/TargetParser/Triple.h"
 #include "llvm/MC/MCAsmBackend.h"
 #include "llvm/MC/MCAsmInfo.h"
 #include "llvm/MC/MCCodeEmitter.h"
diff --color -ur b/runtime/jit-rt/cpp-so/jit_context.cpp b/runtime/jit-rt/cpp-so/jit_context.cpp
--- a/runtime/jit-rt/cpp-so/jit_context.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/runtime/jit-rt/cpp-so/jit_context.cpp	2023-09-01 20:36:45.259754877 +0200
@@ -63,8 +63,8 @@
   assert(target != nullptr);
   std::unique_ptr<llvm::TargetMachine> ret(target->createTargetMachine(
       triple, llvm::sys::getHostCPUName(), llvm::join(getHostAttrs(), ","), {},
-      llvm::Optional<llvm::Reloc::Model>{},
-      llvm::Optional<llvm::CodeModel::Model>{}, llvm::CodeGenOpt::Default,
+      std::optional<llvm::Reloc::Model>{},
+      std::optional<llvm::CodeModel::Model>{}, llvm::CodeGenOpt::Default,
       /*jit*/ true));
   assert(ret != nullptr);
   return ret;
diff --color -ur b/runtime/jit-rt/cpp-so/optimizer.cpp b/runtime/jit-rt/cpp-so/optimizer.cpp
--- a/runtime/jit-rt/cpp-so/optimizer.cpp	2023-08-26 13:27:47.000000000 +0200
+++ b/runtime/jit-rt/cpp-so/optimizer.cpp	2023-09-01 20:36:45.259754877 +0200
@@ -19,7 +19,7 @@
 #include "llvm/IR/Module.h"
 #include "llvm/IR/Verifier.h"
 
-#include "llvm/ADT/Triple.h"
+#include "llvm/TargetParser/Triple.h"
 
 #include "llvm/Analysis/TargetLibraryInfo.h"
 #include "llvm/Analysis/TargetTransformInfo.h"
diff --color -ur b/runtime/jit-rt/cpp-so/valueparser.h b/runtime/jit-rt/cpp-so/valueparser.h
--- a/runtime/jit-rt/cpp-so/valueparser.h	2023-08-26 13:27:47.000000000 +0200
+++ b/runtime/jit-rt/cpp-so/valueparser.h	2023-09-01 20:36:45.259754877 +0200
@@ -24,7 +24,7 @@
 class DataLayout;
 }
 
-using ParseInitializerOverride = llvm::Optional<
+using ParseInitializerOverride = std::optional<
     llvm::function_ref<llvm::Constant *(llvm::Type &, const void *, size_t)>>;
 
 llvm::Constant *parseInitializer(
