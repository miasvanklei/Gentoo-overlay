diff --color -ur a/driver/archiver.cpp b/driver/archiver.cpp
--- a/driver/archiver.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/driver/archiver.cpp	2024-03-06 20:02:33.444484031 +0100
@@ -45,7 +45,7 @@
 StringRef ArchiveName;
 std::vector<const char *> Members;
 
-bool Symtab = true;
+SymtabWritingMode Symtab = SymtabWritingMode::NormalSymtab;
 bool Deterministic = true;
 bool Thin = false;
 
diff --color -ur a/driver/codegenerator.cpp b/driver/codegenerator.cpp
--- a/driver/codegenerator.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/driver/codegenerator.cpp	2024-03-06 20:02:33.444484031 +0100
@@ -114,7 +114,7 @@
     return;
   }
 
-  auto *i8PtrType = llvm::Type::getInt8PtrTy(irs.context());
+  auto *i8PtrType = llvm::PointerType::getUnqual(irs.context());
 
   // Convert all elements to i8* (the expected type for llvm.used)
   for (auto &elem : irs.usedArray) {
diff --color -ur a/driver/targetmachine.cpp b/driver/targetmachine.cpp
--- a/driver/targetmachine.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/driver/targetmachine.cpp	2024-03-06 20:02:33.444484031 +0100
@@ -441,7 +441,7 @@
                     FloatABI::Type &floatABI,
                     llvm::Optional<llvm::Reloc::Model> relocModel,
                     llvm::Optional<llvm::CodeModel::Model> codeModel,
-                    const llvm::CodeGenOpt::Level codeGenOptLevel,
+                    const llvm::CodeGenOptLevel codeGenOptLevel,
                     const bool noLinkerStripDead) {
   // Determine target triple. If the user didn't explicitly specify one, use
   // the one set at LLVM configure time.
diff --color -ur a/driver/targetmachine.h b/driver/targetmachine.h
--- a/driver/targetmachine.h	2024-03-03 14:27:44.000000000 +0100
+++ b/driver/targetmachine.h	2024-03-06 20:02:33.445484042 +0100
@@ -66,7 +66,7 @@
                     FloatABI::Type &floatABI,
                     llvm::Optional<llvm::Reloc::Model> relocModel,
                     llvm::Optional<llvm::CodeModel::Model> codeModel,
-                    llvm::CodeGenOpt::Level codeGenOptLevel,
+                    llvm::CodeGenOptLevel codeGenOptLevel,
                     bool noLinkerStripDead);
 
 /**
diff --color -ur a/driver/toobj.cpp b/driver/toobj.cpp
--- a/driver/toobj.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/driver/toobj.cpp	2024-03-06 20:02:33.444484031 +0100
@@ -127,8 +127,7 @@
           nullptr,  // DWO output file
           // Always generate assembly for ptx as it is an assembly format
           // The PTX backend fails if we pass anything else.
-          (cb == ComputeBackend::NVPTX) ? CGFT_AssemblyFile : fileType,
-          codeGenOptLevel())) {
+          (cb == ComputeBackend::NVPTX) ? CodeGenFileType::AssemblyFile : fileType)) {
     llvm_unreachable("no support for asm output");
   }
 
@@ -292,7 +291,7 @@
 void writeObjectFile(llvm::Module *m, const char *filename) {
   IF_LOG Logger::println("Writing object file to: %s", filename);
   codegenModule(*gTargetMachine, *m, filename,
-                CGFT_ObjectFile);
+                CodeGenFileType::ObjectFile);
 }
 
 bool shouldAssembleExternally() {
@@ -471,10 +470,10 @@
       // to avoid running 'addPassesToEmitFile' passes twice on same module
       auto clonedModule = llvm::CloneModule(*m);
       codegenModule(*gTargetMachine, *clonedModule, spath.c_str(),
-                    CGFT_AssemblyFile);
+                    CodeGenFileType::AssemblyFile);
     } else {
       codegenModule(*gTargetMachine, *m, spath.c_str(),
-                    CGFT_AssemblyFile);
+                    CodeGenFileType::AssemblyFile);
     }
 
     if (assembleExternally) {
diff --color -ur a/gen/arrays.cpp b/gen/arrays.cpp
--- a/gen/arrays.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/gen/arrays.cpp	2024-03-06 20:02:33.393483453 +0100
@@ -555,7 +555,7 @@
     llvm::Constant *val = toConstElem(indexArrayLiteral(ale, i), p);
     // extend i1 to i8
     if (val->getType()->isIntegerTy(1))
-      val = llvm::ConstantExpr::getZExt(val, LLType::getInt8Ty(p->context()));
+      val = llvm::ConstantInt::get(p->context(), val->getUniqueInteger().zext(8));
     if (!elementType) {
       elementType = val->getType();
     } else {
diff --color -ur a/gen/dibuilder.cpp b/gen/dibuilder.cpp
--- a/gen/dibuilder.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/gen/dibuilder.cpp	2024-03-06 20:02:33.390483419 +0100
@@ -624,7 +624,7 @@
     ret = DBuilder.createClassType(
         scope, name, file, lineNum, sizeInBits, alignmentInBits,
         classOffsetInBits, DIFlags::FlagZero, derivedFrom, elemsArray,
-        vtableHolder, templateParams, uniqueIdentifier);
+        0, vtableHolder, templateParams, uniqueIdentifier);
   } else {
     const auto runtimeLang = 0;
     ret = DBuilder.createStructType(scope, name, file, lineNum, sizeInBits,
diff --color -ur a/gen/llvmhelpers.cpp b/gen/llvmhelpers.cpp
--- a/gen/llvmhelpers.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/gen/llvmhelpers.cpp	2024-03-06 20:02:33.391483431 +0100
@@ -1147,7 +1147,7 @@
   // extend i1 to i8
   if (llType->isIntegerTy(1)) {
     llType = LLType::getInt8Ty(gIR->context());
-    val = llvm::ConstantExpr::getZExt(val, llType);
+    val = llvm::ConstantInt::get(gIR->context(), val->getUniqueInteger().zext(8));
   }
 
   if (llType == targetLLType)
@@ -1211,7 +1211,10 @@
            "On initializer integer type mismatch, the target should be wider "
            "than the source.");
 
-    return llvm::ConstantExpr::getZExtOrBitCast(val, target);
+    if(val->getType()->getScalarSizeInBits() == target->getScalarSizeInBits()) {
+      return llvm::ConstantInt::get(target, val->getUniqueInteger());
+    }
+    return llvm::ConstantExpr::getBitCast(val, target);
   }
 
   Logger::println("Unhandled type mismatch, giving up.");
diff --color -ur a/gen/ms-cxx-helper.cpp b/gen/ms-cxx-helper.cpp
--- a/gen/ms-cxx-helper.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/gen/ms-cxx-helper.cpp	2024-03-06 20:02:33.393483453 +0100
@@ -187,14 +187,14 @@
   llvm::Constant *Fields[] = {
       classInfoPtr, // VFPtr
       llvm::ConstantPointerNull::get(
-          LLType::getInt8PtrTy(gIR->context())), // Runtime data
+          llvm::PointerType::getUnqual(gIR->context())), // Runtime data
       llvm::ConstantDataArray::getString(gIR->context(), TypeNameString)};
   llvm::StructType *TypeDescriptorType =
       getTypeDescriptorType(irs, classInfoPtr, TypeNameString);
 
   const LinkageWithCOMDAT lwc = {LLGlobalVariable::LinkOnceODRLinkage, true};
   Var = defineGlobal(cd->loc, gIR->module, TypeDescName,
-                     llvm::ConstantStruct::get(TypeDescriptorType, Fields),
+                     llvm::ConstantStruct::get(TypeDescriptorType, *Fields),
                      lwc.first, /*isConstant=*/true);
   setLinkage(lwc, Var);
 
diff --color -ur a/gen/optimizer.cpp b/gen/optimizer.cpp
--- a/gen/optimizer.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/gen/optimizer.cpp	2024-03-06 20:02:33.394483465 +0100
@@ -147,15 +147,15 @@
 
 bool isOptimizationEnabled() { return optimizeLevel != 0; }
 
-llvm::CodeGenOpt::Level codeGenOptLevel() {
+llvm::CodeGenOptLevel codeGenOptLevel() {
   // Use same appoach as clang (see lib/CodeGen/BackendUtil.cpp)
   if (optLevel() == 0) {
-    return llvm::CodeGenOpt::None;
+    return llvm::CodeGenOptLevel::None;
   }
   if (optLevel() >= 3) {
-    return llvm::CodeGenOpt::Aggressive;
+    return llvm::CodeGenOptLevel::Aggressive;
   }
-  return llvm::CodeGenOpt::Default;
+  return llvm::CodeGenOptLevel::Default;
 }
 
 std::unique_ptr<TargetLibraryInfoImpl> createTLII(llvm::Module &M) {
@@ -505,7 +505,7 @@
     options.NoRedZone = global.params.disableRedZone;
     if (global.params.datafileInstrProf)
       options.InstrProfileOutput = global.params.datafileInstrProf;
-    mpm.addPass(InstrProfiling(options));
+    mpm.addPass(InstrProfilingLoweringPass(options));
   } else if (opts::isUsingASTBasedPGOProfile()) {
     // We are generating code with PGO profile information available.
     // Do indirect call promotion from -O1
@@ -733,7 +733,7 @@
 #if LDC_LLVM_VER >= 1700
   } else if (opts::ltoFatObjects && opts::isUsingLTO()) {
     mpm = pb.buildFatLTODefaultPipeline(level
-#if LDC_LLVM_VER < 1800
+#if LDC_LLVM_VER < 1900
                                         ,
                                         opts::isUsingThinLTO(),
                                         opts::isUsingThinLTO()
diff --color -ur a/gen/optimizer.h b/gen/optimizer.h
--- a/gen/optimizer.h	2024-03-03 14:27:44.000000000 +0100
+++ b/gen/optimizer.h	2024-03-06 20:02:33.390483419 +0100
@@ -39,7 +39,7 @@
 
 bool isOptimizationEnabled();
 
-llvm::CodeGenOpt::Level codeGenOptLevel();
+llvm::CodeGenOptLevel codeGenOptLevel();
 
 void verifyModule(llvm::Module *m);
 
diff --color -ur a/gen/pgo_ASTbased.cpp b/gen/pgo_ASTbased.cpp
--- a/gen/pgo_ASTbased.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/gen/pgo_ASTbased.cpp	2024-03-06 20:02:33.393483453 +0100
@@ -116,7 +116,7 @@
     // Pass through MD5 if enough work has built up.
     if (Count && Count % NumTypesPerWord == 0) {
       using namespace llvm::support;
-      uint64_t Swapped = endian::byte_swap<uint64_t, little>(Working);
+      uint64_t Swapped = endian::byte_swap<uint64_t, llvm::endianness::little>(Working);
       MD5.update(llvm::ArrayRef<uint8_t>((uint8_t *)&Swapped, sizeof(Swapped)));
       Working = 0;
     }
@@ -137,7 +137,7 @@
     // Check for remaining work in Working.
     if (Working) {
       using namespace llvm::support;
-      uint64_t Swapped = endian::byte_swap<uint64_t, little>(Working);
+      uint64_t Swapped = endian::byte_swap<uint64_t, llvm::endianness::little>(Working);
       MD5.update(llvm::ArrayRef<uint8_t>((uint8_t *)&Swapped, sizeof(Swapped)));
     }
 
@@ -903,7 +903,7 @@
   assert(counter_it != (*RegionCounterMap).end() &&
          "Statement not found in PGO counter map!");
   unsigned counter = counter_it->second;
-  auto *I8PtrTy = llvm::Type::getInt8PtrTy(gIR->context());
+  auto *I8PtrTy = llvm::PointerType::getUnqual(gIR->context());
   gIR->ir->CreateCall(GET_INTRINSIC_DECL(instrprof_increment),
                       {llvm::ConstantExpr::getBitCast(FuncNameVar, I8PtrTy),
                        gIR->ir->getInt64(FunctionHash),
@@ -1111,7 +1111,7 @@
     if (ptrCastNeeded)
       value = gIR->ir->CreatePtrToInt(value, gIR->ir->getInt64Ty());
 
-    auto *i8PtrTy = llvm::Type::getInt8PtrTy(gIR->context());
+    auto *i8PtrTy = llvm::PointerType::getUnqual(gIR->context());
     llvm::Value *Args[5] = {
         llvm::ConstantExpr::getBitCast(FuncNameVar, i8PtrTy),
         gIR->ir->getInt64(FunctionHash), value, gIR->ir->getInt32(valueKind),
diff --color -ur a/gen/tocall.cpp b/gen/tocall.cpp
--- a/gen/tocall.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/gen/tocall.cpp	2024-03-06 20:02:33.393483453 +0100
@@ -264,7 +264,7 @@
   case 32:
   case 64:
   case 128:
-    return LLType::getIntNPtrTy(gIR->context(), static_cast<unsigned>(N));
+    return LLType::getIntNTy(gIR->context(), static_cast<unsigned>(N))->getPointerTo(0);
   default:
     return nullptr;
   }
diff --color -ur a/gen/toconstelem.cpp b/gen/toconstelem.cpp
--- a/gen/toconstelem.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/gen/toconstelem.cpp	2024-03-06 20:02:33.394483465 +0100
@@ -575,8 +575,7 @@
             LLConstant *c = toConstElem(elem, p);
             // extend i1 to i8
             if (c->getType()->isIntegerTy(1)) {
-              c = llvm::ConstantExpr::getZExt(c,
-                                              LLType::getInt8Ty(p->context()));
+              c = llvm::ConstantInt::get(p->context(), c->getUniqueInteger().zext(8));
             }
             varInits[e->sd->fields[i]] = c;
           }
diff --color -ur a/gen/trycatchfinally.cpp b/gen/trycatchfinally.cpp
--- a/gen/trycatchfinally.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/gen/trycatchfinally.cpp	2024-03-06 20:02:33.394483465 +0100
@@ -663,7 +663,7 @@
 
 namespace {
   llvm::LandingPadInst *createLandingPadInst(IRState &irs) {
-    LLType *retType = LLStructType::get(LLType::getInt8PtrTy(irs.context()),
+    LLType *retType = LLStructType::get(llvm::PointerType::getUnqual(irs.context()),
                                         LLType::getInt32Ty(irs.context()));
     if (!irs.func()->hasLLVMPersonalityFn()) {
       irs.func()->setLLVMPersonalityFn(
diff --color -ur a/gen/uda.cpp b/gen/uda.cpp
--- a/gen/uda.cpp	2024-03-03 14:27:44.000000000 +0100
+++ b/gen/uda.cpp	2024-03-06 20:02:33.394483465 +0100
@@ -439,7 +439,6 @@
           .Case("intel_ocl_bicc", llvm::CallingConv::Intel_OCL_BI)
           .Case("x86_64_sysvcc", llvm::CallingConv::X86_64_SysV)
           .Case("win64cc", llvm::CallingConv::Win64)
-          .Case("webkit_jscc", llvm::CallingConv::WebKit_JS)
           .Case("anyregcc", llvm::CallingConv::AnyReg)
           .Case("preserve_mostcc", llvm::CallingConv::PreserveMost)
           .Case("preserve_allcc", llvm::CallingConv::PreserveAll)
diff --color -ur a/runtime/druntime/src/ldc/intrinsics.di b/runtime/druntime/src/ldc/intrinsics.di
--- a/runtime/druntime/src/ldc/intrinsics.di	2024-03-03 14:27:44.000000000 +0100
+++ b/runtime/druntime/src/ldc/intrinsics.di	2024-03-06 20:02:33.440483985 +0100
@@ -27,7 +27,7 @@
 else version (LDC_LLVM_1500) enum LLVM_version = 1500;
 else version (LDC_LLVM_1600) enum LLVM_version = 1600;
 else version (LDC_LLVM_1700) enum LLVM_version = 1700;
-else version (LDC_LLVM_1800) enum LLVM_version = 1800;
+else version (LDC_LLVM_1801) enum LLVM_version = 1801;
 else static assert(false, "LDC LLVM version not supported");
 
 enum LLVM_atleast(int major) = (LLVM_version >= major * 100);
