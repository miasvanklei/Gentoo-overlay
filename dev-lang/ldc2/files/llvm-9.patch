diff -ur a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2019-07-13 11:54:30.623162083 +0000
+++ b/CMakeLists.txt	2019-07-13 11:56:35.738171172 +0000
@@ -53,44 +53,6 @@
     add_definitions("-DLDC_LLVM_SUPPORTED_TARGET_${LLVM_SUPPORTED_TARGET}=1")
 endforeach()
 
-# Check and adapt for LLVMSPIRVLib (Khronos SPIRV-LLVM-Translator)
-set(LLVM_SPIRV_FOUND OFF)
-if(MSVC)
-    if(EXISTS "${LLVM_LIBRARY_DIRS}/LLVMSPIRVLib.lib")
-        set(LLVM_SPIRV_FOUND ON)
-        append("LLVMSPIRVLib.lib" LLVM_LDFLAGS)
-    endif()
-else()
-    if((EXISTS "${LLVM_LIBRARY_DIRS}/libLLVMSPIRVLib.a") OR
-       (EXISTS "${LLVM_LIBRARY_DIRS}/libLLVMSPIRVLib.so") OR
-       (EXISTS "${LLVM_LIBRARY_DIRS}/libLLVMSPIRVLib.dylib"))
-        set(LLVM_SPIRV_FOUND ON)
-        append("-lLLVMSPIRVLib" LLVM_LDFLAGS)
-    endif()
-endif()
-if(NOT LLVM_SPIRV_FOUND)
-    find_package(PkgConfig)
-    if(PkgConfig_FOUND)
-        if(MSVC)
-            # make pkg-config use -LC:\path\to\build\LLVMSPIRVLib.lib not -L-lLLVMSPIRVLib
-            set(PKG_CONFIG_EXECUTABLE "${PKG_CONFIG_EXECUTABLE} --msvc-syntax")
-        endif()
-        pkg_check_modules(LLVM_SPIRV LLVMSPIRVLib)
-        if(LLVM_SPIRV_FOUND)
-            set(LLVM_SPIRV_FOUND ON) # translate 1 to ON
-            foreach(flag ${LLVM_SPIRV_LDFLAGS})
-                append("${flag}" LLVM_LDFLAGS)
-            endforeach(flag)
-        else()
-            set(LLVM_SPIRV_FOUND OFF)
-        endif()
-    endif()
-endif()
-if(LLVM_SPIRV_FOUND)
-    message(STATUS "Building with SPIR-V support")
-    add_definitions("-DLDC_LLVM_SUPPORTED_TARGET_SPIRV=1")
-endif()
-
 #
 # Get info about used Linux distribution.
 #
diff -ur a/driver/codegenerator.cpp b/driver/codegenerator.cpp
--- a/driver/codegenerator.cpp	2019-06-20 16:02:16.000000000 +0000
+++ b/driver/codegenerator.cpp	2019-07-13 11:54:18.177161179 +0000
@@ -22,6 +22,7 @@
 #include "gen/logger.h"
 #include "gen/modules.h"
 #include "gen/runtime.h"
+#include "llvm/IR/RemarkStreamer.h"
 #include "llvm/Support/FileSystem.h"
 #include "llvm/Support/Path.h"
 #include "llvm/Support/ToolOutputFile.h"
@@ -60,8 +61,9 @@
       fatal();
     }
 
-    ctx.setDiagnosticsOutputFile(
-        llvm::make_unique<llvm::yaml::Output>(diagnosticsOutputFile->os()));
+    ctx.setRemarkStreamer(llvm::make_unique<llvm::RemarkStreamer>(
+        filename,
+        llvm::make_unique<llvm::remarks::YAMLSerializer>(diagnosticsOutputFile->os())));
 
     // If there is instrumentation data available, also output function hotness
     if (opts::isUsingPGOProfile()) {
diff -ur a/gen/modules.cpp b/gen/modules.cpp
--- a/gen/modules.cpp	2019-06-20 16:02:16.000000000 +0000
+++ b/gen/modules.cpp	2019-07-13 11:54:18.230161183 +0000
@@ -543,12 +543,12 @@
     }
     irs->PGOReader = std::move(readerOrErr.get());
 
-    if (!irs->module.getProfileSummary()) {
+    if (!irs->module.getProfileSummary(false)) {
       // Don't reset the summary. There is only one profile data file per LDC
       // invocation so the summary must be the same as the one that is already
       // set.
       irs->module.setProfileSummary(
-          irs->PGOReader->getSummary().getMD(irs->context()));
+          irs->PGOReader->getSummary(false).getMD(irs->context()), llvm::ProfileSummary::PSK_Instr);
     }
   }
 }
diff -ur a/gen/optimizer.cpp b/gen/optimizer.cpp
--- a/gen/optimizer.cpp	2019-06-20 16:02:16.000000000 +0000
+++ b/gen/optimizer.cpp	2019-07-13 11:54:18.230161183 +0000
@@ -29,6 +29,7 @@
 #include "llvm/Support/CommandLine.h"
 #include "llvm/Target/TargetMachine.h"
 #include "llvm/Transforms/Instrumentation.h"
+#include "llvm/Transforms/Instrumentation/AddressSanitizer.h"
 #if LDC_LLVM_VER >= 800
 #include "llvm/Transforms/Instrumentation/MemorySanitizer.h"
 #include "llvm/Transforms/Instrumentation/ThreadSanitizer.h"
@@ -187,7 +188,7 @@
 static void addAddressSanitizerPasses(const PassManagerBuilder &Builder,
                                       PassManagerBase &PM) {
   PM.add(createAddressSanitizerFunctionPass());
-  PM.add(createAddressSanitizerModulePass());
+  PM.add(createModuleAddressSanitizerLegacyPassPass());
 }
 
 static void addMemorySanitizerPass(const PassManagerBuilder &Builder,
@@ -290,7 +291,6 @@
     builder.Inliner = createAlwaysInlinerPass();
 #endif
   }
-  builder.DisableUnitAtATime = !unitAtATime;
   builder.DisableUnrollLoops = optLevel == 0;
 
   builder.DisableUnrollLoops = (disableLoopUnrolling.getNumOccurrences() > 0)
diff -ur a/gen/passes/GarbageCollect2Stack.cpp b/gen/passes/GarbageCollect2Stack.cpp
--- a/gen/passes/GarbageCollect2Stack.cpp	2019-06-20 16:02:16.000000000 +0000
+++ b/gen/passes/GarbageCollect2Stack.cpp	2019-07-13 11:54:18.231161183 +0000
@@ -83,7 +83,7 @@
       B.CreateMemSet(Dst, Val, Len, 1 /*Align*/, false /*isVolatile*/);
   if (A.CGNode) {
     A.CGNode->addCalledFunction(
-        CS, A.CG->getOrInsertFunction(CS.getCalledFunction()));
+        cast<CallBase>(CS.getInstruction()), A.CG->getOrInsertFunction(CS.getCalledFunction()));
   }
 }
 
@@ -452,7 +452,7 @@
 
   // Remove the runtime call.
   if (A.CGNode) {
-    A.CGNode->removeCallEdgeFor(CS);
+    A.CGNode->removeCallEdgeFor(*cast<CallBase>(CS.getInstruction()));
   }
   CS->eraseFromParent();
 }
diff -ur a/gen/runtime.cpp b/gen/runtime.cpp
--- a/gen/runtime.cpp	2019-06-20 16:02:16.000000000 +0000
+++ b/gen/runtime.cpp	2019-07-13 11:54:18.230161183 +0000
@@ -342,8 +342,8 @@
     return existing;
   }
 
-  LLFunction *resfn =
-      llvm::cast<llvm::Function>(target.getOrInsertFunction(name, fnty));
+  LLFunction *resfn =
+      LLFunction::Create(fnty, LLFunction::ExternalLinkage, name, target);
   resfn->setAttributes(fn->getAttributes());
   resfn->setCallingConv(fn->getCallingConv());
   return resfn;
diff -ur a/tests/CMakeLists.txt b/tests/CMakeLists.txt
--- a/tests/CMakeLists.txt	2019-07-13 11:54:30.608162082 +0000
+++ b/tests/CMakeLists.txt	2019-07-13 11:54:18.229161183 +0000
@@ -24,7 +24,7 @@
     set(${var_name} ${LLVM_NATIVE_ARCH} PARENT_SCOPE)
 endfunction()
 
-get_host_arch(LDC_HOST_ARCH)
+#get_host_arch(LDC_HOST_ARCH)
 message(STATUS "LDC_HOST_ARCH: ${LDC_HOST_ARCH}")
 
 configure_file(lit.site.cfg.in lit.site.cfg )
