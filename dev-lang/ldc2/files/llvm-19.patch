diff --git a/gen/arrays.cpp b/gen/arrays.cpp
index dbc1acdba54..ad120451c32 100644
--- a/gen/arrays.cpp
+++ b/gen/arrays.cpp
@@ -1071,7 +1071,7 @@ static void emitRangeErrorImpl(IRState *irs, const Loc &loc,
     DtoCAssert(module, loc, DtoConstCString(cAssertMsg));
     break;
   case CHECKACTION_halt:
-    irs->ir->CreateCall(GET_INTRINSIC_DECL(trap), {});
+    irs->ir->CreateCall(GET_INTRINSIC_DECL(trap, {}), {});
     irs->ir->CreateUnreachable();
     break;
   case CHECKACTION_context:
diff --git a/gen/dcompute/targetOCL.cpp b/gen/dcompute/targetOCL.cpp
index e69aff40eab..c23ae8f6f3e 100644
--- a/gen/dcompute/targetOCL.cpp
+++ b/gen/dcompute/targetOCL.cpp
@@ -24,6 +24,7 @@
 #include <string>
 
 // from SPIRVInternal.h
+#if LDC_LLVM_VER < 1900
 #define SPIR_TARGETTRIPLE32 "spir-unknown-unknown"
 #define SPIR_TARGETTRIPLE64 "spir64-unknown-unknown"
 #define SPIR_DATALAYOUT32                                                      \
@@ -38,6 +39,16 @@
   "-v32:32:32-v48:64:64-v64:64:64-v96:128:128"                                 \
   "-v128:128:128-v192:256:256-v256:256:256"                                    \
   "-v512:512:512-v1024:1024:1024"
+#else
+#define SPIR_TARGETTRIPLE32 "spirv-unknown-unknown"
+#define SPIR_TARGETTRIPLE64 "spirv64-unknown-unknown"
+#define SPIR_DATALAYOUT32                                                      \
+  "e-p:32:32-i64:64-v16:16-v24:32-v32:32-v48:64"                               \
+  "-v96:128-v192:256-v256:256-v512:512-v1024:1024-G1"
+#define SPIR_DATALAYOUT64                                                      \
+  "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128"                               \
+  "-v192:256-v256:256-v512:512-v1024:1024-G1"
+#endif
 
 using namespace dmd;
 
diff --git a/gen/dibuilder.cpp b/gen/dibuilder.cpp
index 106291ae072..1ae5658960e 100644
--- a/gen/dibuilder.cpp
+++ b/gen/dibuilder.cpp
@@ -1137,10 +1137,13 @@ void DIBuilder::EmitValue(llvm::Value *val, VarDeclaration *vd) {
   if (!mustEmitFullDebugInfo() || !debugVariable)
     return;
 
-  llvm::Instruction *instr = DBuilder.insertDbgValueIntrinsic(
+  auto instr = DBuilder.insertDbgValueIntrinsic(
       val, debugVariable, DBuilder.createExpression(),
       IR->ir->getCurrentDebugLocation(), IR->scopebb());
-  instr->setDebugLoc(IR->ir->getCurrentDebugLocation());
+#if LDC_LLVM_VER >= 1900
+  llvm::cast<llvm::DbgRecord *>
+#endif
+  (instr)->setDebugLoc(IR->ir->getCurrentDebugLocation());
 }
 
 void DIBuilder::EmitLocalVariable(llvm::Value *ll, VarDeclaration *vd,
diff --git a/gen/functions.cpp b/gen/functions.cpp
index ad7fc21456b..cd6dac19e9c 100644
--- a/gen/functions.cpp
+++ b/gen/functions.cpp
@@ -1254,7 +1254,7 @@ void DtoDefineFunction(FuncDeclaration *fd, bool linkageAvailableExternally) {
     // initialize _argptr with a call to the va_start intrinsic
     DLValue argptrVal(tvalist, argptrMem);
     LLValue *llAp = gABI->prepareVaStart(&argptrVal);
-    llvm::CallInst::Create(GET_INTRINSIC_DECL(vastart), llAp, "",
+    llvm::CallInst::Create(GET_INTRINSIC_DECL(vastart, llAp->getType()), llAp, "",
                            gIR->scopebb());
 
     // copy _arguments to a memory location
@@ -1265,7 +1265,7 @@ void DtoDefineFunction(FuncDeclaration *fd, bool linkageAvailableExternally) {
       auto *vaendBB = llvm::BasicBlock::Create(gIR->context(), "vaend", func);
       const auto savedInsertPoint = gIR->saveInsertPoint();
       gIR->ir->SetInsertPoint(vaendBB);
-      gIR->ir->CreateCall(GET_INTRINSIC_DECL(vaend), llAp);
+      gIR->ir->CreateCall(GET_INTRINSIC_DECL(vaend, llAp->getType()), llAp);
       funcGen.scopes.pushCleanup(vaendBB, gIR->scopebb());
     }
   }
diff --git a/gen/llvm.h b/gen/llvm.h
index 6cd420340bc..6dc2c51541f 100644
--- a/gen/llvm.h
+++ b/gen/llvm.h
@@ -35,8 +35,13 @@ using llvm::APFloat;
 using llvm::APInt;
 using llvm::IRBuilder;
 
-#define GET_INTRINSIC_DECL(_X)                                                 \
+#if LDC_LLVM_VER >= 1900
+#define GET_INTRINSIC_DECL(_X, _TY)                                              \
+  (llvm::Intrinsic::getDeclaration(&gIR->module, llvm::Intrinsic::_X, _TY))
+#else
+#define GET_INTRINSIC_DECL(_X, _TY)                                              \
   (llvm::Intrinsic::getDeclaration(&gIR->module, llvm::Intrinsic::_X))
+#endif
 
 // shortcuts for the common llvm types
 
diff --git a/gen/optimizer.cpp b/gen/optimizer.cpp
index 76b37eb1186..e8936d0f7ef 100644
--- a/gen/optimizer.cpp
+++ b/gen/optimizer.cpp
@@ -308,6 +308,9 @@ static llvm::Optional<PGOOptions> getPGOOptions() {
         "" /*MemoryProfileUsePath*/, llvm::vfs::getRealFileSystem(),
 #endif
         PGOOptions::PGOAction::IRInstr, PGOOptions::CSPGOAction::NoCSAction,
+#if LDC_LLVM_VER >= 1900
+        PGOOptions::ColdFuncOpt::Default,
+#endif
         debugInfoForProfiling, pseudoProbeForProfiling);
   } else if (opts::isUsingIRBasedPGOProfile()) {
     return PGOOptions(
@@ -316,6 +319,9 @@ static llvm::Optional<PGOOptions> getPGOOptions() {
         "" /*MemoryProfileUsePath*/, llvm::vfs::getRealFileSystem(),
 #endif
         PGOOptions::PGOAction::IRUse, PGOOptions::CSPGOAction::NoCSAction,
+#if LDC_LLVM_VER >= 1900
+        PGOOptions::ColdFuncOpt::Default,
+#endif
         debugInfoForProfiling, pseudoProbeForProfiling);
   } else if (opts::isUsingSampleBasedPGOProfile()) {
     return PGOOptions(
@@ -324,6 +330,9 @@ static llvm::Optional<PGOOptions> getPGOOptions() {
         "" /*MemoryProfileUsePath*/, llvm::vfs::getRealFileSystem(),
 #endif
         PGOOptions::PGOAction::SampleUse, PGOOptions::CSPGOAction::NoCSAction,
+#if LDC_LLVM_VER >= 1900
+        PGOOptions::ColdFuncOpt::Default,
+#endif
         debugInfoForProfiling, pseudoProbeForProfiling);
   }
 #if LDC_LLVM_VER < 1600
diff --git a/gen/pgo_ASTbased.cpp b/gen/pgo_ASTbased.cpp
index 031bdf36bfa..723cabdd951 100644
--- a/gen/pgo_ASTbased.cpp
+++ b/gen/pgo_ASTbased.cpp
@@ -909,7 +909,7 @@ void CodeGenPGO::emitCounterIncrement(const RootObject *S) const {
   assert(counter_it != (*RegionCounterMap).end() &&
          "Statement not found in PGO counter map!");
   unsigned counter = counter_it->second;
-  gIR->ir->CreateCall(GET_INTRINSIC_DECL(instrprof_increment),
+  gIR->ir->CreateCall(GET_INTRINSIC_DECL(instrprof_increment, {}),
                       {FuncNameVar, gIR->ir->getInt64(FunctionHash),
                        gIR->ir->getInt32(NumRegionCounters),
                        gIR->ir->getInt32(counter)});
@@ -1118,7 +1118,7 @@ void CodeGenPGO::valueProfile(uint32_t valueKind, llvm::Instruction *valueSite,
     llvm::Value *Args[5] = {FuncNameVar, gIR->ir->getInt64(FunctionHash), value,
                             gIR->ir->getInt32(valueKind),
                             gIR->ir->getInt32(NumValueSites[valueKind])};
-    gIR->ir->CreateCall(GET_INTRINSIC_DECL(instrprof_value_profile), Args);
+    gIR->ir->CreateCall(GET_INTRINSIC_DECL(instrprof_value_profile, {}), Args);
 
     gIR->ir->restoreIP(savedInsertPoint);
 
diff --git a/gen/runtime.cpp b/gen/runtime.cpp
index 06b0ecab241..bff2731745a 100644
--- a/gen/runtime.cpp
+++ b/gen/runtime.cpp
@@ -887,7 +887,7 @@ static void emitInstrumentationFn(const char *name) {
 
   // Grab the address of the calling function
   auto *caller =
-      gIR->ir->CreateCall(GET_INTRINSIC_DECL(returnaddress), DtoConstInt(0));
+      gIR->ir->CreateCall(GET_INTRINSIC_DECL(returnaddress, {}), DtoConstInt(0));
   auto callee = gIR->topfunc();
 
   gIR->ir->CreateCall(fn, {callee, caller});
diff --git a/gen/tocall.cpp b/gen/tocall.cpp
index 97f5ca9f0cd..e9f3c899a38 100644
--- a/gen/tocall.cpp
+++ b/gen/tocall.cpp
@@ -273,7 +273,7 @@ bool DtoLowerMagicIntrinsic(IRState *p, FuncDeclaration *fndecl, CallExp *e,
       gABI->vaCopy(ap, &argptr);
     } else {
       LLValue *llAp = gABI->prepareVaStart(ap);
-      p->ir->CreateCall(GET_INTRINSIC_DECL(vastart), llAp, "");
+      p->ir->CreateCall(GET_INTRINSIC_DECL(vastart, llAp->getType()), llAp, "");
     }
     result = nullptr;
     return true;
@@ -321,7 +321,7 @@ bool DtoLowerMagicIntrinsic(IRState *p, FuncDeclaration *fndecl, CallExp *e,
     DLValue *ap = toElem((*e->arguments)[0])->isLVal(); // va_list
     assert(ap);
     LLValue *llAp = gABI->prepareVaArg(ap);
-    p->ir->CreateCall(GET_INTRINSIC_DECL(vaend), llAp);
+    p->ir->CreateCall(GET_INTRINSIC_DECL(vaend, llAp->getType()), llAp);
     result = nullptr;
     return true;
   }
diff --git a/gen/toir.cpp b/gen/toir.cpp
index be09d2a682b..927a720e73a 100644
--- a/gen/toir.cpp
+++ b/gen/toir.cpp
@@ -809,7 +809,7 @@ class ToElemVisitor : public Visitor {
       // access to the type of the class to do a GEP).
       auto vtable = DtoLoad(dfnval->vtable->getType(), dfnval->vthis);
       auto cmp = p->ir->CreateICmpEQ(vtable, dfnval->vtable);
-      p->ir->CreateCall(GET_INTRINSIC_DECL(assume), {cmp});
+      p->ir->CreateCall(GET_INTRINSIC_DECL(assume, {}), {cmp});
     }
 
     if (delayedDtorVar) {
@@ -1766,7 +1766,7 @@ class ToElemVisitor : public Visitor {
     p->ir->SetInsertPoint(failedbb);
 
     if (global.params.checkAction == CHECKACTION_halt) {
-      p->ir->CreateCall(GET_INTRINSIC_DECL(trap), {});
+      p->ir->CreateCall(GET_INTRINSIC_DECL(trap, {}), {});
       p->ir->CreateUnreachable();
     } else {
       /* DMD Bugzilla 8360: If the condition is evaluated to true,
@@ -1923,7 +1923,7 @@ class ToElemVisitor : public Visitor {
     IF_LOG Logger::print("HaltExp::toElem: %s\n", e->toChars());
     LOG_SCOPE;
 
-    p->ir->CreateCall(GET_INTRINSIC_DECL(trap), {});
+    p->ir->CreateCall(GET_INTRINSIC_DECL(trap, {}), {});
     p->ir->CreateUnreachable();
 
     // this terminated the basicblock, start a new one
diff --git a/gen/trycatchfinally.cpp b/gen/trycatchfinally.cpp
index 3f982d93a0f..460b1ba3344 100644
--- a/gen/trycatchfinally.cpp
+++ b/gen/trycatchfinally.cpp
@@ -730,7 +730,7 @@ llvm::BasicBlock *TryCatchFinallyScopes::emitLandingPad() {
       // "Call" llvm.eh.typeid.for, which gives us the eh selector value to
       // compare the landing pad selector value with.
       llvm::Value *ehTypeId = irs.ir->CreateCall(
-          GET_INTRINSIC_DECL(eh_typeid_for), cb.classInfoPtr);
+          GET_INTRINSIC_DECL(eh_typeid_for, cb.classInfoPtr->getType()), cb.classInfoPtr);
 
       // Compare the selector value from the unwinder against the expected
       // one and branch accordingly.
diff --git a/runtime/druntime/src/ldc/intrinsics.di b/runtime/druntime/src/ldc/intrinsics.di
index f044b882a8a..7a656bae8b0 100644
--- a/runtime/druntime/src/ldc/intrinsics.di
+++ b/runtime/druntime/src/ldc/intrinsics.di
@@ -24,6 +24,8 @@ else version (LDC_LLVM_1600) enum LLVM_version = 1600;
 else version (LDC_LLVM_1700) enum LLVM_version = 1700;
 else version (LDC_LLVM_1800) enum LLVM_version = 1800;
 else version (LDC_LLVM_1801) enum LLVM_version = 1801;
+else version (LDC_LLVM_1901) enum LLVM_version = 1901;
+else version (LDC_LLVM_2000) enum LLVM_version = 2000;
 else static assert(false, "LDC LLVM version not supported");
 
 enum LLVM_atleast(int major) = (LLVM_version >= major * 100);
