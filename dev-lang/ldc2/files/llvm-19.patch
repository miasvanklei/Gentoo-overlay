--- a/gen/dibuilder.cpp
+++ b/gen/dibuilder.cpp
@@ -1139,7 +1139,11 @@
 
   llvm::Instruction *instr = DBuilder.insertDbgValueIntrinsic(
       val, debugVariable, DBuilder.createExpression(),
-      IR->ir->getCurrentDebugLocation(), IR->scopebb());
+      IR->ir->getCurrentDebugLocation(), IR->scopebb())
+#if LDC_LLVM_VER >= 1901
+  .dyn_cast<llvm::Instruction *>()
+#endif
+    ;
   instr->setDebugLoc(IR->ir->getCurrentDebugLocation());
 }
 
--- a/gen/optimizer.cpp
+++ b/gen/optimizer.cpp
@@ -308,6 +308,9 @@
         "" /*MemoryProfileUsePath*/, llvm::vfs::getRealFileSystem(),
 #endif
         PGOOptions::PGOAction::IRInstr, PGOOptions::CSPGOAction::NoCSAction,
+#if LDC_LLVM_VER >= 1901
+        PGOOptions::ColdFuncOpt::Default,
+#endif
         debugInfoForProfiling, pseudoProbeForProfiling);
   } else if (opts::isUsingIRBasedPGOProfile()) {
     return PGOOptions(
@@ -316,6 +319,9 @@
         "" /*MemoryProfileUsePath*/, llvm::vfs::getRealFileSystem(),
 #endif
         PGOOptions::PGOAction::IRUse, PGOOptions::CSPGOAction::NoCSAction,
+#if LDC_LLVM_VER >= 1901
+        PGOOptions::ColdFuncOpt::Default,
+#endif
         debugInfoForProfiling, pseudoProbeForProfiling);
   } else if (opts::isUsingSampleBasedPGOProfile()) {
     return PGOOptions(
@@ -324,6 +330,9 @@
         "" /*MemoryProfileUsePath*/, llvm::vfs::getRealFileSystem(),
 #endif
         PGOOptions::PGOAction::SampleUse, PGOOptions::CSPGOAction::NoCSAction,
+#if LDC_LLVM_VER >= 1901
+        PGOOptions::ColdFuncOpt::Default,
+#endif
         debugInfoForProfiling, pseudoProbeForProfiling);
   }
 #if LDC_LLVM_VER < 1600
--- a/runtime/druntime/src/ldc/intrinsics.di
+++ b/runtime/druntime/src/ldc/intrinsics.di
@@ -24,6 +24,8 @@
 else version (LDC_LLVM_1700) enum LLVM_version = 1700;
 else version (LDC_LLVM_1800) enum LLVM_version = 1800;
 else version (LDC_LLVM_1801) enum LLVM_version = 1801;
+else version (LDC_LLVM_1901) enum LLVM_version = 1901;
+else version (LDC_LLVM_2000) enum LLVM_version = 2000;
 else static assert(false, "LDC LLVM version not supported");
 
 enum LLVM_atleast(int major) = (LLVM_version >= major * 100);
--- a/gen/functions.cpp
+++ b/gen/functions.cpp
@@ -1259,7 +1259,7 @@
     // initialize _argptr with a call to the va_start intrinsic
     DLValue argptrVal(tvalist, argptrMem);
     LLValue *llAp = gABI->prepareVaStart(&argptrVal);
-    llvm::CallInst::Create(GET_INTRINSIC_DECL(vastart), llAp, "",
+    llvm::CallInst::Create(GET_INTRINSIC_DECL_X(vastart, llAp->getType()), llAp, "",
                            gIR->scopebb());
 
     // copy _arguments to a memory location
@@ -1270,7 +1270,7 @@
       auto *vaendBB = llvm::BasicBlock::Create(gIR->context(), "vaend", func);
       const auto savedInsertPoint = gIR->saveInsertPoint();
       gIR->ir->SetInsertPoint(vaendBB);
-      gIR->ir->CreateCall(GET_INTRINSIC_DECL(vaend), llAp);
+      gIR->ir->CreateCall(GET_INTRINSIC_DECL_X(vaend, llAp->getType()), llAp);
       funcGen.scopes.pushCleanup(vaendBB, gIR->scopebb());
     }
   }
--- a/gen/llvm.h
+++ b/gen/llvm.h
@@ -38,6 +38,9 @@
 #define GET_INTRINSIC_DECL(_X)                                                 \
   (llvm::Intrinsic::getDeclaration(&gIR->module, llvm::Intrinsic::_X))
 
+#define GET_INTRINSIC_DECL_X(_X, _Y)                                                 \
+  (llvm::Intrinsic::getDeclaration(&gIR->module, llvm::Intrinsic::_X, _Y))
+
 // shortcuts for the common llvm types
 
 #define LLType llvm::Type
--- a/gen/tocall.cpp
+++ b/gen/tocall.cpp
@@ -273,7 +273,7 @@
       gABI->vaCopy(ap, &argptr);
     } else {
       LLValue *llAp = gABI->prepareVaStart(ap);
-      p->ir->CreateCall(GET_INTRINSIC_DECL(vastart), llAp, "");
+      p->ir->CreateCall(GET_INTRINSIC_DECL_X(vastart, llAp->getType()), llAp, "");
     }
     result = nullptr;
     return true;
@@ -321,7 +321,7 @@
     DLValue *ap = toElem((*e->arguments)[0])->isLVal(); // va_list
     assert(ap);
     LLValue *llAp = gABI->prepareVaArg(ap);
-    p->ir->CreateCall(GET_INTRINSIC_DECL(vaend), llAp);
+    p->ir->CreateCall(GET_INTRINSIC_DECL_X(vaend, llAp->getType()), llAp);
     result = nullptr;
     return true;
   }
--- a/gen/trycatchfinally.cpp
+++ b/gen/trycatchfinally.cpp
@@ -730,7 +730,8 @@
       // "Call" llvm.eh.typeid.for, which gives us the eh selector value to
       // compare the landing pad selector value with.
       llvm::Value *ehTypeId = irs.ir->CreateCall(
-          GET_INTRINSIC_DECL(eh_typeid_for), cb.classInfoPtr);
+          GET_INTRINSIC_DECL_X(eh_typeid_for, cb.classInfoPtr->getType()), cb.classInfoPtr);
+        //llvm::PointerType::getUnqual(gIR->module.getContext())
 
       // Compare the selector value from the unwinder against the expected
       // one and branch accordingly.
