--- a/src/disasm.cpp	2018-02-23 10:27:43.251329278 +0100
+++ b/src/disasm.cpp	2018-02-23 10:27:07.653420058 +0100
@@ -429,7 +429,9 @@
 #else
     MCContext Ctx(*MAI, *MRI, MOFI.get(), &SrcMgr);
 #endif
-#if JL_LLVM_VERSION >= 30900
+#if JL_LLVM_VERSION >= 60000
+    MOFI->InitMCObjectFileInfo(TheTriple, /* PIC */ false, Ctx);
+#elif JL_LLVM_VERSION >= 30900
     MOFI->InitMCObjectFileInfo(TheTriple, /* PIC */ false,
                                CodeModel::Default, Ctx);
 #elif JL_LLVM_VERSION >= 30700
@@ -485,7 +487,10 @@
 #else
         CE = TheTarget->createMCCodeEmitter(*MCII, *MRI, *STI, Ctx);
 #endif
-#if JL_LLVM_VERSION >= 40000
+#if JL_LLVM_VERSION >= 60000
+        MCTargetOptions Options;
+        MAB = TheTarget->createMCAsmBackend(*STI, *MRI, Options);
+#elif JL_LLVM_VERSION >= 40000
         MCTargetOptions Options;
         MAB = TheTarget->createMCAsmBackend(*MRI, TripleName, MCPU, Options);
 #elif JL_LLVM_VERSION >= 30400
--- a/src/debuginfo.cpp	2018-02-23 10:27:59.277288739 +0100
+++ b/src/debuginfo.cpp	2018-02-23 10:33:35.889431352 +0100
@@ -565,7 +565,11 @@
                 ObjectInfo tmp = {&debugObj,
                     (size_t)SectionSize,
                     (ptrdiff_t)(SectionAddr - SectionLoadAddr),
+#if JL_LLVM_VERSION >= 60000
+                    DWARFContext::create(debugObj, &L).release(),
+#else
                     new DWARFContextInMemory(debugObj, &L),
+#endif
                     };
                 objectmap[SectionLoadAddr] = tmp;
                 first = false;
@@ -1342,7 +1346,9 @@
             *slide = -(int64_t)fbase;
         }
 
-#if JL_LLVM_VERSION >= 30700
+#if JL_LLVM_VERSION >= 60000
+        *context = DWARFContext::create(*debugobj).release();
+#elif JL_LLVM_VERSION >= 30700
         *context = new DWARFContextInMemory(*debugobj);
 #elif JL_LLVM_VERSION >= 30600
         *context = DIContext::getDWARFContext(*debugobj);
--- a/src/codegen.cpp	2018-02-23 10:22:43.940092159 +0100
+++ b/src/codegen.cpp	2018-02-23 10:23:19.156002307 +0100
@@ -36,7 +36,11 @@
 #include <functional>
 
 // target machine computation
-#include <llvm/Target/TargetSubtargetInfo.h>
+#if JL_LLVM_VERSION >= 60000
+#include <llvm/CodeGen/TargetSubtargetInfo.h>
+#else
+ #include <llvm/Target/TargetSubtargetInfo.h>
+#endif
 #include <llvm/Support/TargetRegistry.h>
 #if JL_LLVM_VERSION < 30700
 #include <llvm/Target/TargetLibraryInfo.h>
--- a/src/llvm-simdloop.cpp	2018-02-23 10:35:14.686179623 +0100
+++ b/src/llvm-simdloop.cpp	2018-02-23 10:36:10.005038715 +0100
@@ -138,7 +138,11 @@
     }
     for (chainVector::const_iterator K=chain.begin(); K!=chain.end(); ++K) {
         DEBUG(dbgs() << "LSL: marking " << **K << "\n");
+#if JL_LLVM_VERSION >= 60000
+        (*K)->setFast(true);
+#else
         (*K)->setHasUnsafeAlgebra(true);
+#endif
     }
 }
 
--- a/src/ccall.cpp	2018-02-23 16:48:42.750824063 +0100
+++ b/src/ccall.cpp	2018-02-23 16:57:50.853390608 +0100
@@ -1108,20 +1108,30 @@
         SMDiagnostic Err = SMDiagnostic();
         std::string ir_string = ir_stream.str();
 #if JL_LLVM_VERSION >= 30600
-        Module *m = NULL;
-        bool failed = parseAssemblyInto(llvm::MemoryBufferRef(ir_string,"llvmcall"),*jl_Module,Err);
-        if (!failed)
-            m = jl_Module;
+#if JL_LLVM_VERSION >= 60000
+        // Do not enable update debug info since it runs the verifier on the whole module
+        // and will error on the function we are currently emitting.
+        bool failed = parseAssemblyInto(llvm::MemoryBufferRef(ir_string, "llvmcall"),
+                                        *jl_Module,Err,nullptr,/* UpdateDebugInfo */ false);
 #else
-        Module *m = ParseAssemblyString(ir_string.c_str(),jl_Module,Err,jl_LLVMContext);
+        bool failed = parseAssemblyInto(llvm::MemoryBufferRef(ir_string,"llvmcall"),
+                                        *jl_Module,Err);
 #endif
+        if (failed) {
+#else
+        Module *m = ParseAssemblyString(ir_string.c_str(),jl_Module,Err,jl_LLVMContext);
         if (m == NULL) {
+#endif
             std::string message = "Failed to parse LLVM Assembly: \n";
             llvm::raw_string_ostream stream(message);
             Err.print("julia",stream,true);
             jl_error(stream.str().c_str());
         }
+#if JL_LLVM_VERSION >= 30600
+        f = jl_Module->getFunction(ir_name);
+#else
         f = m->getFunction(ir_name);
+#endif
     }
     else {
         assert(isPtr);
--- a/src/intrinsics.cpp	2018-02-23 10:23:44.244938275 +0100
+++ b/src/intrinsics.cpp	2018-02-23 10:24:13.119865064 +0100
@@ -721,7 +721,11 @@
             (always_fast ||
              jl_options.fast_math == JL_OPTIONS_FAST_MATH_ON)) {
             FastMathFlags fmf;
+#if JL_LLVM_VERSION >= 60000
+            fmf.setFast();
+#else
             fmf.setUnsafeAlgebra();
+#endif
 #if JL_LLVM_VERSION >= 30800
             builder.setFastMathFlags(fmf);
 #else
--- a/src/jitlayers.cpp	2018-02-23 17:08:33.964762988 +0100
+++ b/src/jitlayers.cpp	2018-02-23 17:08:43.700738979 +0100
@@ -1265,7 +1265,7 @@
 #else
         Reloc::Default,
 #endif
-        CodeModel::Default,
+        CodeModel::Small,
         CodeGenOpt::Aggressive // -O3 TODO: respect command -O0 flag?
         ));
 
