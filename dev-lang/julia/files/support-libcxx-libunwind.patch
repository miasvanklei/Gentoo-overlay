--- a/Make.inc	2021-11-14 16:03:00.095635920 +0100
+++ b/Make.inc	2021-11-14 15:58:27.921347799 +0100
@@ -42,6 +42,7 @@
 # Issues resulting from use of SYSTEM versions will generally not be accepted.
 USE_SYSTEM_CSL:=0
 USE_SYSTEM_LLVM:=0
+USE_LLVM_LUBUNWIND:=0
 USE_SYSTEM_LIBUNWIND:=0
 DISABLE_LIBUNWIND:=0
 USE_SYSTEM_PCRE:=0
@@ -1096,10 +1097,10 @@
 LIBUNWIND:=
 else
 LIBUNWIND:=-lunwind
-ifneq ($(findstring $(OS),Darwin OpenBSD),)
+ifeq ($(USE_LLVM_LIBUNWIND), 1)
 JCPPFLAGS+=-DLLVMLIBUNWIND
-else ifeq ($(USE_SYSTEM_LIBUNWIND), 1)
-# Only for linux and freebsd since we want to use not yet released gnu libunwind features
+endif
+ifeq ($(USE_SYSTEM_LIBUNWIND), 1)
 JCFLAGS+=-DSYSTEM_LIBUNWIND
 JCPPFLAGS+=-DSYSTEM_LIBUNWIND
 endif
@@ -1672,7 +1666,7 @@
 # We only bother to define this on Linux, as that's the only platform that does libstdc++ probing
 # On all other platforms, the LIBSTDCXX_*_DEPLIB variables will be empty.
 ifeq ($(OS),Linux)
-LIBSTDCXX_NAME := libstdc++.so.6
+LIBSTDCXX_NAME := libc++.so.1
 ifeq ($(USE_SYSTEM_CSL),1)
 LIBSTDCXX_BUILD_DEPLIB := $(call dep_lib_path,$(build_libdir),$(build_private_shlibdir)/$(LIBSTDCXX_NAME))
 else
--- a/src/debuginfo.cpp	2021-03-24 21:02:52.000000000 +0100
+++ b/src/debuginfo.cpp	2021-11-14 15:58:27.908347643 +0100
@@ -766,7 +766,7 @@
     bool needs_name = name && (!*name || untrusted_dladdr);
     // Try platform specific methods first since they are usually faster
     if (needs_saddr) {
-#if (defined(_OS_LINUX_) || defined(_OS_FREEBSD_)) && !defined(JL_DISABLE_LIBUNWIND)
+#if !defined(JL_DISABLE_LIBUNWIND) && !defined(LLVMLIBUNWIND)
         unw_proc_info_t pip;
         // Seems that libunwind may return NULL IP depending on what info it finds...
         if (unw_get_proc_info_by_ip(unw_local_addr_space, pointer,
@@ -1279,8 +1265,8 @@
     return getJITDebugRegistry().lookupLinfo((size_t)p);
 }

-#if defined(_OS_DARWIN_) && defined(LLVM_SHLIB)
-
+#if defined(LLVMLIBUNWIND)
+#if (!defined(SYSTEM_LIBUNWIND) && defined(LLVM_SHLIB)) || (defined(SYSTEM_LIBUNWIND) && !defined(LLVM_SHLIB))
 /*
  * We use a custom unwinder, so we need to make sure that when registering dynamic
  * frames, we do so with our unwinder rather than with the system one. If LLVM is
@@ -1292,7 +1278,7 @@
 // This implementation handles frame registration for local targets.
 void register_eh_frames(uint8_t *Addr, size_t Size)
 {
-  // On OS X OS X __register_frame takes a single FDE as an argument.
+  // llvm libunwind __register_frame takes a single FDE as an argument.
   // See http://lists.cs.uiuc.edu/pipermail/llvmdev/2013-April/061768.html
   processFDEs((char*)Addr, Size, [](const char *Entry) {
       getJITDebugRegistry().libc_frames.libc_register_frame(Entry);
@@ -1306,7 +1292,29 @@
     });
 }

-#elif (defined(_OS_LINUX_) || defined(_OS_FREEBSD_)) && \
+#else
+
+void register_eh_frames(uint8_t *Addr, size_t Size)
+{
+  processFDEs((char*)Addr, Size, [](const char *Entry) {
+    jl_profile_atomic([&]() JL_NOTSAFEPOINT {
+      __register_frame(const_cast<char *>(Entry));
+    });
+  });
+}
+
+void deregister_eh_frames(uint8_t *Addr, size_t Size)
+{
+  processFDEs((char*)Addr, Size, [](const char *Entry) {
+    jl_profile_atomic([&]() JL_NOTSAFEPOINT {
+      __deregister_frame(const_cast<char *>(Entry));
+    });
+  });
+}
+
+#endif
+
+#elif !defined(LLVMLIBUNWIND) && \
     defined(JL_UNW_HAS_FORMAT_IP) && \
     !defined(_CPU_ARM_) // ARM does not have/use .eh_frame, so we handle this elsewhere
 #include <type_traits>
--- a/src/stackwalk.c 2024-10-02 15:32:12.042875832 +0200
+++ b/src/stackwalk.c 2024-10-02 16:11:46.355734736 +0200
@@ -556,7 +556,7 @@
     return unw_step(cursor) > 0;
 }

-#ifdef LLVMLIBUNWIND
+#if defined(LLVMLIBUNWIND) && defined(_OS_DARWIN_)
 NOINLINE size_t rec_backtrace_ctx_dwarf(jl_bt_element_t *bt_data, size_t maxsize,
                                         bt_context_t *context, jl_gcframe_t *pgcstack)
 {
--- a/src/julia_internal.h    2024-10-02 15:32:12.026876007 +0200
+++ b/src/julia_internal.h    2024-10-02 16:11:24.111985603 +0200
@@ -1317,11 +1317,12 @@
 #pragma GCC visibility pop
 typedef unw_context_t bt_context_t;
 typedef unw_cursor_t bt_cursor_t;
-#  if (!defined(SYSTEM_LIBUNWIND) || UNW_VERSION_MAJOR > 1 ||   \
-       (UNW_VERSION_MAJOR == 1 && UNW_VERSION_MINOR != 0 && UNW_VERSION_MINOR != 1))
+#  if !defined(SYSTEM_LIBUNWIND) && defined(UNW_VERSION_MAJOR)
+#    if UNW_VERSION_MAJOR > 1 || (UNW_VERSION_MAJOR == 1 && UNW_VERSION_MINOR != 0 && UNW_VERSION_MINOR != 1))
 // Enable our memory manager only for libunwind with our patch or
 // on a newer release
-#    define JL_UNW_HAS_FORMAT_IP 1
+#      define JL_UNW_HAS_FORMAT_IP 1
+#    endif
 #  endif
 #else
 // Unwinding is disabled
@@ -1333,7 +1333,7 @@
 // which was asynchronously interrupted.
 size_t rec_backtrace_ctx(jl_bt_element_t *bt_data, size_t maxsize, bt_context_t *ctx,
                          jl_gcframe_t *pgcstack) JL_NOTSAFEPOINT;
-#ifdef LLVMLIBUNWIND
+#if defined(LLVMLIBUNWIND) && defined(_OS_DARWIN_)
 size_t rec_backtrace_ctx_dwarf(jl_bt_element_t *bt_data, size_t maxsize, bt_context_t *ctx, jl_gcframe_t *pgcstack) JL_NOTSAFEPOINT;
 #endif
 JL_DLLEXPORT jl_value_t *jl_get_backtrace(void);
--- a/stdlib/CompilerSupportLibraries_jll/src/CompilerSupportLibraries_jll.jl	2021-03-24 21:02:52.000000000 +0100
+++ b/stdlib/CompilerSupportLibraries_jll/src/CompilerSupportLibraries_jll.jl	2021-11-14 15:58:27.848346923 +0100
@@ -9,14 +9,12 @@
 const PATH_list = String[]
 const LIBPATH_list = String[]
 
-export libgfortran, libstdcxx, libgomp
+export libstdcxx, libgomp
 
 # These get calculated in __init__()
 const PATH = Ref("")
 const LIBPATH = Ref("")
 artifact_dir::String = ""
 libgcc_s_handle::Ptr{Cvoid} = C_NULL
 libgcc_s_path::String = ""
-libgfortran_handle::Ptr{Cvoid} = C_NULL
-libgfortran_path::String = ""
 libstdcxx_handle::Ptr{Cvoid} = C_NULL
 libstdcxx_path::String = ""
 libgomp_handle::Ptr{Cvoid} = C_NULL
@@ -43,10 +41,9 @@
     const libgomp = "@rpath/libgomp.1.dylib"
     const libssp = "@rpath/libssp.0.dylib"
 else
-    const libgcc_s = "libgcc_s.so.1"
-    const libgfortran = string("libgfortran.so.", libgfortran_version(HostPlatform()).major)
-    const libstdcxx = "libstdc++.so.6"
-    const libgomp = "libgomp.so.1"
+    const libgcc_s = "libunwind.so.1.0"
+    const libstdcxx = "libc++.so.1.0"
+    const libgomp = "libomp.so.1"
     if libc(HostPlatform()) != "musl"
         const libssp = "libssp.so.0"
     end
@@ -55,8 +52,6 @@
 function __init__()
     global libgcc_s_handle = dlopen(libgcc_s)
     global libgcc_s_path = dlpath(libgcc_s_handle)
-    global libgfortran_handle = dlopen(libgfortran)
-    global libgfortran_path = dlpath(libgfortran_handle)
     global libstdcxx_handle = dlopen(libstdcxx)
     global libstdcxx_path = dlpath(libstdcxx_handle)
     global libgomp_handle = dlopen(libgomp)
@@ -76,7 +71,6 @@
 find_artifact_dir() = artifact_dir
 dev_jll() = error("stdlib JLLs cannot be dev'ed")
 best_wrapper = nothing
-get_libgfortran_path() = libgfortran_path
 get_libstdcxx_path() = libstdcxx_path
 get_libgomp_path() = libgomp_path
 
--- a/base/Makefile	2023-02-05 19:03:19.576666944 +0100
+++ b/base/Makefile	2023-02-05 19:04:00.965147814 +0100
@@ -232,18 +232,14 @@
 endif
 endif
 else
-$(eval $(call symlink_system_library,CSL,libgcc_s,1))
+$(eval $(call symlink_system_library,CSL,libgcc_s,1))
 endif
-ifneq (,$(LIBGFORTRAN_VERSION))
-$(eval $(call symlink_system_library,CSL,libgfortran,$(LIBGFORTRAN_VERSION)))
-endif
-$(eval $(call symlink_system_library,CSL,libstdc++,6))
+$(eval $(call symlink_system_library,CSL,libc++,1))
 # We allow libssp, libatomic, libgomp and libquadmath to fail as they are not available on all systems
 $(eval $(call symlink_system_library,CSL,libssp,0,ALLOW_FAILURE))
 $(eval $(call symlink_system_library,CSL,libatomic,1,ALLOW_FAILURE))
-$(eval $(call symlink_system_library,CSL,libgomp,1,ALLOW_FAILURE))
-$(eval $(call symlink_system_library,CSL,libquadmath,0,ALLOW_FAILURE))
-$(eval $(call symlink_system_library,PCRE,libpcre2-8))
+$(eval $(call symlink_system_library,CSL,libomp,1,ALLOW_FAILURE))
+$(eval $(call symlink_system_library,PCRE,libpcre2-8,0))
 $(eval $(call symlink_system_library,DSFMT,libdSFMT))
 $(eval $(call symlink_system_library,LIBBLASTRAMPOLINE,libblastrampoline))
 $(eval $(call symlink_system_library,BLAS,$(LIBBLASNAME))) 
--- a/cli/loader_lib.c	2023-02-15 22:08:35.587726405 +0100
+++ b/cli/loader_lib.c	2023-02-15 22:08:51.777909633 +0100
@@ -257,7 +257,7 @@
         // The star is there to prevent the compiler from merging constants
         // with "\0*libstdc++.so.6", which we string replace inside the .so during
         // make install.
-        void *handle = dlopen("libstdc++.so.6\0*", RTLD_LAZY);
+        void *handle = dlopen("libc++.so.1\0*", RTLD_LAZY);
         if (!handle) {
             _exit(0);
         }
--- a/Makefile	2023-02-17 15:31:46.628667916 +0100
+++ b/Makefile	2023-02-17 15:32:40.746240004 +0100
@@ -210,7 +210,7 @@
 JL_PRIVATE_LIBS-$(USE_SYSTEM_LAPACK) += $(LIBLAPACKNAME)
 endif
 
-JL_PRIVATE_LIBS-$(USE_SYSTEM_CSL) += libgfortran libquadmath libstdc++ libgcc_s libgomp libssp libatomic
+JL_PRIVATE_LIBS-$(USE_SYSTEM_CSL) += libc++ libunwind libomp
 ifeq ($(OS),Darwin)
 JL_PRIVATE_LIBS-$(USE_SYSTEM_CSL) += libc++
 endif
--- a/stdlib/OpenBLAS_jll/src/OpenBLAS_jll.jl 2023-06-18 16:21:20.140569024 +0200
+++ b/stdlib/OpenBLAS_jll/src/OpenBLAS_jll.jl 2023-06-18 16:29:40.874794476 +0200
@@ -41,7 +41,6 @@
     const _libgfortran = string("@rpath/", "libgfortran.", libgfortran_version(HostPlatform()).major, ".dylib")
 else
     const libopenblas = "libopenblas$(libsuffix).so"
-    const _libgfortran = string("libgfortran.so.", libgfortran_version(HostPlatform()).major)
 end
 
 function __init__()
@@ -63,10 +62,6 @@
         ENV["OPENBLAS_DEFAULT_NUM_THREADS"] = "1"
     end
 
-    # As mentioned above, we are sneaking this in here so that we don't have to
-    # depend on CSL_jll and load _all_ of its libraries.
-    dlopen(_libgfortran)
-
     global libopenblas_handle = dlopen(libopenblas)
     global libopenblas_path = dlpath(libopenblas_handle)
     global artifact_dir = dirname(Sys.BINDIR)
