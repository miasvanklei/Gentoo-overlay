--- a/src/jitlayers.cpp	2019-07-14 21:13:54.631876662 +0000
+++ b/src/jitlayers.cpp	2019-07-14 21:13:39.822875586 +0000
@@ -151,7 +151,7 @@
     // Running `memcpyopt` between this and `sroa` seems to give `sroa` a hard time
     // merging the `alloca` for the unboxed data and the `alloca` created by the `alloc_opt`
     // pass.
-    PM->add(createAllocOptPass());
+    //PM->add(createAllocOptPass());
     PM->add(createInstructionCombiningPass()); // Cleanup for scalarrepl.
     // Now that SROA has cleaned up for front-end mess, a lot of control flow should
     // be more evident - try to clean it up.
@@ -173,7 +173,7 @@
 
     // Load forwarding above can expose allocations that aren't actually used
     // remove those before optimizing loops.
-    PM->add(createAllocOptPass());
+    //PM->add(createAllocOptPass());
     PM->add(createLoopIdiomPass()); //// ****
     PM->add(createLoopRotatePass());           // Rotate loops.
 #ifdef USE_POLLY
@@ -197,7 +197,7 @@
     //PM->add(createLoopStrengthReducePass());   // (jwb added)
 
     // Run our own SROA on heap objects before LLVM's
-    PM->add(createAllocOptPass());
+    //PM->add(createAllocOptPass());
     // Re-run SROA after loop-unrolling (useful for small loops that operate,
     // over the structure of an aggregate)
     PM->add(createSROAPass());                 // Break up aggregate allocas
@@ -219,7 +219,7 @@
     PM->add(createDeadStoreEliminationPass());  // Delete dead stores
 
     // More dead allocation (store) deletion before loop optimization
-    PM->add(createAllocOptPass());
+    //PM->add(createAllocOptPass());
     // see if all of the constant folding has exposed more loops
     // to simplification and deletion
     // this helps significantly with cleaning up iteration
--- a/src/Makefile	2019-07-14 21:13:54.655876663 +0000
+++ b/src/Makefile	2019-07-14 21:16:00.733885822 +0000
@@ -56,7 +56,7 @@
 ifeq ($(JULIACODEGEN),LLVM)
 SRCS += codegen jitlayers disasm debuginfo llvm-simdloop llvm-ptls llvm-muladd \
 	llvm-late-gc-lowering llvm-lower-handlers llvm-gc-invariant-verifier \
-	llvm-propagate-addrspaces llvm-multiversioning llvm-alloc-opt cgmemmgr \
+	llvm-propagate-addrspaces llvm-multiversioning cgmemmgr \
 	llvm-api
 FLAGS += -I$(shell $(LLVM_CONFIG_HOST) --includedir)
 LLVM_LIBS := all
