--- a/vendor/rls-analysis/src/loader.rs
+++ b/vendor/rls-analysis/src/loader.rs
@@ -88,11 +88,9 @@
             .join("save-analysis");
         // FIXME sys_root_path allows to break out of 'sandbox' - is that Ok?
         let sys_root_path = sys_root_path();
-        let target_triple = extract_target_triple(sys_root_path.as_path());
         let libs_path = sys_root_path
             .join("lib")
             .join("rustlib")
-            .join(&target_triple)
             .join("analysis");
 
         let src_path = sys_root_path
@@ -109,25 +107,6 @@
     }
 }
 
-// FIXME: This can fail when using a custom toolchain in rustup (often linked to
-// `/$rust_repo/build/$target/stage2`)
-fn extract_target_triple(sys_root_path: &Path) -> String {
-    // Extracts nightly-x86_64-pc-windows-msvc from
-    // $HOME/.rustup/toolchains/nightly-x86_64-pc-windows-msvc
-    let toolchain = sys_root_path
-        .iter()
-        .last()
-        .and_then(OsStr::to_str)
-        .expect("extracting toolchain failed");
-    // Extracts x86_64-pc-windows-msvc from nightly-x86_64-pc-windows-pc
-    let triple = toolchain
-        .splitn(2, '-')
-        .last()
-        .map(String::from)
-        .expect("extracting triple failed");
-    triple
-}
-
 fn sys_root_path() -> PathBuf {
     env::var("SYSROOT")
         .ok()
--- a/vendor/rls-analysis/.cargo-checksum.json
+++ b/vendor/rls-analysis/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.toml":"e95b04c2c224ec276b3e44d62c7604407671934211974273e3f6152217132377","README.md":"cb43c72511a74e48e5ffb3d4f0c7906e305b6144719973eac2d41558e0de58c6","benches/std_api_crate.rs":"59af236ac598390a2ebe8343f28a1ddf6975896817de318ba60367df00a04fa6","examples/print-crate-id.rs":"5b9cc4333d2a71cb46b0e33011be50d94b97a72f5fae51b434dd22b8acc10c5b","src/analysis.rs":"d23903d4e1a3eb6704224933288c51af18129de220a09c7672bb73234ab65a93","src/lib.rs":"c27897e89cc0f304885632f2645c9ba80909b81c8733ad0d2c96fc999445e9e3","src/listings/mod.rs":"b3cd49cd4ef69352f79a9a5302bde9d72c5ad192b0c06c4c1a1f1ad6dccd3f99","src/loader.rs":"59421ca15bb2b70fd1c6122a0669d93224ad54023e6c4ddf655e3d16725ae956","src/lowering.rs":"5943e932234d3067634ea2a057c515fdde108466c407643446b565fadfecdbed","src/raw.rs":"f73b850271cd85e5328ba82f9b4fee4f0b5ef6d639206e99ff4957d336f7354d","src/symbol_query.rs":"459c8150735e1739a5f513babd3f9231849dfc0d358af13841621bfaf94af7d1","src/test/mod.rs":"bffc6894c7544871cfa301fe85cc15d19f7b779eeaadb2c65cc9ec26c7ad1a1f","src/util.rs":"2b6a2a5a46f948818bafd616619242d11161971001b94a15dc071c8c43188047"},"package":"2de1187cceaf16d7642cc78835a2890b55b35ed9e8a8e3c6348a6297d8dd0fb1"}
\ No newline at end of file
+{"files":{"Cargo.toml":"e95b04c2c224ec276b3e44d62c7604407671934211974273e3f6152217132377","README.md":"cb43c72511a74e48e5ffb3d4f0c7906e305b6144719973eac2d41558e0de58c6","benches/std_api_crate.rs":"59af236ac598390a2ebe8343f28a1ddf6975896817de318ba60367df00a04fa6","examples/print-crate-id.rs":"5b9cc4333d2a71cb46b0e33011be50d94b97a72f5fae51b434dd22b8acc10c5b","src/analysis.rs":"d23903d4e1a3eb6704224933288c51af18129de220a09c7672bb73234ab65a93","src/lib.rs":"c27897e89cc0f304885632f2645c9ba80909b81c8733ad0d2c96fc999445e9e3","src/listings/mod.rs":"b3cd49cd4ef69352f79a9a5302bde9d72c5ad192b0c06c4c1a1f1ad6dccd3f99","src/loader.rs":"0eddec55bfa34e3fdbcab9a738db9d65c4c48e9c0bdc275befb56508806c08af","src/lowering.rs":"5943e932234d3067634ea2a057c515fdde108466c407643446b565fadfecdbed","src/raw.rs":"f73b850271cd85e5328ba82f9b4fee4f0b5ef6d639206e99ff4957d336f7354d","src/symbol_query.rs":"459c8150735e1739a5f513babd3f9231849dfc0d358af13841621bfaf94af7d1","src/test/mod.rs":"bffc6894c7544871cfa301fe85cc15d19f7b779eeaadb2c65cc9ec26c7ad1a1f","src/util.rs":"2b6a2a5a46f948818bafd616619242d11161971001b94a15dc071c8c43188047"},"package":"2de1187cceaf16d7642cc78835a2890b55b35ed9e8a8e3c6348a6297d8dd0fb1"}
