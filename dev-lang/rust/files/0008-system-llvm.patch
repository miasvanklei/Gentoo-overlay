--- a/src/bootstrap/compile.rs
+++ b/src/bootstrap/compile.rs
@@ -651,13 +651,6 @@
 
     match &*backend {
         "llvm" | "emscripten" => {
-            // Build LLVM for our target. This will implicitly build the
-            // host LLVM if necessary.
-            let llvm_config = builder.ensure(native::Llvm {
-                target,
-                emscripten: backend == "emscripten",
-            });
-
             if backend == "emscripten" {
                 features.push_str(" emscripten");
             }
@@ -696,13 +696,6 @@
             builder.info(&format!("Building stage{} codegen artifacts ({} -> {}, {})",
                      compiler.stage, &compiler.host, target, backend));
 
-            // Pass down configuration from the LLVM build into the build of
-            // librustc_llvm and librustc_codegen_llvm.
-            if builder.is_rust_llvm(target) && backend != "emscripten" {
-                cargo.env("LLVM_RUSTLLVM", "1");
-            }
-
-            cargo.env("LLVM_CONFIG", &llvm_config);
             if backend != "emscripten" {
                 let target_config = builder.config.target_config.get(&target);
                 if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {
--- a/src/bootstrap/test.rs
+++ b/src/bootstrap/test.rs
@@ -1016,9 +1016,7 @@
                 let llvm_version = output(Command::new(&llvm_config).arg("--version"));
                 cmd.arg("--llvm-version").arg(llvm_version);
             }
-            if !builder.is_rust_llvm(target) {
-                cmd.arg("--system-llvm");
-            }
+            cmd.arg("--system-llvm");
 
             // Only pass correct values for these flags for the `run-make` suite as it
             // requires that a C++ compiler was configured which isn't always the case.
--- a/src/bootstrap/lib.rs
+++ b/src/bootstrap/lib.rs
@@ -533,16 +533,6 @@
         self.out.join(&*target).join("crate-docs")
     }
 
-    /// Returns `true` if no custom `llvm-config` is set for the specified target.
-    ///
-    /// If no custom `llvm-config` was specified then Rust's llvm will be used.
-    fn is_rust_llvm(&self, target: Interned<String>) -> bool {
-        match self.config.target_config.get(&target) {
-            Some(ref c) => c.llvm_config.is_none(),
-            None => true
-        }
-    }
-
     /// Returns the path to `FileCheck` binary for the specified target
     fn llvm_filecheck(&self, target: Interned<String>) -> PathBuf {
         let target_config = self.config.target_config.get(&target);
--- a/src/rustllvm/PassWrapper.cpp
+++ b/src/rustllvm/PassWrapper.cpp
@@ -296,7 +296,6 @@
   report_fatal_error("Bad RelocModel.");
 }
 
-#ifdef LLVM_RUSTLLVM
 /// getLongestEntryLength - Return the length of the longest entry in the table.
 ///
 static size_t getLongestEntryLength(ArrayRef<SubtargetFeatureKV> Table) {
@@ -347,17 +347,6 @@
          "target-feature=+feature1,-feature2\n\n");
 }
 
-#else
-
-extern "C" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef) {
-  printf("Target CPU help is not supported by this LLVM version.\n\n");
-}
-
-extern "C" void LLVMRustPrintTargetFeatures(LLVMTargetMachineRef) {
-  printf("Target features help is not supported by this LLVM version.\n\n");
-}
-#endif
-
 extern "C" const char* LLVMRustGetHostCPUName(size_t *len) {
   StringRef Name = sys::getHostCPUName();
   *len = Name.size();
--- a/src/librustc_llvm/build.rs
+++ b/src/librustc_llvm/build.rs
@@ -146,11 +146,6 @@
         cfg.define(&flag, None);
     }
 
-    println!("cargo:rerun-if-changed-env=LLVM_RUSTLLVM");
-    if env::var_os("LLVM_RUSTLLVM").is_some() {
-        cfg.define("LLVM_RUSTLLVM", None);
-    }
-
     build_helper::rerun_if_changed_anything_in_dir(Path::new("../rustllvm"));
     cfg.file("../rustllvm/PassWrapper.cpp")
        .file("../rustllvm/RustWrapper.cpp")
