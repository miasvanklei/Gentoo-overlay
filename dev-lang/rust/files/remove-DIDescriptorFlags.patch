From 3e1e4a49bb89526db16151a6cdf6950a140c6415 Mon Sep 17 00:00:00 2001
From: Jake Goulding <jake.goulding@gmail.com>
Date: Sat, 24 Sep 2016 12:36:50 -0400
Subject: [PATCH] [4.0] Remove DIDescriptorFlags

LLVM 4.0 changes these from an integer to a bitmask. Instead of trying
to handle all the versions, I realized that we were hardcoding the
values anyway, so I hardcoded them at a lower level.
---
 src/librustc_llvm/ffi.rs                 | 26 --------------------
 src/librustc_trans/debuginfo/metadata.rs | 18 --------------
 src/librustc_trans/debuginfo/mod.rs      |  5 +---
 src/rustllvm/RustWrapper.cpp             | 42 +++++++++++++++++++++++++++-----
 4 files changed, 37 insertions(+), 54 deletions(-)

diff --git a/src/librustc_llvm/ffi.rs b/src/librustc_llvm/ffi.rs
index b877b5f..8761e6b 100644
--- a/src/librustc_llvm/ffi.rs
+++ b/src/librustc_llvm/ffi.rs
@@ -433,7 +433,6 @@
 pub type InlineAsmDiagHandler = unsafe extern "C" fn(SMDiagnosticRef, *const c_void, c_uint);
 
 pub mod debuginfo {
-    pub use self::DIDescriptorFlags::*;
     use super::{MetadataRef};
 
     #[allow(missing_copy_implementations)]
@@ -457,26 +456,6 @@
     pub type DISubrange = DIDescriptor;
     pub type DIEnumerator = DIDescriptor;
     pub type DITemplateTypeParameter = DIDescriptor;
-
-    #[derive(Copy, Clone)]
-    pub enum DIDescriptorFlags {
-      FlagPrivate            = 1 << 0,
-      FlagProtected          = 1 << 1,
-      FlagFwdDecl            = 1 << 2,
-      FlagAppleBlock         = 1 << 3,
-      FlagBlockByrefStruct   = 1 << 4,
-      FlagVirtual            = 1 << 5,
-      FlagArtificial         = 1 << 6,
-      FlagExplicit           = 1 << 7,
-      FlagPrototyped         = 1 << 8,
-      FlagObjcClassComplete  = 1 << 9,
-      FlagObjectPointer      = 1 << 10,
-      FlagVector             = 1 << 11,
-      FlagStaticMember       = 1 << 12,
-      FlagIndirectVariable   = 1 << 13,
-      FlagLValueReference    = 1 << 14,
-      FlagRValueReference    = 1 << 15
-    }
 }
 
 
@@ -1592,7 +1571,6 @@ extern "C" {
                                            isLocalToUnit: bool,
                                            isDefinition: bool,
                                            ScopeLine: c_uint,
-                                           Flags: c_uint,
                                            isOptimized: bool,
                                            Fn: ValueRef,
                                            TParam: DIArray,
@@ -1620,7 +1598,6 @@ extern "C" {
                                              LineNumber: c_uint,
                                              SizeInBits: u64,
                                              AlignInBits: u64,
-                                             Flags: c_uint,
                                              DerivedFrom: DIType,
                                              Elements: DIArray,
                                              RunTimeLang: c_uint,
@@ -1636,7 +1613,6 @@ extern "C" {
                                              SizeInBits: u64,
                                              AlignInBits: u64,
                                              OffsetInBits: u64,
-                                             Flags: c_uint,
                                              Ty: DIType)
                                              -> DIDerivedType;
 
@@ -1672,7 +1648,6 @@ extern "C" {
                                            LineNo: c_uint,
                                            Ty: DIType,
                                            AlwaysPreserve: bool,
-                                           Flags: c_uint,
                                            ArgNo: c_uint)
                                            -> DIVariable;
 
@@ -1732,7 +1707,6 @@ extern "C" {
                                             LineNumber: c_uint,
                                             SizeInBits: u64,
                                             AlignInBits: u64,
-                                            Flags: c_uint,
                                             Elements: DIArray,
                                             RunTimeLang: c_uint,
                                             UniqueId: *const c_char)
diff --git a/src/librustc_trans/debuginfo/metadata.rs b/src/librustc_trans/debuginfo/metadata.rs
index 863aecc..245dff8 100644
--- a/src/librustc_trans/debuginfo/metadata.rs
+++ b/src/librustc_trans/debuginfo/metadata.rs
@@ -71,8 +71,6 @@ pub const UNKNOWN_COLUMN_NUMBER: c_uint = 0;
 // ptr::null() doesn't work :(
 pub const NO_SCOPE_METADATA: DIScope = (0 as DIScope);
 
-const FLAGS_NONE: c_uint = 0;
-
 #[derive(Copy, Debug, Hash, Eq, PartialEq, Clone)]
 pub struct UniqueTypeId(ast::Name);
 
@@ -350,14 +348,12 @@ fn vec_slice_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
             llvm_type: member_llvm_types[0],
             type_metadata: element_type_metadata,
             offset: ComputedMemberOffset,
-            flags: FLAGS_NONE
         },
         MemberDescription {
             name: "length".to_string(),
             llvm_type: member_llvm_types[1],
             type_metadata: type_metadata(cx, cx.tcx().types.usize, span),
             offset: ComputedMemberOffset,
-            flags: FLAGS_NONE
         },
     ];
 
@@ -841,7 +837,6 @@ struct MemberDescription {
     llvm_type: Type,
     type_metadata: DIType,
     offset: MemberOffset,
-    flags: c_uint
 }
 
 // A factory for MemberDescriptions. It produces a list of member descriptions
@@ -925,7 +920,6 @@ impl<'tcx> StructMemberDescriptionFactory<'tcx> {
                 llvm_type: type_of::type_of(cx, fty),
                 type_metadata: type_metadata(cx, fty, self.span),
                 offset: offset,
-                flags: FLAGS_NONE,
             }
         }).collect()
     }
@@ -990,7 +984,6 @@ impl<'tcx> TupleMemberDescriptionFactory<'tcx> {
                 llvm_type: type_of::type_of(cx, component_type),
                 type_metadata: type_metadata(cx, component_type, self.span),
                 offset: ComputedMemberOffset,
-                flags: FLAGS_NONE,
             }
         }).collect()
     }
@@ -1140,7 +1132,6 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {
                             llvm_type: variant_llvm_type,
                             type_metadata: variant_type_metadata,
                             offset: FixedMemberOffset { bytes: 0 },
-                            flags: FLAGS_NONE
                         }
                     }).collect()
             },
@@ -1174,7 +1165,6 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {
                             llvm_type: variant_llvm_type,
                             type_metadata: variant_type_metadata,
                             offset: FixedMemberOffset { bytes: 0 },
-                            flags: FLAGS_NONE
                         }
                     ]
                 }
@@ -1211,7 +1201,6 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {
                     llvm_type: non_null_llvm_type,
                     type_metadata: non_null_type_metadata,
                     offset: FixedMemberOffset { bytes: 0 },
-                    flags: FLAGS_NONE
                 };
 
                 let unique_type_id = debug_context(cx).type_map
@@ -1248,7 +1237,6 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {
                         llvm_type: artificial_struct_llvm_type,
                         type_metadata: artificial_struct_metadata,
                         offset: FixedMemberOffset { bytes: 0 },
-                        flags: FLAGS_NONE
                     }
                 ]
             },
@@ -1292,7 +1280,6 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {
                         llvm_type: variant_llvm_type,
                         type_metadata: variant_type_metadata,
                         offset: FixedMemberOffset { bytes: 0 },
-                        flags: FLAGS_NONE
                     }
                 ]
             },
@@ -1321,7 +1308,6 @@ impl<'tcx> VariantMemberDescriptionFactory<'tcx> {
                     _ => type_metadata(cx, ty, self.span)
                 },
                 offset: ComputedMemberOffset,
-                flags: FLAGS_NONE
             }
         }).collect()
     }
@@ -1541,7 +1527,6 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
         UNKNOWN_LINE_NUMBER,
         bytes_to_bits(enum_type_size),
         bytes_to_bits(enum_type_align),
-        0, // Flags
         ptr::null_mut(),
         0, // RuntimeLang
         unique_type_id_str.as_ptr())
@@ -1644,7 +1629,6 @@ fn set_members_of_composite_type(cx: &CrateContext,
                     bytes_to_bits(member_size),
                     bytes_to_bits(member_align),
                     bytes_to_bits(member_offset),
-                    member_description.flags,
                     member_description.type_metadata)
             }
         })
@@ -1687,7 +1671,6 @@ fn create_struct_stub(cx: &CrateContext,
             UNKNOWN_LINE_NUMBER,
             bytes_to_bits(struct_size),
             bytes_to_bits(struct_align),
-            0,
             ptr::null_mut(),
             empty_array,
             0,
@@ -1895,7 +1894,6 @@
             UNKNOWN_LINE_NUMBER,
             bytes_to_bits(union_size),
             bytes_to_bits(union_align),
-            0, // Flags
             empty_array,
             0, // RuntimeLang
             unique_type_id.as_ptr())
diff --git a/src/librustc_trans/debuginfo/mod.rs b/src/librustc_trans/debuginfo/mod.rs
index 3bc5f4f..e865f52 100644
--- a/src/librustc_trans/debuginfo/mod.rs
+++ b/src/librustc_trans/debuginfo/mod.rs
@@ -22,8 +22,7 @@ use self::source_loc::InternalDebugLocation::{self, UnknownLocation};
 
 use llvm;
 use llvm::{ModuleRef, ContextRef, ValueRef};
-use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArray,
-                      FlagPrototyped};
+use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArray};
 use rustc::hir::def_id::DefId;
 use rustc::hir::map::DefPathData;
 use rustc::ty::subst::Substs;
@@ -289,7 +288,6 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
             is_local_to_unit,
             true,
             scope_line as c_uint,
-            FlagPrototyped as c_uint,
             cx.sess().opts.optimize != config::OptLevel::No,
             llfn,
             template_parameters,
@@ -481,7 +479,6 @@ pub fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
                     loc.line as c_uint,
                     type_metadata,
                     cx.sess().opts.optimize != config::OptLevel::No,
-                    0,
                     argument_index)
             };
             source_loc::set_debug_location(cx, None,
diff --git a/src/rustllvm/RustWrapper.cpp b/src/rustllvm/RustWrapper.cpp
index 369388c..b9862cb 100644
--- a/src/rustllvm/RustWrapper.cpp
+++ b/src/rustllvm/RustWrapper.cpp
@@ -411,11 +411,16 @@ extern "C" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(
     bool isLocalToUnit,
     bool isDefinition,
     unsigned ScopeLine,
-    unsigned Flags,
     bool isOptimized,
     LLVMValueRef Fn,
     LLVMRustMetadataRef TParam,
     LLVMRustMetadataRef Decl) {
+#if LLVM_VERSION_GE(4, 0)
+  auto Flags = DINode::FlagPrototyped;
+#else
+  unsigned Flags = 0;
+#endif
+
 #if LLVM_VERSION_GE(3, 8)
     DITemplateParameterArray TParams =
         DITemplateParameterArray(unwrap<MDTuple>(TParam));
@@ -448,7 +453,8 @@ extern "C" LLVMRustMetadataRef LLVMRustDIBuilderCreateBasicType(
     unsigned Encoding) {
     return wrap(Builder->createBasicType(
         Name, SizeInBits,
-        AlignInBits, Encoding));
+        //AlignInBits,
+        Encoding));
 }
 
 extern "C" LLVMRustMetadataRef LLVMRustDIBuilderCreatePointerType(
@@ -469,12 +475,17 @@ extern "C" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(
     unsigned LineNumber,
     uint64_t SizeInBits,
     uint64_t AlignInBits,
-    unsigned Flags,
     LLVMRustMetadataRef DerivedFrom,
     LLVMRustMetadataRef Elements,
     unsigned RunTimeLang,
     LLVMRustMetadataRef VTableHolder,
     const char *UniqueId) {
+#if LLVM_VERSION_GE(4, 0)
+  auto Flags = DINode::FlagZero;
+#else
+  unsigned Flags = 0;
+#endif
+
     return wrap(Builder->createStructType(
         unwrapDI<DIDescriptor>(Scope),
         Name,
@@ -500,8 +511,13 @@ extern "C" LLVMRustMetadataRef LLVMRustDIBuilderCreateMemberType(
     uint64_t SizeInBits,
     uint64_t AlignInBits,
     uint64_t OffsetInBits,
-    unsigned Flags,
     LLVMRustMetadataRef Ty) {
+#if LLVM_VERSION_GE(4, 0)
+  auto Flags = DINode::FlagZero;
+#else
+  unsigned Flags = 0;
+#endif
+
     return wrap(Builder->createMemberType(
         unwrapDI<DIDescriptor>(Scope), Name,
         unwrapDI<DIFile>(File), LineNo,
@@ -548,7 +564,11 @@ extern "C" LLVMRustMetadataRef LLVMRustDIBuilderCreateStaticVariable(
         LineNo,
         unwrapDI<DIType>(Ty),
         isLocalToUnit,
+#if LLVM_VERSION_GE(4,0)
+        unwrapDI<DIExpression>(Val),
+#else
         cast<Constant>(unwrap(Val)),
+#endif
         unwrapDIptr<MDNode>(Decl)));
 }
 
@@ -561,8 +581,13 @@ extern "C" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(
     unsigned LineNo,
     LLVMRustMetadataRef Ty,
     bool AlwaysPreserve,
-    unsigned Flags,
     unsigned ArgNo) {
+#if LLVM_VERSION_GE(4, 0)
+  auto Flags = DINode::FlagZero;
+#else
+  unsigned Flags = 0;
+#endif
+
 #if LLVM_VERSION_GE(3, 8)
     if (Tag == 0x100) { // DW_TAG_auto_variable
         return wrap(Builder->createAutoVariable(
@@ -681,11 +706,16 @@ extern "C" LLVMRustMetadataRef LLVMRustDIBuilderCreateUnionType(
     unsigned LineNumber,
     uint64_t SizeInBits,
     uint64_t AlignInBits,
-    unsigned Flags,
     LLVMRustMetadataRef Elements,
     unsigned RunTimeLang,
     const char* UniqueId)
 {
+#if LLVM_VERSION_GE(4, 0)
+  auto Flags = DINode::FlagZero;
+#else
+  unsigned Flags = 0;
+#endif
+
     return wrap(Builder->createUnionType(
         unwrapDI<DIDescriptor>(Scope),
         Name,
--- a/src/librustc_trans/debuginfo/metadata.rs	2016-11-10 18:29:03.356011869 +0100
+++ b/src/librustc_trans/debuginfo/metadata.rs	2016-11-10 18:29:18.630957536 +0100
@@ -1221,7 +1221,6 @@
                 llvm_type: type_of::type_of(cx, fty),
                 type_metadata: type_metadata(cx, fty, self.span),
                 offset: FixedMemberOffset { bytes: 0 },
-                flags: FLAGS_NONE,
             }
         }).collect()
     }
