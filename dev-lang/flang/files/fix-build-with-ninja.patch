diff --git a/CMakeLists.txt b/CMakeLists.txt
index e49be68c..a3289800 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -292,24 +292,26 @@ if (APPLE)
   set(CMAKE_MODULE_LINKER_FLAGS "-Wl,-flat_namespace -Wl,-undefined -Wl,suppress")
 endif ()
 
-macro(add_flang_library name)
-  llvm_process_sources(srcs ${ARGN})
+macro(add_flang_objects name)
+  add_library( ${name} OBJECT ${ARGN} )
+  llvm_update_compile_flags(${name} ${ARGN})
+  if( LLVM_COMMON_DEPENDS )
+    add_dependencies( ${name} ${LLVM_COMMON_DEPENDS} )
+  endif( LLVM_COMMON_DEPENDS )
+
+  llvm_config( ${name} ${LLVM_LINK_COMPONENTS} )
+endmacro(add_flang_objects)
+
+macro(add_flang_library name objectname)
   if (MODULE)
     set(libkind MODULE)
   elseif (SHARED_LIBRARY)
     set(libkind SHARED)
   else()
-    set(libkind)
+    set(libkind STATIC)
   endif()
-  add_library( ${name} ${libkind} ${srcs} )
-  llvm_update_compile_flags(${name} ${srcs})
-  if( LLVM_COMMON_DEPENDS )
-    add_dependencies( ${name} ${LLVM_COMMON_DEPENDS} )
-  endif( LLVM_COMMON_DEPENDS )
-
-  llvm_config( ${name} ${LLVM_LINK_COMPONENTS} )
+  add_library( ${name} ${libkind} $<TARGET_OBJECTS:${objectname}>)
   target_link_libraries( ${name} ${LLVM_COMMON_LIBS} )
-#  link_system_libs( ${name} )  # getd of cmake warning messages
 
   install(TARGETS ${name}
     LIBRARY DESTINATION lib${LLVM_LIBDIR_SUFFIX}
diff --git a/lib/ADT/CMakeLists.txt b/lib/ADT/CMakeLists.txt
index d8f41fad..e807f0f0 100644
--- a/lib/ADT/CMakeLists.txt
+++ b/lib/ADT/CMakeLists.txt
@@ -4,6 +4,8 @@
 # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
 #
 
-add_flang_library(flangADT
-  hash.c
+add_flang_objects(flangADTObject
+ hash.c
 )
+
+add_flang_library(flangADT flangADTObject)
diff --git a/lib/ArgParser/CMakeLists.txt b/lib/ArgParser/CMakeLists.txt
index 0a49654c..237fbfc8 100644
--- a/lib/ArgParser/CMakeLists.txt
+++ b/lib/ArgParser/CMakeLists.txt
@@ -4,12 +4,17 @@
 # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
 #
 
-add_flang_library(flangArgParser
+add_flang_objects(flangArgParserObject
   arg_parser.c
   debug_action.c
   xflag.c
 )
 
+
+add_flang_library(flangArgParser
+  flangArgParserObject
+)
+
 target_link_libraries(flangArgParser
   flangADT
 )
diff --git a/lib/scutil/CMakeLists.txt b/lib/scutil/CMakeLists.txt
index ada03055..30bb3689 100644
--- a/lib/scutil/CMakeLists.txt
+++ b/lib/scutil/CMakeLists.txt
@@ -4,7 +4,7 @@
 # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
 #
 
-add_library(scutil
+add_library(scutil STATIC
  default-fperror.c
  host-fp-folding.c
  int128.c
diff --git a/runtime/flang/CMakeLists.txt b/runtime/flang/CMakeLists.txt
index 4b775a15..31504e86 100644
--- a/runtime/flang/CMakeLists.txt
+++ b/runtime/flang/CMakeLists.txt
@@ -470,7 +493,7 @@ LIST(APPEND FTN_SUPPORT_I8
 "${I8_FILES_DIR}/norm2_1.F95"
 )
 
-add_flang_library(flang_static
+add_flang_objects(flang_objects
   ${FTN_INTRINSICS_DESC_INDEP}
   ${FTN_INTRINSICS_DESC_DEP}
   ${FTN_INTRINSICS_I8}
@@ -479,6 +502,9 @@ add_flang_library(flang_static
   ${FTN_SUPPORT_I8}
   ${SHARED_SOURCES}
   )
+add_flang_library(flang_static
+  flang_objects
+  )
 if (MSVC)
   set_property(TARGET flang_static PROPERTY OUTPUT_NAME libflang)
 else()
@@ -487,13 +513,7 @@ endif()
 
 set(SHARED_LIBRARY TRUE)
 add_flang_library(flang_shared
-  ${FTN_INTRINSICS_DESC_INDEP}
-  ${FTN_INTRINSICS_DESC_DEP}
-  ${FTN_INTRINSICS_I8}
-  ${FTN_SUPPORT_DESC_INDEP}
-  ${FTN_SUPPORT_DESC_DEP}
-  ${FTN_SUPPORT_I8}
-  ${SHARED_SOURCES}
+  flang_objects
   )
 set_property(TARGET flang_shared PROPERTY OUTPUT_NAME flang)
 
@@ -635,39 +655,22 @@ set_target_properties(flang_static flang_shared
   ARCHIVE_OUTPUT_DIRECTORY ${FLANG_RTE_LIB_DIR}
   )
 
-target_include_directories(flang_static
-  PRIVATE
-  ${CMAKE_CURRENT_SOURCE_DIR}
-  ${CMAKE_CURRENT_BINARY_DIR}
-  )
-
-target_include_directories(flang_shared
+target_include_directories(flang_objects
   PRIVATE
   ${CMAKE_CURRENT_SOURCE_DIR}
   ${CMAKE_CURRENT_BINARY_DIR}
   )
 
 # Make sure the compiler is built before we bootstrap
-add_dependencies(flang_static
-  flang1
-  flang2
-  )
-
-# Make sure the compiler is built before we bootstrap
-add_dependencies(flang_shared
+add_dependencies(flang_objects
   flang1
   flang2
   )
 
 if (NOT MSVC)
-  target_compile_options(flang_static PRIVATE -fPIC)
-  target_compile_options(flang_shared PRIVATE -fPIC)
+  target_compile_options(flang_objects PRIVATE -fPIC)
 else()
-  set_target_properties(flang_static PROPERTIES LINKER_LANGUAGE CXX)
-  set_target_properties(flang_shared PROPERTIES LINKER_LANGUAGE CXX)
+  set_target_properties(flang_objects PROPERTIES LINKER_LANGUAGE CXX)
 endif()
 
-target_compile_options(flang_static PUBLIC $<$<COMPILE_LANGUAGE:Fortran>:-Mreentrant>)
-
-target_compile_options(flang_shared PUBLIC $<$<COMPILE_LANGUAGE:Fortran>:-Mreentrant>)
-
+target_compile_options(flang_objects PUBLIC $<$<COMPILE_LANGUAGE:Fortran>:-Mreentrant>)
diff --git a/runtime/flangmain/CMakeLists.txt b/runtime/flangmain/CMakeLists.txt
index 2a6ccf5f..b5d8e1dc 100644
--- a/runtime/flangmain/CMakeLists.txt
+++ b/runtime/flangmain/CMakeLists.txt
@@ -8,9 +8,12 @@ enable_language(C)
 
 # Entry point for Fortran programs
 
-add_flang_library(flangmain
-  STATIC
+add_flang_objects(flangmainobject
   flangmain.c
+)
+
+add_flang_library(flangmain
+  flangmainobject
   )
 
 set_property(
diff --git a/runtime/flangrti/CMakeLists.txt b/runtime/flangrti/CMakeLists.txt
index d99c3a5e..bb7b4eb0 100644
--- a/runtime/flangrti/CMakeLists.txt
+++ b/runtime/flangrti/CMakeLists.txt
@@ -58,10 +58,14 @@ SET(PGC_SRC_FILES
   llcrit.c
   )
 
-add_flang_library(flangrti_static
+add_flang_objects(flangrti_objects
   ${PGC_SRC_FILES}
   ${SHARED_SOURCES}
   )
+
+add_flang_library(flangrti_static
+  flangrti_objects
+  )
 if (MSVC)
   set_property(TARGET flangrti_static PROPERTY OUTPUT_NAME libflangrti)
 else()
@@ -71,8 +75,7 @@ endif()
 
 set(SHARED_LIBRARY TRUE)
 add_flang_library(flangrti_shared
-  ${PGC_SRC_FILES}
-  ${SHARED_SOURCES}
+  flangrti_objects
   )
 
 # Resolve symbols against libm
@@ -103,23 +106,15 @@ find_library(
 target_link_libraries(flangrti_shared PRIVATE ${LIBPGMATH})
 
 if( ${TARGET_ARCHITECTURE} STREQUAL "aarch64" )
-  target_compile_definitions(flangrti_static PRIVATE TARGET_LINUX_ARM)
-  target_compile_definitions(flangrti_shared PRIVATE TARGET_LINUX_ARM)
+  target_compile_definitions(flangrti_objects PRIVATE TARGET_LINUX_ARM)
 elseif( ${TARGET_ARCHITECTURE} STREQUAL "ppc64le" )
-  target_compile_definitions(flangrti_static PRIVATE TARGET_LINUX_POWER)
-  target_compile_definitions(flangrti_shared PRIVATE TARGET_LINUX_POWER)
+  target_compile_definitions(flangrti_objects PRIVATE TARGET_LINUX_POWER)
 endif()
 
 set_property(TARGET flangrti_shared PROPERTY OUTPUT_NAME flangrti)
 set(SHARED_LIBRARY FALSE)
 
-target_include_directories(flangrti_static
-  PRIVATE
-  ${CMAKE_CURRENT_SOURCE_DIR}
-  ${CMAKE_CURRENT_BINARY_DIR}
-  )
-
-target_include_directories(flangrti_shared
+target_include_directories(flangrti_objects
   PRIVATE
   ${CMAKE_CURRENT_SOURCE_DIR}
   ${CMAKE_CURRENT_BINARY_DIR}
@@ -127,13 +123,9 @@ set_target_properties(flangrti_shared flangrti_static
                       PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${FLANG_RTE_LIB_DIR})
 
 if (NOT MSVC)
-  target_compile_options(flangrti_static PRIVATE -fPIC)
-  target_compile_options(flangrti_shared PRIVATE -fPIC)
+  target_compile_options(flangrti_objects PRIVATE -fPIC)
 else()
-  set_target_properties(flangrti_shared PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
+  set_target_properties(flangrti_objects PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
 endif()
 
-target_compile_options(flangrti_static PUBLIC $<$<COMPILE_LANGUAGE:Fortran>:-Mreentrant>)
-
-target_compile_options(flangrti_shared PUBLIC $<$<COMPILE_LANGUAGE:Fortran>:-Mreentrant>)
-
+target_compile_options(flangrti_objects PUBLIC $<$<COMPILE_LANGUAGE:Fortran>:-Mreentrant>)
diff --git a/runtime/ompstub/CMakeLists.txt b/runtime/ompstub/CMakeLists.txt
index 9b3890ac..14177d26 100644
--- a/runtime/ompstub/CMakeLists.txt
+++ b/runtime/ompstub/CMakeLists.txt
@@ -6,7 +6,8 @@
 
 set(OMPSTUB_SRC init_nomp.c  ompstubs.c)
 
-add_flang_library(ompstub_static ${OMPSTUB_SRC})
+add_flang_objects(ompstub_object ${OMPSTUB_SRC})
+add_flang_library(ompstub_static ompstub_object)
 if (MSVC)
   set_property(TARGET ompstub_static PROPERTY OUTPUT_NAME libompstub)
 else()
@@ -14,7 +15,7 @@ else()
 endif()
 
 set(SHARED_LIBRARY TRUE)
-add_flang_library(ompstub_shared ${OMPSTUB_SRC})
+add_flang_library(ompstub_shared ompstub_object)
 set_property(TARGET ompstub_shared PROPERTY OUTPUT_NAME ompstub)
 if (MSVC)
   set_target_properties(ompstub_shared PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
