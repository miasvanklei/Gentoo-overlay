diff --git a/runtime/flang/CMakeLists.txt b/runtime/flang/CMakeLists.txt
index a38de60..00b4aec 100644
--- a/runtime/flang/CMakeLists.txt
+++ b/runtime/flang/CMakeLists.txt
@@ -14,7 +14,7 @@
 # limitations under the License.
 #
 
-enable_language(C ASM Fortran) # Enable assembly and Fortran
+enable_language(C Fortran) # Enable assembly and Fortran
 
 SET(ASM_OPTIONS "-DLINUX_ELF")
 SET(CMAKE_ASM_FLAGS "${CFLAGS} ${ASM_OPTIONS}" )
@@ -428,6 +428,12 @@ target_link_libraries(flang_shared ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib/l
 # Resolve symbols against libm and librt
 target_link_libraries(flang_shared m rt)
 
+find_library(
+  LIBPGMATH
+  libpgmath.so
+  HINTS ${CMAKE_BINARY_DIR}/lib)
+target_link_libraries(flang_shared ${LIBPGMATH})
+
 set(SHARED_LIBRARY FALSE)
 
 set_property(
diff --git a/runtime/flang/hand.c b/runtime/flang/hand.c
index bc8b0b6..86335e9 100644
--- a/runtime/flang/hand.c
+++ b/runtime/flang/hand.c
@@ -15,7 +15,7 @@
  *
  */
 
-#include <sys/signal.h>
+#include <signal.h>
 #include "stdioInterf.h"
 #include "fioMacros.h"
 
diff --git a/runtime/flangrti/iostdinit.c b/runtime/flangrti/iostdinit.c
index c2e5ad1..7b1874b 100644
--- a/runtime/flangrti/iostdinit.c
+++ b/runtime/flangrti/iostdinit.c
@@ -160,7 +160,7 @@ __io_ferror(void *p)
 int
 __io_getfd(void *fp)
 {
-  return (((FILE *)fp)->_fileno);
+  return fileno((FILE *)fp);
 }
 
 /* is a tty? */
diff --git a/runtime/flangrti/ktrap.c b/runtime/flangrti/ktrap.c
index 75676d7..6e3830a 100644
--- a/runtime/flangrti/ktrap.c
+++ b/runtime/flangrti/ktrap.c
@@ -35,6 +35,7 @@ extern int __ktrapval __attribute__ ((weak));
 void
 __ktrap(void)
 {
+#ifdef __GLIBC__
   if (&__ktrapval != 0) {
     int bv = __ktrapval;
     if (bv != 0) {
@@ -63,6 +64,7 @@ __ktrap(void)
       feenableexcept(excepts);  /* glibc 2.2 extension to fenv.h */
     }
   }
+#endif
 }
 
 #else
diff --git a/runtime/flangrti/x86_64-Linux/flt_env.c b/runtime/flangrti/x86_64-Linux/flt_env.c
index 5e63f1c..97af983 100644
--- a/runtime/flangrti/x86_64-Linux/flt_env.c
+++ b/runtime/flangrti/x86_64-Linux/flt_env.c
@@ -511,19 +511,19 @@ __fenv_feraiseexcept(int exc)
 int
 __fenv_feenableexcept(int exc)
 {
-  return feenableexcept(exc);
+  return 0;
 }
 
 int
 __fenv_fedisableexcept(int exc)
 {
-  return fedisableexcept(exc);
+  return 0;
 }
 
 int
 __fenv_fegetexcept(void)
 {
-  return fegetexcept();
+  return 0;
 }
 
 int
diff --git a/runtime/flangrti/trace_lin.c b/runtime/flangrti/trace_lin.c
index c34fda0..1b72b90 100644
--- a/runtime/flangrti/trace_lin.c
+++ b/runtime/flangrti/trace_lin.c
@@ -17,7 +17,6 @@
 
 #include <signal.h>
 #include <sys/ucontext.h>
-#include <execinfo.h>
 #include <stdioInterf.h>
 #include "dumpregs.h"
 #include <stdlib.h>
@@ -89,81 +88,12 @@ static struct sigs sigs[] = {
 
 static gregset_t *regs; /* pointer to regs at signal  */
 
-extern char **__io_get_argv();
-static char ** saved_argv;
-
-/* walk the stack back */
-
-#define MAXTRACE (32 * 1024)
-
-void
-print_back_trace_line(char * bt_str, void const * const addr)
-{
-  char addr2line_cmd[512], cmd_out[1024];
-  char *ptr_qmark, *ptr_colon, *ptr_lparen, *ptr_rparen, *ptr_plus;
-  static char buffer[4096];
-  FILE *fp;
-
-  saved_argv = __io_get_argv();
-  sprintf(addr2line_cmd,"addr2line -e %s %p", saved_argv[0], addr);
-
-  fp = popen(addr2line_cmd, "r");
-  if (fp != NULL) {
-    if (fgets(cmd_out, sizeof(cmd_out) - 1, fp) != NULL) {
-      if (cmd_out[strlen(cmd_out) - 1] == '\n')
-        cmd_out[strlen(cmd_out) - 1] = '\0';
-      ptr_qmark = strchr(cmd_out, '?');
-      ptr_colon = strchr(cmd_out, ':');
-      ptr_lparen=strchr(bt_str, '(');
-      ptr_rparen=strchr(bt_str, ')');
-      if (ptr_lparen != NULL && ptr_lparen != NULL && ptr_lparen < ptr_rparen)
-        ptr_plus = strchr(ptr_lparen, '+');
-      if(ptr_qmark != NULL) {
-        fprintf(__io_stderr(), "  %s\n", bt_str);
-      } else if (ptr_colon != NULL && ptr_plus != NULL && ptr_plus < ptr_rparen) {
-        /* replace offset by line number */
-        strncpy(buffer, bt_str, ptr_plus - bt_str);
-        sprintf(buffer + (ptr_plus - bt_str), "%s%s", ptr_colon, ptr_rparen);
-        fprintf(__io_stderr(), "  %s\n", buffer);
-      }
-    } else {
-      fprintf(__io_stderr(), "  %s\n", bt_str);
-    }
-    fclose(fp);
-  } else {
-    fprintf(__io_stderr(), "  %s\n", bt_str);
-  }
-}
-
 void
 __abort_trace(int skip)
 {
-  void *array[MAXTRACE];
-  size_t size;
-  char **strings;
-  size_t i;
-
   if (regs != (gregset_t *)0) {
     dumpregs(regs);
   }
-
-  size = backtrace(array, MAXTRACE);
-  if (skip + 1 >= size) {
-    fprintf(__io_stderr(), "  --- traceback not available\n");
-    return;
-  }
-  strings = backtrace_symbols(array, size);
-  if (size < 100) {
-    for (i = skip + 1; i < size; i++)
-      print_back_trace_line(strings[i], array[i]);
-  } else {
-    for (i = skip + 1; i < 40; i++)
-      print_back_trace_line(strings[i], array[i]);
-    fprintf(__io_stderr(), "  --- skipping traceback entries\n");
-    for (i = size - 40; i < size; i++)
-      print_back_trace_line(strings[i], array[i]);
-  }
-  free(strings);
 }
 
 /*
@@ -235,5 +165,3 @@ __abort_sig_init(void)
     n++;
   }
 }
-
-
