--- a/runtime/flang/CMakeLists.txt
+++ b/runtime/flang/CMakeLists.txt
@@ -14,7 +14,7 @@
 # limitations under the License.
 #
 
-enable_language(C ASM Fortran) # Enable assembly and Fortran
+enable_language(C Fortran) # Enable assembly and Fortran
 
 SET(ASM_OPTIONS "-DLINUX_ELF")
 SET(CMAKE_ASM_FLAGS "${CFLAGS} ${ASM_OPTIONS}" )
diff --git a/runtime/flang/hand.c b/runtime/flang/hand.c
index bc8b0b6..86335e9 100644
--- a/runtime/flang/hand.c
+++ b/runtime/flang/hand.c
@@ -15,7 +15,7 @@
  *
  */
 
-#include <sys/signal.h>
+#include <signal.h>
 #include "stdioInterf.h"
 #include "fioMacros.h"
 
--- a/runtime/flangrti/iostdinit.c
+++ b/runtime/flangrti/iostdinit.c
@@ -160,7 +160,7 @@ __io_ferror(void *p)
 int
 __io_getfd(void *fp)
 {
-  return (((FILE *)fp)->_fileno);
+  return fileno((FILE *)fp);
 }
 
 /* is a tty? */
--- a/runtime/flangrti/ktrap.c
+++ b/runtime/flangrti/ktrap.c
@@ -35,6 +35,7 @@ extern int __ktrapval __attribute__ ((weak));
 void
 __ktrap(void)
 {
+#ifdef __GLIBC__
   if (&__ktrapval != 0) {
     int bv = __ktrapval;
     if (bv != 0) {
@@ -63,6 +64,7 @@ __ktrap(void)
       feenableexcept(excepts);  /* glibc 2.2 extension to fenv.h */
     }
   }
+#endif
 }
 
 #else
--- a/runtime/flangrti/x86_64-Linux/flt_env.c
+++ b/runtime/flangrti/x86_64-Linux/flt_env.c
@@ -511,19 +511,19 @@ __fenv_feraiseexcept(int exc)
 int
 __fenv_feenableexcept(int exc)
 {
-  return feenableexcept(exc);
+  return 0;
 }
 
 int
 __fenv_fedisableexcept(int exc)
 {
-  return fedisableexcept(exc);
+  return 0;
 }
 
 int
 __fenv_fegetexcept(void)
 {
-  return fegetexcept();
+  return 0;
 }
 
 int
--- a/runtime/flangrti/aarch64-Linux/flt_env.c
+++ b/runtime/flangrti/aarch64-Linux/flt_env.c
@@ -21,7 +21,7 @@
 
 #include <stdint.h>
 #include <fenv.h>
-#include <fpu_control.h>
+//#include <fpu_control.h>
 
 int
 __fenv_fegetround(void)
@@ -68,19 +68,19 @@ __fenv_feraiseexcept(int exc)
 int
 __fenv_feenableexcept(int exc)
 {
-  return feenableexcept(exc);
+  return 0;
 }
 
 int
 __fenv_fedisableexcept(int exc)
 {
-  return fedisableexcept(exc);
+  return 0;
 }
 
 int
 __fenv_fegetexcept(void)
 {
-  return fegetexcept();
+  return 0;
 }
 
 int
@@ -115,14 +115,14 @@ __fenv_feupdateenv(fenv_t *env)
 int
 __fenv_fesetzerodenorm(int uflow)
 {
-  uint64_t cw;
+  fenv_t fenv;
 
-  _FPU_GETCW(cw);
+  fegetenv(&fenv);
   if (uflow)
-    cw |= (1ULL << 24);
+    fenv.__fpcr |= (1ULL << 24);
   else
-    cw &= ~(1ULL << 24);
-  _FPU_SETCW(cw);
+    fenv.__fpcr &= ~(1ULL << 24);
+  fesetenv(&fenv);
   return 0;
 }
 
@@ -133,10 +133,11 @@ __fenv_fesetzerodenorm(int uflow)
 int
 __fenv_fegetzerodenorm(void)
 {
-  uint64_t cw;
+  fenv_t fenv;
 
-  _FPU_GETCW(cw);
-  return (cw & (1ULL << 24)) ? 1 : 0;
+  fegetenv(&fenv);
+
+  return (fenv.__fpcr & (1ULL << 24)) ? 1 : 0;
 }
 
 /** \brief
@@ -150,16 +151,16 @@ __fenv_fegetzerodenorm(void)
 void
 __fenv_mask_fz(int mask, int *psv)
 {
-  uint64_t tmp;
+  fenv_t fenv;
 
-  _FPU_GETCW(tmp);
+  fegetenv(&fenv);
   if (psv)
-    *psv = ((tmp & (1ULL << 24)) ? 1 : 0);
+    *psv = ((fenv.__fpcr & (1ULL << 24)) ? 1 : 0);
   if (mask)
-    tmp |= (1ULL << 24);
+   fenv.__fpcr |= (1ULL << 24);
   else
-    tmp &= ~(1ULL << 24);
-  _FPU_SETCW(tmp);
+    fenv.__fpcr &= ~(1ULL << 24);
+  fesetenv(&fenv);
 }
 
 /** \brief
@@ -168,12 +169,13 @@ __fenv_mask_fz(int mask, int *psv)
 void
 __fenv_restore_fz(int sv)
 {
-  uint64_t tmp;
+  fenv_t fenv;
+
+  fegetenv(&fenv);
 
-  _FPU_GETCW(tmp);
   if (sv)
-    tmp |= (1ULL << 24);
+    fenv.__fpcr |= (1ULL << 24);
   else
-    tmp &= ~(1ULL << 24);
-  _FPU_SETCW(tmp);
+    fenv.__fpcr &= ~(1ULL << 24);
+  fesetenv(&fenv);
 }
--- a/runtime/flangrti/trace_lin.c
+++ b/runtime/flangrti/trace_lin.c
@@ -18,7 +18,9 @@
 #include <stdint.h>
 #include <signal.h>
 #include <sys/ucontext.h>
+#ifdef __GLIBC__
 #include <execinfo.h>
+#endif
 #include <stdioInterf.h>
 #include "dumpregs.h"
 #include <stdlib.h>
@@ -186,10 +188,13 @@ __abort_trace(int skip)
     dumpregs(regs);
   }
 
+#ifdef __GLIBC__
   size = backtrace(array, MAXTRACE);
   if (skip + 1 >= size) {
+#endif
     fprintf(__io_stderr(), "  --- traceback not available\n");
     return;
+#ifdef __GLIBC__
   }
   strings = backtrace_symbols(array, size);
   if (size < 100) {
@@ -203,6 +208,7 @@ __abort_trace(int skip)
       print_back_trace_line(strings[i], array[i]);
   }
   free(strings);
+#endif
 }
 
 /*
diff --git a/tools/flang2/flang2exe/gbldefs.h b/tools/flang2/flang2exe/gbldefs.h
index bc7b0edf..718d9a25 100644
--- a/tools/flang2/flang2exe/gbldefs.h
+++ b/tools/flang2/flang2exe/gbldefs.h
@@ -25,6 +25,7 @@
 #define BE_GBLDEFS_H_
 
 #include <stdint.h>
+#include <alloca.h>
 #include "universal.h"
 #include "platform.h"
 #include "pgifeat.h"
diff --git a/runtime/flang/red_norm2.c b/runtime/flang/red_norm2.c
index 434dbd92..97e0f836 100644
--- a/runtime/flang/red_norm2.c
+++ b/runtime/flang/red_norm2.c
@@ -20,11 +20,11 @@
 #include "norm2.h"
 
 void F90_I8(stride_1_norm2_real4) (__POINT_T *src_pointer, __INT_T *size, __REAL4_T *result) {
-    F90_I8(norm2_real4) (src_pointer, size, result);
+    NORM2_REAL4 (src_pointer, size, result);
 }
 
 void F90_I8(stride_1_norm2_real8) (__POINT_T *src_pointer, __INT_T *size, __REAL8_T *result) {
-    F90_I8(norm2_real8) (src_pointer, size, result);
+    NORM2_REAL8 (src_pointer, size, result);
 }
 
 void ENTFTN(NORM2_NODIM, norm2_nodim) (__POINT_T *result, __POINT_T *src, __INT4_T * pfr, _DIST_TYPE *result_kind, F90_Desc *src_desc) {
diff --git a/tools/flang2/flang2exe/ompaccel.cpp b/tools/flang2/flang2exe/ompaccel.cpp
index f4fd18bd..fffb257b 100644
--- a/tools/flang2/flang2exe/ompaccel.cpp
+++ b/tools/flang2/flang2exe/ompaccel.cpp
@@ -2412,7 +2412,6 @@ init_test()
   init_tgtutil();
 }
 
-#endif
 /* Expander - OpenMP Accelerator Model */
  
 
@@ -2475,3 +2474,4 @@ ompaccel_tinfo_get_current_parent_devsptr(SPTR sptr)
   }
   return SPTR_NULL;
 }
+#endif
