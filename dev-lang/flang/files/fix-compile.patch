diff --git a/CMakeLists.txt b/CMakeLists.txt
index ae4320c..dfdcabe 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -23,7 +23,7 @@ cmake_minimum_required(VERSION 2.8)
 SET(CMAKE_Fortran_COMPILER_WORKS 1)
 
 if( NOT DEFINED TARGET_ARCHITECTURE )
-  execute_process(COMMAND uname -i OUTPUT_STRIP_TRAILING_WHITESPACE
+  execute_process(COMMAND uname -m OUTPUT_STRIP_TRAILING_WHITESPACE
                   OUTPUT_VARIABLE TARGET_ARCHITECTURE)
   execute_process(COMMAND uname -s OUTPUT_STRIP_TRAILING_WHITESPACE
                   OUTPUT_VARIABLE TARGET_OS)
diff --git a/runtime/flang/hand.c b/runtime/flang/hand.c
index bc8b0b6..86335e9 100644
--- a/runtime/flang/hand.c
+++ b/runtime/flang/hand.c
@@ -15,7 +15,7 @@
  *
  */
 
-#include <sys/signal.h>
+#include <signal.h>
 #include "stdioInterf.h"
 #include "fioMacros.h"
 
diff --git a/runtime/flangrti/trace_lin.c b/runtime/flangrti/trace_lin.c
index a316326..0670a67 100644
--- a/runtime/flangrti/trace_lin.c
+++ b/runtime/flangrti/trace_lin.c
@@ -17,7 +17,7 @@
 
 #include <signal.h>
 #include <sys/ucontext.h>
-#include <execinfo.h>
+//#include <execinfo.h>
 #include <stdioInterf.h>
 #include "dumpregs.h"
 
@@ -103,23 +103,8 @@ __abort_trace(int skip)
     dumpregs(regs);
   }
 
-  size = backtrace(array, MAXTRACE);
-  if (skip + 1 >= size) {
-    fprintf(__io_stderr(), "  --- traceback not available\n");
-    return;
-  }
-  strings = backtrace_symbols(array, size);
-  if (size < 100) {
-    for (i = skip + 1; i < size; i++)
-      fprintf(__io_stderr(), "  %s\n", strings[i]);
-  } else {
-    for (i = skip + 1; i < 40; i++)
-      fprintf(__io_stderr(), "  %s\n", strings[i]);
-    fprintf(__io_stderr(), "  --- skipping traceback entries\n");
-    for (i = size - 40; i < size; i++)
-      fprintf(__io_stderr(), "  %s\n", strings[i]);
-  }
-  free(strings);
+  fprintf(__io_stderr(), "  --- traceback not available\n");
+  return;
 }
 
 /*
diff --git a/tools/flang1/flang1exe/semfin.c b/tools/flang1/flang1exe/semfin.c
index 137cd3c..be5676c 100644
--- a/tools/flang1/flang1exe/semfin.c
+++ b/tools/flang1/flang1exe/semfin.c
@@ -1455,7 +1455,7 @@ do_equiv(void)
       SOCPTRP(sptr, 0);
     }
     maxa = size = 0;
-    saveflg = sem.savall | (!flg.recursive & 1);
+    saveflg = sem.savall | (!(flg.recursive & 1));
     nmld = vold = dinitd = FALSE;
     for (sptr = psect_base[ps].memlist; sptr != NOSYM; sptr = SYMLKG(sptr)) {
       assert(sptr, "equiv:bsym", 1, 3);
diff --git a/tools/flang2/flang2exe/ll_write.c b/tools/flang2/flang2exe/ll_write.c
index ab27ba7..93aecc0 100644
--- a/tools/flang2/flang2exe/ll_write.c
+++ b/tools/flang2/flang2exe/ll_write.c
@@ -423,7 +423,7 @@ ll_write_instruction(FILE *out, struct LL_Instruction_ *inst)
       }
     }
     fprintf(out, ")");
-    if (!inst->flags & IN_MODULE_CALL) {
+    if (!(inst->flags & IN_MODULE_CALL)) {
       add_prototype(inst);
     }
     break;
diff --git a/runtime/flangrti/iostdinit.c b/runtime/flangrti/iostdinit.c
index c2e5ad1..7b1874b 100644
--- a/runtime/flangrti/iostdinit.c
+++ b/runtime/flangrti/iostdinit.c
@@ -160,7 +160,7 @@ __io_ferror(void *p)
 int
 __io_getfd(void *fp)
 {
-  return (((FILE *)fp)->_fileno);
+  return fileno((FILE *)fp);
 }
 
 /* is a tty? */
diff --git a/runtime/flangrti/x86_64-Linux/flt_env.c b/runtime/flangrti/x86_64-Linux/flt_env.c
index aeeb05a..94be815 100644
--- a/runtime/flangrti/x86_64-Linux/flt_env.c
+++ b/runtime/flangrti/x86_64-Linux/flt_env.c
@@ -608,19 +608,19 @@ __fenv_feraiseexcept(int exc)
 int
 __fenv_feenableexcept(int exc)
 {
-  return feenableexcept(exc);
+  return -1;
 }
 
 int
 __fenv_fedisableexcept(int exc)
 {
-  return fedisableexcept(exc);
+  return -1;
 }
 
 int
 __fenv_fegetexcept(void)
 {
-  return fegetexcept();
+  return -1;
 }
 
 int
diff --git a/tools/flang1/flang1exe/semsmp.c b/tools/flang1/flang1exe/semsmp.c
index 5478ba9..3c8b0c5 100644
--- a/tools/flang1/flang1exe/semsmp.c
+++ b/tools/flang1/flang1exe/semsmp.c
@@ -5759,7 +5759,7 @@ validate_if(int type, char *nm)
   default:
     if (type == (IF_TARGET | IF_PARALLEL)) {
       if ((mp_iftype != IF_DEFAULT) &&
-          (mp_iftype & type != (IF_TARGET | IF_PARALLEL))) {
+          ((mp_iftype & type) != (IF_TARGET | IF_PARALLEL))) {
         error(155, ERR_Severe, gbl.lineno, "Unexpected directive in if clause",
               NULL);
       }
diff --git a/runtime/flang/CMakeLists.txt b/runtime/flang/CMakeLists.txt
index beca342..537b100 100644
--- a/runtime/flang/CMakeLists.txt
+++ b/runtime/flang/CMakeLists.txt
@@ -14,7 +14,7 @@
 # limitations under the License.
 #
 
-enable_language(C ASM Fortran) # Enable assembly and Fortran
+enable_language(C Fortran) # Enable assembly and Fortran
 
 SET(ASM_OPTIONS "-DLINUX_ELF")
 SET(CMAKE_ASM_FLAGS "${CFLAGS} ${ASM_OPTIONS}" )
