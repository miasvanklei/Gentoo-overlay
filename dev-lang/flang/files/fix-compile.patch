diff --git a/runtime/flang/hand.c b/runtime/flang/hand.c
index bc8b0b6..86335e9 100644
--- a/runtime/flang/hand.c
+++ b/runtime/flang/hand.c
@@ -15,7 +15,7 @@
  *
  */
 
-#include <sys/signal.h>
+#include <signal.h>
 #include "stdioInterf.h"
 #include "fioMacros.h"
 
diff --git a/runtime/flangrti/trace_lin.c b/runtime/flangrti/trace_lin.c
index a316326..0670a67 100644
--- a/runtime/flangrti/trace_lin.c
+++ b/runtime/flangrti/trace_lin.c
@@ -17,7 +17,7 @@
 
 #include <signal.h>
 #include <sys/ucontext.h>
-#include <execinfo.h>
+//#include <execinfo.h>
 #include <stdioInterf.h>
 #include "dumpregs.h"
 
@@ -103,23 +103,8 @@ __abort_trace(int skip)
     dumpregs(regs);
   }
 
-  size = backtrace(array, MAXTRACE);
-  if (skip + 1 >= size) {
-    fprintf(__io_stderr(), "  --- traceback not available\n");
-    return;
-  }
-  strings = backtrace_symbols(array, size);
-  if (size < 100) {
-    for (i = skip + 1; i < size; i++)
-      fprintf(__io_stderr(), "  %s\n", strings[i]);
-  } else {
-    for (i = skip + 1; i < 40; i++)
-      fprintf(__io_stderr(), "  %s\n", strings[i]);
-    fprintf(__io_stderr(), "  --- skipping traceback entries\n");
-    for (i = size - 40; i < size; i++)
-      fprintf(__io_stderr(), "  %s\n", strings[i]);
-  }
-  free(strings);
+  fprintf(__io_stderr(), "  --- traceback not available\n");
+  return;
 }
 
 /*
diff --git a/runtime/flangrti/iostdinit.c b/runtime/flangrti/iostdinit.c
index c2e5ad1..7b1874b 100644
--- a/runtime/flangrti/iostdinit.c
+++ b/runtime/flangrti/iostdinit.c
@@ -160,7 +160,7 @@ __io_ferror(void *p)
 int
 __io_getfd(void *fp)
 {
-  return (((FILE *)fp)->_fileno);
+  return fileno((FILE *)fp);
 }
 
 /* is a tty? */
diff --git a/runtime/flangrti/x86_64-Linux/flt_env.c b/runtime/flangrti/x86_64-Linux/flt_env.c
index aeeb05a..94be815 100644
--- a/runtime/flangrti/x86_64-Linux/flt_env.c
+++ b/runtime/flangrti/x86_64-Linux/flt_env.c
@@ -608,19 +608,19 @@ __fenv_feraiseexcept(int exc)
 int
 __fenv_feenableexcept(int exc)
 {
-  return feenableexcept(exc);
+  return -1;
 }
 
 int
 __fenv_fedisableexcept(int exc)
 {
-  return fedisableexcept(exc);
+  return -1;
 }
 
 int
 __fenv_fegetexcept(void)
 {
-  return fegetexcept();
+  return -1;
 }
 
 int
diff --git a/runtime/flang/CMakeLists.txt b/runtime/flang/CMakeLists.txt
index beca342..537b100 100644
--- a/runtime/flang/CMakeLists.txt
+++ b/runtime/flang/CMakeLists.txt
@@ -14,7 +14,7 @@
 # limitations under the License.
 #
 
-enable_language(C ASM Fortran) # Enable assembly and Fortran
+enable_language(C Fortran) # Enable assembly and Fortran
 
 SET(ASM_OPTIONS "-DLINUX_ELF")
 SET(CMAKE_ASM_FLAGS "${CFLAGS} ${ASM_OPTIONS}" )
diff --git a/runtime/flang/async.c b/runtime/flang/async.c
index 3fd0e22..9f10aae 100644
--- a/runtime/flang/async.c
+++ b/runtime/flang/async.c
@@ -320,7 +320,7 @@ Fio_asy_read(struct asy *asy, void *adr, long len)
   asy->aiocb[tn].aio_reqprio = 0;
   asy->aiocb[tn].aio_buf = adr;
   asy->aiocb[tn].aio_nbytes = len;
-  memset(&(asy->aiocb[tn].aio_sigevent), 0, sizeof(sigevent_t));
+  memset(&(asy->aiocb[tn].aio_sigevent), 0, sizeof(struct sigevent));
   asy->aiocb[tn].aio_offset = asy->atd[tn].off;
   n = aio_read(&(asy->aiocb[tn]));
 #endif
@@ -374,7 +374,7 @@ Fio_asy_write(struct asy *asy, void *adr, long len)
   asy->aiocb[tn].aio_reqprio = 0;
   asy->aiocb[tn].aio_buf = adr;
   asy->aiocb[tn].aio_nbytes = len;
-  memset(&(asy->aiocb[tn].aio_sigevent), 0, sizeof(sigevent_t));
+  memset(&(asy->aiocb[tn].aio_sigevent), 0, sizeof(struct sigevent));
   asy->aiocb[tn].aio_offset = asy->atd[tn].off;
   n = aio_write(&(asy->aiocb[tn]));
 #endif
