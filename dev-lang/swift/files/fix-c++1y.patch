diff --git a/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp b/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp
index 7993900182..6536b5aa92 100644
--- a/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp
+++ b/tools/SourceKit/lib/SwiftLang/SwiftSourceDocInfo.cpp
@@ -1204,7 +1204,7 @@ static void resolveCursor(SwiftLangSupport &Lang,
                        SwiftInvocationRef ASTInvok,
                        bool TryExistingAST,
                        bool CancelOnSubsequentRequest,
-                       std::function<void(const CursorInfoData &)> Receiver)
+                       std::function<void(const CursorInfoData &)> Receiver = {})
     : CursorRangeInfoConsumer(InputFile, Offset, Length, Lang, ASTInvok,
                               TryExistingAST, CancelOnSubsequentRequest),
       Actionables(Actionables),
@@ -1218,7 +1218,6 @@ static void resolveCursor(SwiftLangSupport &Lang,
       SourceLoc Loc =
         Lexer::getLocForStartOfToken(SM, BufferID, Offset);
       if (Loc.isInvalid()) {
-        Receiver({});
         return;
       }
 
@@ -1281,7 +1280,6 @@ static void resolveCursor(SwiftLangSupport &Lang,
       CursorInfoResolver Resolver(AstUnit->getPrimarySourceFile());
       ResolvedCursorInfo CursorInfo = Resolver.resolve(Loc);
       if (CursorInfo.isInvalid()) {
-        Receiver({});
         return;
       }
       CompilerInvocation CompInvok;
@@ -1312,8 +1310,6 @@ static void resolveCursor(SwiftLangSupport &Lang,
             resolveCursor(Lang, InputFile, Offset, Length, Actionables, ASTInvok,
                           /*TryExistingAST=*/false, CancelOnSubsequentRequest,
                           Receiver);
-          } else {
-            Receiver({});
           }
         }
         return;
@@ -1343,7 +1339,6 @@ static void resolveCursor(SwiftLangSupport &Lang,
           }
         }
 
-        Receiver({});
         return;
       }
       case CursorInfoKind::Invalid: {
@@ -1360,7 +1355,6 @@ static void resolveCursor(SwiftLangSupport &Lang,
 
     void failed(StringRef Error) override {
       LOG_WARN_FUNC("cursor info failed: " << Error);
-      Receiver({});
     }
   };
 
@@ -1559,7 +1553,7 @@ static void resolveRange(SwiftLangSupport &Lang,
 void SwiftLangSupport::getCursorInfo(
     StringRef InputFile, unsigned Offset, unsigned Length, bool Actionables,
     bool CancelOnSubsequentRequest, ArrayRef<const char *> Args,
-    std::function<void(const CursorInfoData &)> Receiver) {
+    std::function<void(const CursorInfoData &)> Receiver = {}) {
 
   if (auto IFaceGenRef = IFaceGenContexts.get(InputFile)) {
     trace::TracedOperation TracedOp;
@@ -1593,8 +1587,6 @@ void SwiftLangSupport::getCursorInfo(
               /*OrigBufferID=*/None, SourceLoc(),
               {}, *this, Invok, {}, Receiver);
         }
-      } else {
-        Receiver({});
       }
     });
     return;
@@ -1605,7 +1597,6 @@ void SwiftLangSupport::getCursorInfo(
   if (!Invok) {
     // FIXME: Report it as failed request.
     LOG_WARN_FUNC("failed to create an ASTInvocation: " << Error);
-    Receiver({});
     return;
   }
 
@@ -1710,7 +1701,7 @@ resolveCursorFromUSR(SwiftLangSupport &Lang, StringRef InputFile, StringRef USR,
     CursorInfoConsumer(StringRef InputFile, StringRef USR,
                        SwiftLangSupport &Lang, SwiftInvocationRef ASTInvok,
                        bool TryExistingAST, bool CancelOnSubsequentRequest,
-                       std::function<void(const CursorInfoData &)> Receiver)
+                       std::function<void(const CursorInfoData &)> Receiver = {})
         : InputFile(InputFile), USR(USR), Lang(Lang),
           ASTInvok(std::move(ASTInvok)), TryExistingAST(TryExistingAST),
           CancelOnSubsequentRequest(CancelOnSubsequentRequest),
@@ -1751,7 +1742,6 @@ resolveCursorFromUSR(SwiftLangSupport &Lang, StringRef InputFile, StringRef USR,
 
       if (USR.startswith("c:")) {
         LOG_WARN_FUNC("lookup for C/C++/ObjC USRs not implemented");
-        Receiver({});
         return;
       }
 
@@ -1760,7 +1750,6 @@ resolveCursorFromUSR(SwiftLangSupport &Lang, StringRef InputFile, StringRef USR,
       Decl *D = ide::getDeclFromUSR(context, USR, error);
 
       if (!D) {
-        Receiver({});
         return;
       }
 
@@ -1788,8 +1777,6 @@ resolveCursorFromUSR(SwiftLangSupport &Lang, StringRef InputFile, StringRef USR,
             resolveCursorFromUSR(Lang, InputFile, USR, ASTInvok,
                                  /*TryExistingAST=*/false,
                                  CancelOnSubsequentRequest, Receiver);
-          } else {
-            Receiver({});
           }
         }
       }
@@ -1803,7 +1790,6 @@ resolveCursorFromUSR(SwiftLangSupport &Lang, StringRef InputFile, StringRef USR,
 
     void failed(StringRef Error) override {
       LOG_WARN_FUNC("cursor info failed: " << Error);
-      Receiver({});
     }
   };
 
@@ -1820,10 +1806,9 @@ resolveCursorFromUSR(SwiftLangSupport &Lang, StringRef InputFile, StringRef USR,
 void SwiftLangSupport::getCursorInfoFromUSR(
     StringRef filename, StringRef USR, bool CancelOnSubsequentRequest,
     ArrayRef<const char *> args,
-    std::function<void(const CursorInfoData &)> receiver) {
+    std::function<void(const CursorInfoData &)> receiver = {}) {
   if (auto IFaceGenRef = IFaceGenContexts.get(filename)) {
     LOG_WARN_FUNC("info from usr for generated interface not implemented yet");
-    receiver({});
     return;
   }
 
@@ -1832,7 +1817,6 @@ void SwiftLangSupport::getCursorInfoFromUSR(
   if (!invok) {
     // FIXME: Report it as failed request.
     LOG_WARN_FUNC("failed to create an ASTInvocation: " << error);
-    receiver({});
     return;
   }
 
