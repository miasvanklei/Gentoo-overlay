diff --git a/include/swift/AST/TypeAlignments.h b/include/swift/AST/TypeAlignments.h
index 9aa5aa98b8..fa1f0b96b7 100644
--- a/include/swift/AST/TypeAlignments.h
+++ b/include/swift/AST/TypeAlignments.h
@@ -22,7 +22,7 @@
 #ifndef SWIFT_TYPEALIGNMENTS_H
 #define SWIFT_TYPEALIGNMENTS_H
 
-#include "llvm/Support/AlignOf.h"
+#include <cstddef>
 
 namespace swift {
   class AbstractStorageDecl;
@@ -101,7 +101,6 @@ LLVM_DECLARE_TYPE_ALIGNMENT(swift::NormalProtocolConformance,
 LLVM_DECLARE_TYPE_ALIGNMENT(swift::GenericEnvironment,
                             swift::DeclAlignInBits)
 
-static_assert(llvm::AlignOf<void*>::Alignment >= 2,
-              "pointer alignment is too small");
+static_assert(alignof(void*) >= 2, "pointer alignment is too small");
 
 #endif
diff --git a/include/swift/Basic/SourceManager.h b/include/swift/Basic/SourceManager.h
index ec44590941..8b52094d8e 100644
--- a/include/swift/Basic/SourceManager.h
+++ b/include/swift/Basic/SourceManager.h
@@ -134,7 +134,7 @@ public:
   /// Returns the identifier for the buffer with the given ID.
   ///
   /// \p BufferID must be a valid buffer ID.
-  const char *getIdentifierForBuffer(unsigned BufferID) const;
+  StringRef getIdentifierForBuffer(unsigned BufferID) const;
 
   /// \brief Returns a SourceRange covering the entire specified buffer.
   ///
@@ -167,9 +167,9 @@ public:
   /// location.
   ///
   /// This respects #line directives.
-  const char *getBufferIdentifierForLoc(SourceLoc Loc) const {
+  StringRef getBufferIdentifierForLoc(SourceLoc Loc) const {
     if (auto VFile = getVirtualFile(Loc))
-      return VFile->Name.c_str();
+      return VFile->Name;
     else
       return getIdentifierForBuffer(findBufferContainingLoc(Loc));
   }
diff --git a/include/swift/Basic/Timer.h b/include/swift/Basic/Timer.h
index 428a1019af..4de56215a7 100644
--- a/include/swift/Basic/Timer.h
+++ b/include/swift/Basic/Timer.h
@@ -33,7 +33,8 @@ namespace swift {
   public:
     explicit SharedTimer(StringRef name) {
       if (CompilationTimersEnabled == State::Enabled)
-        Timer.emplace(name, StringRef("Swift compilation"));
+        Timer.emplace(name, StringRef("Swift compilation"), StringRef("swift"),
+                      StringRef("swift related timers"));
       else
         CompilationTimersEnabled = State::Skipped;
     }
diff --git a/include/swift/Driver/Action.h b/include/swift/Driver/Action.h
index 105f649611..2ec4f4ae54 100644
--- a/include/swift/Driver/Action.h
+++ b/include/swift/Driver/Action.h
@@ -19,7 +19,7 @@
 #include "llvm/ADT/ArrayRef.h"
 #include "llvm/ADT/Optional.h"
 #include "llvm/ADT/StringSwitch.h"
-#include "llvm/Support/TimeValue.h"
+#include "llvm/Support/Chrono.h"
 
 namespace llvm {
 namespace opt {
@@ -137,14 +137,14 @@ public:
       NewlyAdded
     };
     Status status = UpToDate;
-    llvm::sys::TimeValue previousModTime;
+    llvm::sys::TimePoint<> previousModTime;
 
     InputInfo() = default;
-    InputInfo(Status stat, llvm::sys::TimeValue time)
+    InputInfo(Status stat, llvm::sys::TimePoint<> time)
         : status(stat), previousModTime(time) {}
 
     static InputInfo makeNewlyAdded() {
-      return InputInfo(Status::NewlyAdded, llvm::sys::TimeValue::MaxTime());
+      return InputInfo(Status::NewlyAdded, llvm::sys::TimePoint<>::max());
     }
   };
 
diff --git a/include/swift/Driver/Compilation.h b/include/swift/Driver/Compilation.h
index 94474a8689..377d216ca9 100644
--- a/include/swift/Driver/Compilation.h
+++ b/include/swift/Driver/Compilation.h
@@ -23,7 +23,7 @@
 #include "swift/Basic/LLVM.h"
 #include "llvm/ADT/DenseSet.h"
 #include "llvm/ADT/StringRef.h"
-#include "llvm/Support/TimeValue.h"
+#include "llvm/Support/Chrono.h"
 
 #include <memory>
 #include <vector>
@@ -99,12 +99,12 @@ private:
   ///
   /// This should be as close as possible to when the driver was invoked, since
   /// it's used as a lower bound.
-  llvm::sys::TimeValue BuildStartTime;
+  llvm::sys::TimePoint<> BuildStartTime;
 
   /// The time of the last build.
   ///
   /// If unknown, this will be some time in the past.
-  llvm::sys::TimeValue LastBuildTime = llvm::sys::TimeValue::MinTime();
+  llvm::sys::TimePoint<> LastBuildTime = llvm::sys::TimePoint<>::min();
 
   /// The number of commands which this compilation should attempt to run in
   /// parallel.
@@ -145,7 +145,7 @@ public:
               std::unique_ptr<llvm::opt::InputArgList> InputArgs,
               std::unique_ptr<llvm::opt::DerivedArgList> TranslatedArgs,
               InputFileList InputsWithTypes,
-              StringRef ArgsHash, llvm::sys::TimeValue StartTime,
+              StringRef ArgsHash, llvm::sys::TimePoint<> StartTime,
               unsigned NumberOfParallelCommands = 1,
               bool EnableIncrementalBuild = false,
               bool SkipTaskExecution = false,
@@ -199,7 +199,7 @@ public:
     CompilationRecordPath = path;
   }
 
-  void setLastBuildTime(llvm::sys::TimeValue time) {
+  void setLastBuildTime(llvm::sys::TimePoint<> time) {
     LastBuildTime = time;
   }
 
diff --git a/include/swift/Driver/Job.h b/include/swift/Driver/Job.h
index a779e5b142..42d90c4b48 100644
--- a/include/swift/Driver/Job.h
+++ b/include/swift/Driver/Job.h
@@ -23,7 +23,7 @@
 #include "llvm/ADT/PointerIntPair.h"
 #include "llvm/ADT/SmallVector.h"
 #include "llvm/ADT/StringRef.h"
-#include "llvm/Support/TimeValue.h"
+#include "llvm/Support/Chrono.h"
 #include "llvm/Support/raw_ostream.h"
 
 #include <memory>
@@ -118,7 +118,7 @@ private:
   FilelistInfo FilelistFileInfo;
 
   /// The modification time of the main input file, if any.
-  llvm::sys::TimeValue InputModTime = llvm::sys::TimeValue::MaxTime();
+  llvm::sys::TimePoint<> InputModTime = llvm::sys::TimePoint<>::max();
 
 public:
   Job(const JobAction &Source,
@@ -152,11 +152,11 @@ public:
     SourceAndCondition.setInt(Cond);
   }
 
-  void setInputModTime(llvm::sys::TimeValue time) {
+  void setInputModTime(llvm::sys::TimePoint<> time) {
     InputModTime = time;
   }
 
-  llvm::sys::TimeValue getInputModTime() const {
+  llvm::sys::TimePoint<> getInputModTime() const {
     return InputModTime;
   }
 
diff --git a/include/swift/IDE/CodeCompletion.h b/include/swift/IDE/CodeCompletion.h
index f86488f92c..065e2d58b8 100644
--- a/include/swift/IDE/CodeCompletion.h
+++ b/include/swift/IDE/CodeCompletion.h
@@ -18,7 +18,6 @@
 #include "llvm/ADT/ArrayRef.h"
 #include "llvm/ADT/StringRef.h"
 #include "llvm/Support/Allocator.h"
-#include "llvm/Support/TimeValue.h"
 #include "llvm/Support/TrailingObjects.h"
 #include <functional>
 #include <memory>
diff --git a/include/swift/IDE/CodeCompletionCache.h b/include/swift/IDE/CodeCompletionCache.h
index e48640f7cc..cca3856863 100644
--- a/include/swift/IDE/CodeCompletionCache.h
+++ b/include/swift/IDE/CodeCompletionCache.h
@@ -16,6 +16,7 @@
 #include "swift/IDE/CodeCompletion.h"
 #include "swift/Basic/ThreadSafeRefCounted.h"
 #include "llvm/ADT/IntrusiveRefCntPtr.h"
+#include "llvm/Support/Chrono.h"
 #include <system_error>
 
 namespace swift {
@@ -53,7 +54,7 @@ public:
   };
 
   struct Value : public llvm::ThreadSafeRefCountedBase<Value> {
-    llvm::sys::TimeValue ModuleModificationTime;
+    llvm::sys::TimePoint<> ModuleModificationTime;
     CodeCompletionResultSink Sink;
   };
   using ValueRefCntPtr = llvm::IntrusiveRefCntPtr<Value>;
diff --git a/include/swift/SIL/CFG.h b/include/swift/SIL/CFG.h
index b80ea94568..ab4da00260 100644
--- a/include/swift/SIL/CFG.h
+++ b/include/swift/SIL/CFG.h
@@ -27,8 +27,7 @@ namespace llvm {
 // GraphTraits for SILBasicBlock
 //===----------------------------------------------------------------------===//
 template <> struct GraphTraits<swift::SILBasicBlock*> {
-  typedef swift::SILBasicBlock NodeType;
-  typedef NodeType::SuccessorListTy::iterator ChildIteratorType;
+  typedef swift::SILBasicBlock::SuccessorListTy::iterator ChildIteratorType;
   typedef swift::SILBasicBlock *NodeRef;
 
   static NodeRef getEntryNode(NodeRef BB) { return BB; }
@@ -42,8 +41,7 @@ template <> struct GraphTraits<swift::SILBasicBlock*> {
 };
 
 template <> struct GraphTraits<const swift::SILBasicBlock*> {
-  typedef const swift::SILBasicBlock NodeType;
-  typedef NodeType::ConstSuccessorListTy::iterator ChildIteratorType;
+  typedef swift::SILBasicBlock::ConstSuccessorListTy::iterator ChildIteratorType;
   typedef const swift::SILBasicBlock *NodeRef;
 
   static NodeRef getEntryNode(NodeRef BB) { return BB; }
@@ -57,8 +55,7 @@ template <> struct GraphTraits<const swift::SILBasicBlock*> {
 };
 
 template <> struct GraphTraits<Inverse<swift::SILBasicBlock*> > {
-  typedef swift::SILBasicBlock NodeType;
-  typedef NodeType::pred_iterator ChildIteratorType;
+  typedef swift::SILBasicBlock::pred_iterator ChildIteratorType;
   typedef swift::SILBasicBlock *NodeRef;
 
   static NodeRef getEntryNode(Inverse<swift::SILBasicBlock *> G) {
@@ -73,8 +70,7 @@ template <> struct GraphTraits<Inverse<swift::SILBasicBlock*> > {
 };
 
 template <> struct GraphTraits<Inverse<const swift::SILBasicBlock*> > {
-  typedef const swift::SILBasicBlock NodeType;
-  typedef NodeType::pred_iterator ChildIteratorType;
+  typedef swift::SILBasicBlock::pred_iterator ChildIteratorType;
   typedef const swift::SILBasicBlock *NodeRef;
 
   static NodeRef getEntryNode(Inverse<const swift::SILBasicBlock *> G) {
@@ -95,9 +91,13 @@ template <> struct GraphTraits<swift::SILFunction*>
 
   static NodeRef getEntryNode(GraphType F) { return &F->front(); }
 
-  typedef swift::SILFunction::iterator nodes_iterator;
-  static nodes_iterator nodes_begin(GraphType F) { return F->begin(); }
-  static nodes_iterator nodes_end(GraphType F) { return F->end(); }
+  typedef pointer_iterator<swift::SILFunction::iterator> nodes_iterator;
+  static nodes_iterator nodes_begin(GraphType F) {
+    return nodes_iterator(F->begin());
+  }
+  static nodes_iterator nodes_end(GraphType F) {
+    return nodes_iterator(F->end());
+  }
   static unsigned size(GraphType F) { return F->size(); }
 };
 
@@ -108,9 +108,13 @@ template <> struct GraphTraits<Inverse<swift::SILFunction*> >
 
   static NodeRef getEntryNode(GraphType F) { return &F.Graph->front(); }
 
-  typedef swift::SILFunction::iterator nodes_iterator;
-  static nodes_iterator nodes_begin(GraphType F) { return F.Graph->begin(); }
-  static nodes_iterator nodes_end(GraphType F) { return F.Graph->end(); }
+  typedef pointer_iterator<swift::SILFunction::iterator> nodes_iterator;
+  static nodes_iterator nodes_begin(GraphType F) {
+    return nodes_iterator(F.Graph->begin());
+  }
+  static nodes_iterator nodes_end(GraphType F) {
+    return nodes_iterator(F.Graph->end());
+  }
   static unsigned size(GraphType F) { return F.Graph->size(); }
 };
 
diff --git a/include/swift/SIL/Dominance.h b/include/swift/SIL/Dominance.h
index 7334f9fa24..9dde2b8e4c 100644
--- a/include/swift/SIL/Dominance.h
+++ b/include/swift/SIL/Dominance.h
@@ -171,8 +171,7 @@ namespace llvm {
 /// DominatorTree GraphTraits specialization so the DominatorTree can be
 /// iterable by generic graph iterators.
 template <> struct GraphTraits<swift::DominanceInfoNode *> {
-  using NodeType = swift::DominanceInfoNode;
-  using ChildIteratorType = NodeType::iterator;
+  using ChildIteratorType = swift::DominanceInfoNode::iterator;
   typedef swift::DominanceInfoNode *NodeRef;
 
   static NodeRef getEntryNode(NodeRef N) { return N; }
@@ -181,8 +180,7 @@ template <> struct GraphTraits<swift::DominanceInfoNode *> {
 };
 
 template <> struct GraphTraits<const swift::DominanceInfoNode *> {
-  using NodeType = const swift::DominanceInfoNode;
-  using ChildIteratorType = NodeType::const_iterator;
+  using ChildIteratorType = swift::DominanceInfoNode::const_iterator;
   typedef const swift::DominanceInfoNode *NodeRef;
 
   static NodeRef getEntryNode(NodeRef N) { return N; }
diff --git a/include/swift/SIL/LoopInfo.h b/include/swift/SIL/LoopInfo.h
index 6b1899147c..53f00df668 100644
--- a/include/swift/SIL/LoopInfo.h
+++ b/include/swift/SIL/LoopInfo.h
@@ -63,6 +63,7 @@ class SILLoopInfo {
   using SILLoopInfoBase = llvm::LoopInfoBase<SILBasicBlock, SILLoop>;
 
   SILLoopInfoBase LI;
+  DominanceInfo *Dominance;
 
   void operator=(const SILLoopInfo &) = delete;
   SILLoopInfo(const SILLoopInfo &) = delete;
diff --git a/include/swift/SIL/SILLocation.h b/include/swift/SIL/SILLocation.h
index 5b9f732012..02d48ea92b 100644
--- a/include/swift/SIL/SILLocation.h
+++ b/include/swift/SIL/SILLocation.h
@@ -87,10 +87,10 @@ public:
   struct DebugLoc {
     unsigned Line;
     unsigned Column;
-    const char *Filename;
+    StringRef Filename;
 
     DebugLoc(unsigned Line = 0, unsigned Column = 0,
-             const char *Filename = nullptr)
+             StringRef Filename = StringRef())
         : Line(Line), Column(Column), Filename(Filename) {}
 
     inline bool operator==(const DebugLoc &R) const {
@@ -265,7 +265,7 @@ public:
   bool isNull() const {
     switch (getStorageKind()) {
     case ASTNodeKind:   return Loc.ASTNode.Primary.isNull();
-    case DebugInfoKind: return Loc.DebugInfoLoc.Filename;
+    case DebugInfoKind: return Loc.DebugInfoLoc.Filename.empty();
     case SILFileKind:   return Loc.SILFileLoc.isInvalid();
     default:            return true;
     }
@@ -410,7 +410,7 @@ public:
   }
 
   /// Fingerprint a DebugLoc for use in a DenseMap.
-  typedef std::pair<std::pair<unsigned, unsigned>, const void *> DebugLocKey;
+  typedef std::pair<std::pair<unsigned, unsigned>, StringRef> DebugLocKey;
   struct DebugLocHash : public DebugLocKey {
     DebugLocHash(DebugLoc L) : DebugLocKey({{L.Line, L.Column}, L.Filename}) {}
   };
diff --git a/include/swift/Serialization/ModuleFile.h b/include/swift/Serialization/ModuleFile.h
index 77d0b79b48..ae735531d1 100644
--- a/include/swift/Serialization/ModuleFile.h
+++ b/include/swift/Serialization/ModuleFile.h
@@ -56,12 +56,6 @@ class ModuleFile : public LazyMemberLoader {
   std::unique_ptr<llvm::MemoryBuffer> ModuleInputBuffer;
   std::unique_ptr<llvm::MemoryBuffer> ModuleDocInputBuffer;
 
-  /// The reader attached to \c ModuleInputBuffer.
-  llvm::BitstreamReader ModuleInputReader;
-
-  /// The reader attached to \c ModuleDocInputBuffer.
-  llvm::BitstreamReader ModuleDocInputReader;
-
   /// The cursor used to lazily load things from the file.
   llvm::BitstreamCursor DeclTypeCursor;
 
diff --git a/lib/AST/ASTPrinter.cpp b/lib/AST/ASTPrinter.cpp
index 0fd375cdc4..cc11796e4f 100644
--- a/lib/AST/ASTPrinter.cpp
+++ b/lib/AST/ASTPrinter.cpp
@@ -475,17 +475,17 @@ bool TypeTransformContext::isPrintingSynthesizedExtension() const {
 std::string ASTPrinter::sanitizeUtf8(StringRef Text) {
   llvm::SmallString<256> Builder;
   Builder.reserve(Text.size());
-  const UTF8* Data = reinterpret_cast<const UTF8*>(Text.begin());
-  const UTF8* End = reinterpret_cast<const UTF8*>(Text.end());
+  const llvm::UTF8* Data = reinterpret_cast<const llvm::UTF8*>(Text.begin());
+  const llvm::UTF8* End = reinterpret_cast<const llvm::UTF8*>(Text.end());
   StringRef Replacement = "\ufffd";
   while (Data < End) {
-    auto Step = getNumBytesForUTF8(*Data);
+    auto Step = llvm::getNumBytesForUTF8(*Data);
     if (Data + Step > End) {
       Builder.append(Replacement);
       break;
     }
 
-    if (isLegalUTF8Sequence(Data, Data + Step)) {
+    if (llvm::isLegalUTF8Sequence(Data, Data + Step)) {
       Builder.append(Data, Data + Step);
     } else {
 
diff --git a/lib/AST/CMakeLists.txt b/lib/AST/CMakeLists.txt
index 6211a61545..19d2fbc91f 100644
--- a/lib/AST/CMakeLists.txt
+++ b/lib/AST/CMakeLists.txt
@@ -75,7 +75,7 @@ add_swift_library(swiftAST STATIC
     clangBasic
 
   LLVM_COMPONENT_DEPENDS
-    bitreader bitwriter coverage irreader debuginfoDWARF
+    bitreader bitwriter coroutines coverage irreader debuginfoDWARF
     profiledata instrumentation object objcarcopts mc mcparser
     bitreader bitwriter lto ipo option core support ${LLVM_TARGETS_TO_BUILD}
   )
diff --git a/lib/AST/ConformanceLookupTable.cpp b/lib/AST/ConformanceLookupTable.cpp
index 45a87b42e3..8504044189 100644
--- a/lib/AST/ConformanceLookupTable.cpp
+++ b/lib/AST/ConformanceLookupTable.cpp
@@ -1037,7 +1037,7 @@ int ConformanceLookupTable::compareProtocolConformances(
         }
 
         // Otherwise, order by buffer identifier.
-        return StringRef(ctx.SourceMgr.getIdentifierForBuffer(lhsBuffer))
+        return ctx.SourceMgr.getIdentifierForBuffer(lhsBuffer)
                  .compare(ctx.SourceMgr.getIdentifierForBuffer(rhsBuffer));
       }
     }
diff --git a/lib/AST/Identifier.cpp b/lib/AST/Identifier.cpp
index d6d7dcc6b6..b138b8a70b 100644
--- a/lib/AST/Identifier.cpp
+++ b/lib/AST/Identifier.cpp
@@ -56,12 +56,12 @@ raw_ostream &llvm::operator<<(raw_ostream &OS, swift::ObjCSelector S) {
 
 bool Identifier::isOperatorSlow() const {
   StringRef data = str();
-  auto *s = reinterpret_cast<UTF8 const *>(data.begin()),
-  *end = reinterpret_cast<UTF8 const *>(data.end());
-  UTF32 codePoint;
-  ConversionResult res = llvm::convertUTF8Sequence(&s, end, &codePoint,
-                                                   strictConversion);
-  assert(res == conversionOK && "invalid UTF-8 in identifier?!");
+  auto *s = reinterpret_cast<llvm::UTF8 const *>(data.begin()),
+  *end = reinterpret_cast<llvm::UTF8 const *>(data.end());
+  llvm::UTF32 codePoint;
+  llvm::ConversionResult res =
+    llvm::convertUTF8Sequence(&s, end, &codePoint, llvm::strictConversion);
+  assert(res == llvm::conversionOK && "invalid UTF-8 in identifier?!");
   (void)res;
   return !empty() && isOperatorStartCodePoint(codePoint);
 }
diff --git a/lib/AST/Type.cpp b/lib/AST/Type.cpp
index 7030881063..1b86d325f6 100644
--- a/lib/AST/Type.cpp
+++ b/lib/AST/Type.cpp
@@ -1439,12 +1439,12 @@ Identifier GenericTypeParamType::getName() const {
 
 const llvm::fltSemantics &BuiltinFloatType::getAPFloatSemantics() const {
   switch (getFPKind()) {
-  case BuiltinFloatType::IEEE16:  return APFloat::IEEEhalf;
-  case BuiltinFloatType::IEEE32:  return APFloat::IEEEsingle;
-  case BuiltinFloatType::IEEE64:  return APFloat::IEEEdouble;
-  case BuiltinFloatType::IEEE80:  return APFloat::x87DoubleExtended;
-  case BuiltinFloatType::IEEE128: return APFloat::IEEEquad;
-  case BuiltinFloatType::PPC128:  return APFloat::PPCDoubleDouble;
+  case BuiltinFloatType::IEEE16:  return APFloat::IEEEhalf();
+  case BuiltinFloatType::IEEE32:  return APFloat::IEEEsingle();
+  case BuiltinFloatType::IEEE64:  return APFloat::IEEEdouble();
+  case BuiltinFloatType::IEEE80:  return APFloat::x87DoubleExtended();
+  case BuiltinFloatType::IEEE128: return APFloat::IEEEquad();
+  case BuiltinFloatType::PPC128:  return APFloat::PPCDoubleDouble();
   }
   llvm::report_fatal_error("Unknown FP semantics");
 }
diff --git a/lib/Basic/SourceLoc.cpp b/lib/Basic/SourceLoc.cpp
index f7c6190b86..8102ba3484 100644
--- a/lib/Basic/SourceLoc.cpp
+++ b/lib/Basic/SourceLoc.cpp
@@ -137,7 +137,7 @@ Optional<unsigned> SourceManager::getIDForBufferIdentifier(
   return It->second;
 }
 
-const char *SourceManager::getIdentifierForBuffer(unsigned bufferID) const {
+StringRef SourceManager::getIdentifierForBuffer(unsigned bufferID) const {
   auto *buffer = LLVMSourceMgr.getMemoryBuffer(bufferID);
   assert(buffer && "invalid buffer ID");
   return buffer->getBufferIdentifier();
diff --git a/lib/Basic/Unicode.cpp b/lib/Basic/Unicode.cpp
index 08b9f28007..3135247011 100644
--- a/lib/Basic/Unicode.cpp
+++ b/lib/Basic/Unicode.cpp
@@ -22,14 +22,15 @@ StringRef swift::unicode::extractFirstExtendedGraphemeCluster(StringRef S) {
   if (S.empty())
     return StringRef();
 
-  const UTF8 *SourceStart = reinterpret_cast<const UTF8 *>(S.data());
+  const llvm::UTF8 *SourceStart =
+    reinterpret_cast<const llvm::UTF8 *>(S.data());
 
-  const UTF8 *SourceNext = SourceStart;
-  UTF32 C[2];
-  UTF32 *TargetStart = C;
+  const llvm::UTF8 *SourceNext = SourceStart;
+  llvm::UTF32 C[2];
+  llvm::UTF32 *TargetStart = C;
 
   ConvertUTF8toUTF32(&SourceNext, SourceStart + S.size(), &TargetStart, C + 1,
-                     lenientConversion);
+                     llvm::lenientConversion);
   if (TargetStart == C) {
     // The source string contains an ill-formed subsequence at the end.
     return S;
@@ -42,7 +43,7 @@ StringRef swift::unicode::extractFirstExtendedGraphemeCluster(StringRef S) {
 
     size_t C1Offset = SourceNext - SourceStart;
     ConvertUTF8toUTF32(&SourceNext, SourceStart + S.size(), &TargetStart, C + 2,
-                       lenientConversion);
+                       llvm::lenientConversion);
 
     if (TargetStart == C + 1) {
       // End of source string or the source string contains an ill-formed
@@ -65,14 +66,15 @@ static bool extractFirstUnicodeScalarImpl(StringRef S, unsigned &Scalar) {
   if (S.empty())
     return false;
 
-  const UTF8 *SourceStart = reinterpret_cast<const UTF8 *>(S.data());
+  const llvm::UTF8 *SourceStart =
+    reinterpret_cast<const llvm::UTF8 *>(S.data());
 
-  const UTF8 *SourceNext = SourceStart;
-  UTF32 C;
-  UTF32 *TargetStart = &C;
+  const llvm::UTF8 *SourceNext = SourceStart;
+  llvm::UTF32 C;
+  llvm::UTF32 *TargetStart = &C;
 
   ConvertUTF8toUTF32(&SourceNext, SourceStart + S.size(), &TargetStart,
-                     TargetStart + 1, lenientConversion);
+                     TargetStart + 1, llvm::lenientConversion);
   if (TargetStart == &C) {
     // The source string contains an ill-formed subsequence at the end.
     return false;
@@ -98,13 +100,14 @@ unsigned swift::unicode::extractFirstUnicodeScalar(StringRef S) {
 uint64_t swift::unicode::getUTF16Length(StringRef Str) {
   uint64_t Length;
   // Transcode the string to UTF-16 to get its length.
-  SmallVector<UTF16, 128> buffer(Str.size() + 1); // +1 for ending nulls.
-  const UTF8 *fromPtr = (const UTF8 *) Str.data();
-  UTF16 *toPtr = &buffer[0];
-  ConversionResult Result = ConvertUTF8toUTF16(&fromPtr, fromPtr + Str.size(),
-                                               &toPtr, toPtr + Str.size(),
-                                               strictConversion);
-  assert(Result == conversionOK &&
+  SmallVector<llvm::UTF16, 128> buffer(Str.size() + 1); // +1 for ending nulls.
+  const llvm::UTF8 *fromPtr = (const llvm::UTF8 *) Str.data();
+  llvm::UTF16 *toPtr = &buffer[0];
+  llvm::ConversionResult Result =
+    ConvertUTF8toUTF16(&fromPtr, fromPtr + Str.size(),
+                       &toPtr, toPtr + Str.size(),
+                       llvm::strictConversion);
+  assert(Result == llvm::conversionOK &&
          "UTF-8 encoded string cannot be converted into UTF-16 encoding");
   (void)Result;
 
diff --git a/lib/Driver/Compilation.cpp b/lib/Driver/Compilation.cpp
index e512a66b5e..d4edbad8fd 100644
--- a/lib/Driver/Compilation.cpp
+++ b/lib/Driver/Compilation.cpp
@@ -30,6 +30,7 @@
 #include "llvm/ADT/TinyPtrVector.h"
 #include "llvm/Option/Arg.h"
 #include "llvm/Option/ArgList.h"
+#include "llvm/Support/Chrono.h"
 #include "llvm/Support/FileSystem.h"
 #include "llvm/Support/Path.h"
 #include "llvm/Support/raw_ostream.h"
@@ -47,7 +48,7 @@ Compilation::Compilation(DiagnosticEngine &Diags, OutputLevel Level,
                          std::unique_ptr<InputArgList> InputArgs,
                          std::unique_ptr<DerivedArgList> TranslatedArgs,
                          InputFileList InputsWithTypes,
-                         StringRef ArgsHash, llvm::sys::TimeValue StartTime,
+                         StringRef ArgsHash, llvm::sys::TimePoint<> StartTime,
                          unsigned NumberOfParallelCommands,
                          bool EnableIncrementalBuild,
                          bool SkipTaskExecution,
@@ -158,7 +159,7 @@ static void checkForOutOfDateInputs(DiagnosticEngine &diags,
                                     const InputInfoMap &inputs) {
   for (const auto &inputPair : inputs) {
     auto recordedModTime = inputPair.second.previousModTime;
-    if (recordedModTime == llvm::sys::TimeValue::MaxTime())
+    if (recordedModTime == llvm::sys::TimePoint<>::max())
       continue;
 
     const char *input = inputPair.first->getValue();
@@ -178,7 +179,7 @@ static void checkForOutOfDateInputs(DiagnosticEngine &diags,
 }
 
 static void writeCompilationRecord(StringRef path, StringRef argsHash,
-                                   llvm::sys::TimeValue buildTime,
+                                   llvm::sys::TimePoint<> buildTime,
                                    const InputInfoMap &inputs) {
   // Before writing to the dependencies file path, preserve any previous file
   // that may have been there. No error handling -- this is just a nicety, it
@@ -193,8 +194,13 @@ static void writeCompilationRecord(StringRef path, StringRef argsHash,
     return;
   }
 
-  auto writeTimeValue = [](llvm::raw_ostream &out, llvm::sys::TimeValue time) {
-    out << "[" << time.seconds() << ", " << time.nanoseconds() << "]";
+  auto writeTimeValue = [](llvm::raw_ostream &out,
+                           llvm::sys::TimePoint<> time) {
+    using namespace std::chrono;
+    auto secs = time_point_cast<seconds>(time);
+    time -= secs.time_since_epoch(); // remainder in nanoseconds
+    out << "[" << secs.time_since_epoch().count()
+        << ", " << time.time_since_epoch().count() << "]";
   };
 
   using compilation_record::TopLevelKey;
@@ -432,7 +438,7 @@ int Compilation::performJobsImpl() {
   }
 
   int Result = EXIT_SUCCESS;
-  llvm::TimerGroup DriverTimerGroup("Driver Time Compilation");
+  llvm::TimerGroup DriverTimerGroup("driver", "Driver Compilation Time");
   llvm::SmallDenseMap<const Job *, std::unique_ptr<llvm::Timer>, 16>
     DriverTimers;
 
@@ -464,7 +470,7 @@ int Compilation::performJobsImpl() {
       DriverTimers.insert({
         BeganCmd,
         std::unique_ptr<llvm::Timer>(
-          new llvm::Timer(OS.str(), DriverTimerGroup))
+          new llvm::Timer("task", OS.str(), DriverTimerGroup))
       });
       DriverTimers[BeganCmd]->startTimer();
     }
diff --git a/lib/Driver/Driver.cpp b/lib/Driver/Driver.cpp
index 963b475d02..b1598782bd 100644
--- a/lib/Driver/Driver.cpp
+++ b/lib/Driver/Driver.cpp
@@ -270,7 +270,7 @@ static bool populateOutOfDateMap(InputInfoMap &map, StringRef argsHashStr,
   bool optionsMatch = true;
 
   auto readTimeValue = [&scratch](yaml::Node *node,
-                                  llvm::sys::TimeValue &timeValue) -> bool {
+                                  llvm::sys::TimePoint<> &timeValue) -> bool {
     auto *seq = dyn_cast<yaml::SequenceNode>(node);
     if (!seq)
       return true;
@@ -282,7 +282,7 @@ static bool populateOutOfDateMap(InputInfoMap &map, StringRef argsHashStr,
     auto *secondsRaw = dyn_cast<yaml::ScalarNode>(&*seqI);
     if (!secondsRaw)
       return true;
-    llvm::sys::TimeValue::SecondsType parsedSeconds;
+    std::time_t parsedSeconds;
     if (secondsRaw->getValue(scratch).getAsInteger(10, parsedSeconds))
       return true;
 
@@ -293,7 +293,7 @@ static bool populateOutOfDateMap(InputInfoMap &map, StringRef argsHashStr,
     auto *nanosecondsRaw = dyn_cast<yaml::ScalarNode>(&*seqI);
     if (!nanosecondsRaw)
       return true;
-    llvm::sys::TimeValue::NanoSecondsType parsedNanoseconds;
+    std::chrono::system_clock::rep parsedNanoseconds;
     if (nanosecondsRaw->getValue(scratch).getAsInteger(10, parsedNanoseconds))
       return true;
 
@@ -301,8 +301,8 @@ static bool populateOutOfDateMap(InputInfoMap &map, StringRef argsHashStr,
     if (seqI != seqE)
       return true;
 
-    timeValue.seconds(parsedSeconds);
-    timeValue.nanoseconds(parsedNanoseconds);
+    timeValue = llvm::sys::TimePoint<>(std::chrono::seconds(parsedSeconds));
+    timeValue += std::chrono::nanoseconds(parsedNanoseconds);
     return false;
   };
 
@@ -346,7 +346,7 @@ static bool populateOutOfDateMap(InputInfoMap &map, StringRef argsHashStr,
         return failedToReadOutOfDateMap(ShowIncrementalBuildDecisions,
                                         buildRecordPath, reason);
       }
-      llvm::sys::TimeValue timeVal;
+      llvm::sys::TimePoint<> timeVal;
       if (readTimeValue(i->getValue(), timeVal))
         return true;
       map[nullptr] = { InputInfo::NeedsCascadingBuild, timeVal };
@@ -377,7 +377,7 @@ static bool populateOutOfDateMap(InputInfoMap &map, StringRef argsHashStr,
         if (!previousBuildState)
           return true;
 
-        llvm::sys::TimeValue timeValue;
+        llvm::sys::TimePoint<> timeValue;
         if (readTimeValue(value, timeValue))
           return true;
 
@@ -453,7 +453,7 @@ std::unique_ptr<Compilation> Driver::buildCompilation(
     ArrayRef<const char *> Args) {
   llvm::PrettyStackTraceString CrashInfo("Compilation construction");
 
-  llvm::sys::TimeValue StartTime = llvm::sys::TimeValue::now();
+  llvm::sys::TimePoint<> StartTime = std::chrono::system_clock::now();
 
   std::unique_ptr<InputArgList> ArgList(parseArgStrings(Args.slice(1)));
   if (Diags.hadAnyError())
@@ -1279,7 +1279,7 @@ void Driver::buildActions(const ToolChain &TC,
 
         CompileJobAction::InputInfo previousBuildState = {
           CompileJobAction::InputInfo::NeedsCascadingBuild,
-          llvm::sys::TimeValue::MinTime()
+          llvm::sys::TimePoint<>::min()
         };
         if (OutOfDateMap)
           previousBuildState = OutOfDateMap->lookup(InputArg);
diff --git a/lib/Frontend/PrintingDiagnosticConsumer.cpp b/lib/Frontend/PrintingDiagnosticConsumer.cpp
index 0efcd43a29..52f85138ca 100644
--- a/lib/Frontend/PrintingDiagnosticConsumer.cpp
+++ b/lib/Frontend/PrintingDiagnosticConsumer.cpp
@@ -117,7 +117,7 @@ SourceManager::GetMessage(SourceLoc Loc, llvm::SourceMgr::DiagKind Kind,
   // location to pull out the source line.
   SmallVector<std::pair<unsigned, unsigned>, 4> ColRanges;
   std::pair<unsigned, unsigned> LineAndCol;
-  const char *BufferID = "<unknown>";
+  StringRef BufferID = "<unknown>";
   std::string LineStr;
 
   if (Loc.isValid()) {
diff --git a/lib/Frontend/SerializedDiagnosticConsumer.cpp b/lib/Frontend/SerializedDiagnosticConsumer.cpp
index 3e65b23448..f71093fe3b 100644
--- a/lib/Frontend/SerializedDiagnosticConsumer.cpp
+++ b/lib/Frontend/SerializedDiagnosticConsumer.cpp
@@ -329,7 +329,7 @@ static void emitRecordID(unsigned ID, const char *Name,
 }
 
 /// \brief Emit bitcode for abbreviation for source locations.
-static void addSourceLocationAbbrev(llvm::BitCodeAbbrev *Abbrev) {
+static void addSourceLocationAbbrev(std::shared_ptr<llvm::BitCodeAbbrev> Abbrev) {
   using namespace llvm;
   Abbrev->Add(BitCodeAbbrevOp(BitCodeAbbrevOp::Fixed, 10)); // File ID.
   Abbrev->Add(BitCodeAbbrevOp(BitCodeAbbrevOp::Fixed, 32)); // Line.
@@ -338,13 +338,13 @@ static void addSourceLocationAbbrev(llvm::BitCodeAbbrev *Abbrev) {
 }
 
 /// \brief Emit bitcode for abbreviation for source ranges.
-static void addRangeLocationAbbrev(llvm::BitCodeAbbrev *Abbrev) {
+static void addRangeLocationAbbrev(std::shared_ptr<llvm::BitCodeAbbrev> Abbrev) {
   addSourceLocationAbbrev(Abbrev);
   addSourceLocationAbbrev(Abbrev);
 }
 
 void SerializedDiagnosticConsumer::emitBlockInfoBlock() {
-  State->Stream.EnterBlockInfoBlock(3);
+  State->Stream.EnterBlockInfoBlock();
 
   using namespace llvm;
   llvm::BitstreamWriter &Stream = State->Stream;
@@ -357,7 +357,7 @@ void SerializedDiagnosticConsumer::emitBlockInfoBlock() {
 
   emitBlockID(BLOCK_META, "Meta", Stream, Record);
   emitRecordID(RECORD_VERSION, "Version", Stream, Record);
-  BitCodeAbbrev *Abbrev = new BitCodeAbbrev();
+  auto Abbrev = std::make_shared<BitCodeAbbrev>();
   Abbrev->Add(BitCodeAbbrevOp(RECORD_VERSION));
   Abbrev->Add(BitCodeAbbrevOp(BitCodeAbbrevOp::Fixed, 32));
   Abbrevs.set(RECORD_VERSION, Stream.EmitBlockInfoAbbrev(BLOCK_META, Abbrev));
@@ -375,7 +375,7 @@ void SerializedDiagnosticConsumer::emitBlockInfoBlock() {
   emitRecordID(RECORD_FIXIT, "FixIt", Stream, Record);
 
   // Emit abbreviation for RECORD_DIAG.
-  Abbrev = new BitCodeAbbrev();
+  Abbrev = std::make_shared<BitCodeAbbrev>();
   Abbrev->Add(BitCodeAbbrevOp(RECORD_DIAG));
   Abbrev->Add(BitCodeAbbrevOp(BitCodeAbbrevOp::Fixed, 3));  // Diag level.
   addSourceLocationAbbrev(Abbrev);
@@ -386,7 +386,7 @@ void SerializedDiagnosticConsumer::emitBlockInfoBlock() {
   Abbrevs.set(RECORD_DIAG, Stream.EmitBlockInfoAbbrev(BLOCK_DIAG, Abbrev));
 
   // Emit abbreviation for RECORD_CATEGORY.
-  Abbrev = new BitCodeAbbrev();
+  Abbrev = std::make_shared<BitCodeAbbrev>();
   Abbrev->Add(BitCodeAbbrevOp(RECORD_CATEGORY));
   Abbrev->Add(BitCodeAbbrevOp(BitCodeAbbrevOp::Fixed, 16)); // Category ID.
   Abbrev->Add(BitCodeAbbrevOp(BitCodeAbbrevOp::Fixed, 8));  // Text size.
@@ -394,14 +394,14 @@ void SerializedDiagnosticConsumer::emitBlockInfoBlock() {
   Abbrevs.set(RECORD_CATEGORY, Stream.EmitBlockInfoAbbrev(BLOCK_DIAG, Abbrev));
 
   // Emit abbreviation for RECORD_SOURCE_RANGE.
-  Abbrev = new BitCodeAbbrev();
+  Abbrev = std::make_shared<BitCodeAbbrev>();
   Abbrev->Add(BitCodeAbbrevOp(RECORD_SOURCE_RANGE));
   addRangeLocationAbbrev(Abbrev);
   Abbrevs.set(RECORD_SOURCE_RANGE,
               Stream.EmitBlockInfoAbbrev(BLOCK_DIAG, Abbrev));
 
   // Emit the abbreviation for RECORD_DIAG_FLAG.
-  Abbrev = new BitCodeAbbrev();
+  Abbrev = std::make_shared<BitCodeAbbrev>();
   Abbrev->Add(BitCodeAbbrevOp(RECORD_DIAG_FLAG));
   Abbrev->Add(BitCodeAbbrevOp(BitCodeAbbrevOp::Fixed, 10)); // Mapped Diag ID.
   Abbrev->Add(BitCodeAbbrevOp(BitCodeAbbrevOp::Fixed, 16)); // Text size.
@@ -410,7 +410,7 @@ void SerializedDiagnosticConsumer::emitBlockInfoBlock() {
                                                            Abbrev));
 
   // Emit the abbreviation for RECORD_FILENAME.
-  Abbrev = new BitCodeAbbrev();
+  Abbrev = std::make_shared<BitCodeAbbrev>();
   Abbrev->Add(BitCodeAbbrevOp(RECORD_FILENAME));
   Abbrev->Add(BitCodeAbbrevOp(BitCodeAbbrevOp::Fixed, 10)); // Mapped file ID.
   Abbrev->Add(BitCodeAbbrevOp(BitCodeAbbrevOp::Fixed, 32)); // Size.
@@ -421,7 +421,7 @@ void SerializedDiagnosticConsumer::emitBlockInfoBlock() {
                                                           Abbrev));
 
   // Emit the abbreviation for RECORD_FIXIT.
-  Abbrev = new BitCodeAbbrev();
+  Abbrev = std::make_shared<BitCodeAbbrev>();
   Abbrev->Add(BitCodeAbbrevOp(RECORD_FIXIT));
   addRangeLocationAbbrev(Abbrev);
   Abbrev->Add(BitCodeAbbrevOp(BitCodeAbbrevOp::Fixed, 16)); // Text size.
diff --git a/lib/IDE/CodeCompletionCache.cpp b/lib/IDE/CodeCompletionCache.cpp
index e3fc0cea05..8b3b56fb92 100644
--- a/lib/IDE/CodeCompletionCache.cpp
+++ b/lib/IDE/CodeCompletionCache.cpp
@@ -77,7 +77,7 @@ void CodeCompletionCache::setImpl(const Key &K, ValueRefCntPtr V,
 
     llvm::sys::fs::file_status ModuleStatus;
     if (llvm::sys::fs::status(K.ModuleFilename, ModuleStatus)) {
-      V->ModuleModificationTime = llvm::sys::TimeValue::now();
+      V->ModuleModificationTime = std::chrono::system_clock::now();
       return;
     } else {
       V->ModuleModificationTime = ModuleStatus.getLastModificationTime();
@@ -153,7 +153,8 @@ static bool readCachedModule(llvm::MemoryBuffer *in,
     if (!allowOutOfDate) {
       llvm::sys::fs::file_status status;
       if (llvm::sys::fs::status(K.ModuleFilename, status) ||
-          status.getLastModificationTime().toEpochTime() != mtime) {
+          status.getLastModificationTime().time_since_epoch().count() !=
+          std::chrono::nanoseconds(mtime).count()) {
         return false; // Out of date, or doesn't exist.
       }
     }
@@ -293,7 +294,8 @@ static void writeCachedModule(llvm::raw_ostream &out,
   // HEADER
   // Metadata required for reading the completions.
   LE.write(onDiskCompletionCacheVersion);           // Version
-  LE.write(V.ModuleModificationTime.toEpochTime()); // Mtime for module file
+  auto mtime = V.ModuleModificationTime.time_since_epoch().count();
+  LE.write(mtime);                                  // Mtime for module file
 
   // KEY
   // We don't need the stored key to load the results, but it is useful if we
diff --git a/lib/IRGen/GenCall.cpp b/lib/IRGen/GenCall.cpp
index d3b6c7f95d..012bce5cca 100644
--- a/lib/IRGen/GenCall.cpp
+++ b/lib/IRGen/GenCall.cpp
@@ -552,17 +552,17 @@ namespace {
     }
 
     llvm::Type *convertFloatingType(const llvm::fltSemantics &format) {
-      if (&format == &llvm::APFloat::IEEEhalf)
+      if (&format == &llvm::APFloat::IEEEhalf())
         return llvm::Type::getHalfTy(IGM.getLLVMContext());
-      if (&format == &llvm::APFloat::IEEEsingle)
+      if (&format == &llvm::APFloat::IEEEsingle())
         return llvm::Type::getFloatTy(IGM.getLLVMContext());
-      if (&format == &llvm::APFloat::IEEEdouble)
+      if (&format == &llvm::APFloat::IEEEdouble())
         return llvm::Type::getDoubleTy(IGM.getLLVMContext());
-      if (&format == &llvm::APFloat::IEEEquad)
+      if (&format == &llvm::APFloat::IEEEquad())
         return llvm::Type::getFP128Ty(IGM.getLLVMContext());
-      if (&format == &llvm::APFloat::PPCDoubleDouble)
+      if (&format == &llvm::APFloat::PPCDoubleDouble())
         return llvm::Type::getPPC_FP128Ty(IGM.getLLVMContext());
-      if (&format == &llvm::APFloat::x87DoubleExtended)
+      if (&format == &llvm::APFloat::x87DoubleExtended())
         return llvm::Type::getX86_FP80Ty(IGM.getLLVMContext());
       llvm_unreachable("bad float format");
     }
diff --git a/lib/IRGen/GenDecl.cpp b/lib/IRGen/GenDecl.cpp
index f649e7d3e2..849122f7ee 100644
--- a/lib/IRGen/GenDecl.cpp
+++ b/lib/IRGen/GenDecl.cpp
@@ -2965,19 +2965,19 @@ llvm::Constant *IRGenModule::getAddrOfGlobalUTF16String(StringRef utf8) {
   if (entry) return entry;
 
   // If not, first transcode it to UTF16.
-  SmallVector<UTF16, 128> buffer(utf8.size() + 1); // +1 for ending nulls.
-  const UTF8 *fromPtr = (const UTF8 *) utf8.data();
-  UTF16 *toPtr = &buffer[0];
+  SmallVector<llvm::UTF16, 128> buffer(utf8.size() + 1); // +1 for ending nulls.
+  const llvm::UTF8 *fromPtr = (const llvm::UTF8 *) utf8.data();
+  llvm::UTF16 *toPtr = &buffer[0];
   (void) ConvertUTF8toUTF16(&fromPtr, fromPtr + utf8.size(),
                             &toPtr, toPtr + utf8.size(),
-                            strictConversion);
+                            llvm::strictConversion);
 
   // The length of the transcoded string in UTF-8 code points.
   size_t utf16Length = toPtr - &buffer[0];
 
   // Null-terminate the UTF-16 string.
   *toPtr = 0;
-  ArrayRef<UTF16> utf16(&buffer[0], utf16Length + 1);
+  ArrayRef<llvm::UTF16> utf16(&buffer[0], utf16Length + 1);
 
   auto init = llvm::ConstantDataArray::get(LLVMContext, utf16);
   auto global = new llvm::GlobalVariable(Module, init->getType(), true,
diff --git a/lib/IRGen/IRGen.cpp b/lib/IRGen/IRGen.cpp
index 3402e05c08..1b4d4d4372 100644
--- a/lib/IRGen/IRGen.cpp
+++ b/lib/IRGen/IRGen.cpp
@@ -36,7 +36,7 @@
 #include "swift/SILOptimizer/PassManager/PassPipeline.h"
 #include "clang/Basic/TargetInfo.h"
 #include "llvm/Bitcode/BitcodeWriterPass.h"
-#include "llvm/Bitcode/ReaderWriter.h"
+#include "llvm/Bitcode/BitcodeWriter.h"
 #include "llvm/CodeGen/BasicTTIImpl.h"
 #include "llvm/IR/Constants.h"
 #include "llvm/IR/DataLayout.h"
@@ -61,6 +61,7 @@
 #include "llvm/Target/TargetSubtargetInfo.h"
 #include "llvm/Transforms/Instrumentation.h"
 #include "llvm/Transforms/IPO.h"
+#include "llvm/Transforms/IPO/AlwaysInliner.h"
 #include "llvm/Transforms/IPO/PassManagerBuilder.h"
 #include "llvm/Transforms/ObjCARC.h"
 #include "llvm/Object/ObjectFile.h"
@@ -159,7 +160,7 @@ void swift::performLLVMOptimizations(IRGenOptions &Opts, llvm::Module *Module,
     PMBuilder.OptLevel = 0;
     if (!Opts.DisableLLVMOptzns)
       PMBuilder.Inliner =
-        llvm::createAlwaysInlinerPass(/*insertlifetime*/false);
+        llvm::createAlwaysInlinerLegacyPass(/*insertlifetime*/false);
   }
 
   // If the optimizer is enabled, we run the ARCOpt pass in the scalar optimizer
diff --git a/lib/IRGen/IRGenDebugInfo.cpp b/lib/IRGen/IRGenDebugInfo.cpp
index f64301a583..47584d44b0 100644
--- a/lib/IRGen/IRGenDebugInfo.cpp
+++ b/lib/IRGen/IRGenDebugInfo.cpp
@@ -135,12 +135,12 @@ IRGenDebugInfo::IRGenDebugInfo(const IRGenOptions &Opts,
   // Note that File + Dir need not result in a valid path.
   // Clang is doing the same thing here.
   TheCU = DBuilder.createCompileUnit(
-      Lang, AbsMainFile, Opts.DebugCompilationDir, Producer, IsOptimized,
+      Lang, DBuilder.createFile(AbsMainFile, Opts.DebugCompilationDir), Producer, IsOptimized,
       Flags, MajorRuntimeVersion, SplitName,
       Opts.DebugInfoKind > IRGenDebugInfoKind::LineTables
           ? llvm::DICompileUnit::FullDebug
           : llvm::DICompileUnit::LineTablesOnly);
-  MainFile = getOrCreateFile(BumpAllocatedString(AbsMainFile).data());
+  MainFile = getOrCreateFile(BumpAllocatedString(AbsMainFile));
 
   // Because the swift compiler relies on Clang to setup the Module,
   // the clang CU is always created first.  Several dwarf-reading
@@ -162,22 +162,15 @@ IRGenDebugInfo::IRGenDebugInfo(const IRGenOptions &Opts,
   DBuilder.createImportedModule(MainFile, MainModule, 1);
 }
 
-static const char *getFilenameFromDC(const DeclContext *DC) {
-  if (auto LF = dyn_cast<LoadedFile>(DC)) {
-    // FIXME: Today, the subclasses of LoadedFile happen to return StringRefs
-    // that are backed by null-terminated strings, but that's certainly not
-    // guaranteed in the future.
-    StringRef Fn = LF->getFilename();
-    assert(((Fn.size() == 0) ||
-            (Fn.data()[Fn.size()] == '\0')) && "not a C string");
-    return Fn.data();
-  }
+static StringRef getFilenameFromDC(const DeclContext *DC) {
+  if (auto LF = dyn_cast<LoadedFile>(DC))
+    return LF->getFilename();
   if (auto SF = dyn_cast<SourceFile>(DC))
-    return SF->getFilename().data();
+    return SF->getFilename();
   else if (auto M = dyn_cast<Module>(DC))
-    return M->getModuleFilename().data();
+    return M->getModuleFilename();
   else
-    return nullptr;
+    return StringRef();
 }
 
 SILLocation::DebugLoc getDeserializedLoc(Pattern *) { return {}; }
@@ -186,7 +179,8 @@ SILLocation::DebugLoc getDeserializedLoc(Stmt *) { return {}; }
 SILLocation::DebugLoc getDeserializedLoc(Decl *D) {
   SILLocation::DebugLoc L;
   const DeclContext *DC = D->getDeclContext()->getModuleScopeContext();
-  if (const char *Filename = getFilenameFromDC(DC))
+  StringRef Filename = getFilenameFromDC(DC);
+  if (!Filename.empty())
     L.Filename = Filename;
   return L;
 }
@@ -413,8 +407,8 @@ llvm::DIScope *IRGenDebugInfo::getOrCreateScope(const SILDebugScope *DS) {
   return DScope;
 }
 
-llvm::DIFile *IRGenDebugInfo::getOrCreateFile(const char *Filename) {
-  if (!Filename)
+llvm::DIFile *IRGenDebugInfo::getOrCreateFile(StringRef Filename) {
+  if (Filename.empty())
     return MainFile;
 
   if (MainFile) {
@@ -677,7 +671,7 @@ llvm::DISubprogram *IRGenDebugInfo::emitFunction(
 
   // We know that main always comes from MainFile.
   if (LinkageName == SWIFT_ENTRY_POINT_FUNCTION) {
-    if (!L.Filename)
+    if (L.Filename.empty())
       File = MainFile;
     Line = 1;
     Name = LinkageName;
@@ -695,7 +689,7 @@ llvm::DISubprogram *IRGenDebugInfo::emitFunction(
   bool IsLocalToUnit = Fn ? Fn->hasInternalLinkage() : true;
   bool IsDefinition = true;
   bool IsOptimized = Opts.Optimize;
-  unsigned Flags = 0;
+  llvm::DINode::DIFlags Flags = llvm::DINode::FlagZero;
 
   // Mark everything that is not visible from the source code (i.e.,
   // does not have a Swift name) as artificial, so the debugger can
@@ -760,8 +754,7 @@ void IRGenDebugInfo::emitImport(ImportDecl *D) {
 
 llvm::DIModule *
 IRGenDebugInfo::getOrCreateModule(ModuleDecl::ImportedModule M) {
-  const char *fn = getFilenameFromDC(M.second);
-  StringRef Path(fn ? fn : "");
+  StringRef Path = getFilenameFromDC(M.second);
   if (M.first.empty()) {
     StringRef Name = M.second->getName().str();
     return getOrCreateModule(Name, TheCU, Name, Path);
@@ -906,7 +899,7 @@ void IRGenDebugInfo::emitVariableDeclaration(
   assert(DITy && "could not determine debug type of variable");
 
   unsigned Line = Loc.Line;
-  unsigned Flags = 0;
+  llvm::DINode::DIFlags Flags = llvm::DINode::FlagZero;
   if (Artificial || DITy->isArtificial() || DITy == InternalType)
     Flags |= llvm::DINode::FlagArtificial;
 
@@ -1023,7 +1016,7 @@ void IRGenDebugInfo::emitGlobalVariableDeclaration(
 
   // Emit it as global variable of the current module.
   auto *Expr = Var ? nullptr : DBuilder.createConstantValueExpression(0);
-  auto *GV = DBuilder.createGlobalVariable(MainModule, Name, LinkageName, File,
+  auto *GV = DBuilder.createGlobalVariableExpression(MainModule, Name, LinkageName, File,
                                            L.Line, Ty, IsLocalToUnit, Expr);
   if (Var)
     Var->addDebugInfo(GV);
@@ -1041,7 +1034,8 @@ StringRef IRGenDebugInfo::getMangledName(DebugTypeInfo DbgTy) {
 llvm::DIDerivedType *
 IRGenDebugInfo::createMemberType(DebugTypeInfo DbgTy, StringRef Name,
                                  unsigned &OffsetInBits, llvm::DIScope *Scope,
-                                 llvm::DIFile *File, unsigned Flags) {
+                                 llvm::DIFile *File,
+                                 llvm::DINode::DIFlags Flags) {
   unsigned SizeOfByte = CI.getTargetInfo().getCharWidth();
   auto *Ty = getOrCreateType(DbgTy);
   auto *DITy = DBuilder.createMemberType(
@@ -1055,7 +1049,8 @@ IRGenDebugInfo::createMemberType(DebugTypeInfo DbgTy, StringRef Name,
 
 llvm::DINodeArray IRGenDebugInfo::getTupleElements(
     TupleType *TupleTy, llvm::DIScope *Scope, llvm::DIFile *File,
-    unsigned Flags, DeclContext *DeclContext, unsigned &SizeInBits) {
+    llvm::DINode::DIFlags Flags, DeclContext *DeclContext,
+    unsigned &SizeInBits) {
   SmallVector<llvm::Metadata *, 16> Elements;
   unsigned OffsetInBits = 0;
   auto genericSig = IGM.getSILTypes().getCurGenericContext();
@@ -1075,7 +1070,8 @@ llvm::DINodeArray IRGenDebugInfo::getTupleElements(
 llvm::DINodeArray
 IRGenDebugInfo::getStructMembers(NominalTypeDecl *D, Type BaseTy,
                                  llvm::DIScope *Scope, llvm::DIFile *File,
-                                 unsigned Flags, unsigned &SizeInBits) {
+                                 llvm::DINode::DIFlags Flags,
+                                 unsigned &SizeInBits) {
   SmallVector<llvm::Metadata *, 16> Elements;
   unsigned OffsetInBits = 0;
   for (VarDecl *VD : D->getStoredProperties()) {
@@ -1097,7 +1093,7 @@ IRGenDebugInfo::getStructMembers(NominalTypeDecl *D, Type BaseTy,
 llvm::DICompositeType *IRGenDebugInfo::createStructType(
     DebugTypeInfo DbgTy, NominalTypeDecl *Decl, Type BaseTy,
     llvm::DIScope *Scope, llvm::DIFile *File, unsigned Line,
-    unsigned SizeInBits, unsigned AlignInBits, unsigned Flags,
+    unsigned SizeInBits, unsigned AlignInBits, llvm::DINode::DIFlags Flags,
     llvm::DIType *DerivedFrom, unsigned RuntimeLang, StringRef UniqueID) {
   StringRef Name = Decl->getName().str();
 
@@ -1130,7 +1126,7 @@ llvm::DINodeArray IRGenDebugInfo::getEnumElements(DebugTypeInfo DbgTy,
                                                   EnumDecl *ED,
                                                   llvm::DIScope *Scope,
                                                   llvm::DIFile *File,
-                                                  unsigned Flags) {
+                                                  llvm::DINode::DIFlags Flags) {
   SmallVector<llvm::Metadata *, 16> Elements;
 
   for (auto *ElemDecl : ED->getAllElements()) {
@@ -1168,7 +1164,8 @@ llvm::DINodeArray IRGenDebugInfo::getEnumElements(DebugTypeInfo DbgTy,
 
 llvm::DICompositeType *IRGenDebugInfo::createEnumType(
     DebugTypeInfo DbgTy, EnumDecl *Decl, StringRef MangledName,
-    llvm::DIScope *Scope, llvm::DIFile *File, unsigned Line, unsigned Flags) {
+    llvm::DIScope *Scope, llvm::DIFile *File, unsigned Line,
+    llvm::DINode::DIFlags Flags) {
   unsigned SizeOfByte = CI.getTargetInfo().getCharWidth();
   unsigned SizeInBits = DbgTy.size.getValue() * SizeOfByte;
   unsigned AlignInBits = DbgTy.align.getValue() * SizeOfByte;
@@ -1218,7 +1215,7 @@ uint64_t IRGenDebugInfo::getSizeOfBasicType(DebugTypeInfo DbgTy) {
 
 llvm::DIType *IRGenDebugInfo::createPointerSizedStruct(
     llvm::DIScope *Scope, StringRef Name, llvm::DIFile *File, unsigned Line,
-    unsigned Flags, StringRef MangledName) {
+    llvm::DINode::DIFlags Flags, StringRef MangledName) {
   if (Opts.DebugInfoKind > IRGenDebugInfoKind::ASTTypes) {
     auto FwdDecl = DBuilder.createForwardDecl(
         llvm::dwarf::DW_TAG_structure_type, Name, Scope, File, Line,
@@ -1235,7 +1232,8 @@ llvm::DIType *IRGenDebugInfo::createPointerSizedStruct(
 
 llvm::DIType *IRGenDebugInfo::createPointerSizedStruct(
     llvm::DIScope *Scope, StringRef Name, llvm::DIType *PointeeTy,
-    llvm::DIFile *File, unsigned Line, unsigned Flags, StringRef MangledName) {
+    llvm::DIFile *File, unsigned Line, llvm::DINode::DIFlags Flags,
+    StringRef MangledName) {
   unsigned PtrSize = CI.getTargetInfo().getPointerWidth(0);
   unsigned PtrAlign = CI.getTargetInfo().getPointerAlign(0);
   auto PtrTy = DBuilder.createPointerType(PointeeTy, PtrSize, PtrAlign);
@@ -1251,7 +1249,8 @@ llvm::DIType *IRGenDebugInfo::createPointerSizedStruct(
 
 llvm::DIType *IRGenDebugInfo::createDoublePointerSizedStruct(
     llvm::DIScope *Scope, StringRef Name, llvm::DIType *PointeeTy,
-    llvm::DIFile *File, unsigned Line, unsigned Flags, StringRef MangledName) {
+    llvm::DIFile *File, unsigned Line, llvm::DINode::DIFlags Flags,
+    StringRef MangledName) {
   unsigned PtrSize = CI.getTargetInfo().getPointerWidth(0);
   unsigned PtrAlign = CI.getTargetInfo().getPointerAlign(0);
   llvm::Metadata *Elements[] = {
@@ -1270,7 +1269,8 @@ llvm::DIType *IRGenDebugInfo::createDoublePointerSizedStruct(
 llvm::DIType *
 IRGenDebugInfo::createFunctionPointer(DebugTypeInfo DbgTy, llvm::DIScope *Scope,
                                       unsigned SizeInBits, unsigned AlignInBits,
-                                      unsigned Flags, StringRef MangledName) {
+                                      llvm::DINode::DIFlags Flags,
+                                      StringRef MangledName) {
   auto FwdDecl = llvm::TempDINode(DBuilder.createReplaceableCompositeType(
       llvm::dwarf::DW_TAG_subroutine_type, MangledName, Scope, MainFile, 0,
       llvm::dwarf::DW_LANG_Swift, SizeInBits, AlignInBits, Flags, MangledName));
@@ -1318,7 +1318,8 @@ IRGenDebugInfo::createFunctionPointer(DebugTypeInfo DbgTy, llvm::DIScope *Scope,
 llvm::DIType *IRGenDebugInfo::createTuple(DebugTypeInfo DbgTy,
                                           llvm::DIScope *Scope,
                                           unsigned SizeInBits,
-                                          unsigned AlignInBits, unsigned Flags,
+                                          unsigned AlignInBits,
+                                          llvm::DINode::DIFlags Flags,
                                           StringRef MangledName) {
   TypeBase *BaseTy = DbgTy.getType();
   auto *TupleTy = BaseTy->castTo<TupleType>();
@@ -1348,7 +1349,8 @@ llvm::DIType *
 IRGenDebugInfo::createOpaqueStruct(llvm::DIScope *Scope, StringRef Name,
                                    llvm::DIFile *File, unsigned Line,
                                    unsigned SizeInBits, unsigned AlignInBits,
-                                   unsigned Flags, StringRef MangledName) {
+                                   llvm::DINode::DIFlags Flags,
+                                   StringRef MangledName) {
   return DBuilder.createStructType(
       Scope, Name, File, Line, SizeInBits, AlignInBits, Flags,
       /* DerivedFrom */ nullptr,
@@ -1369,7 +1371,7 @@ llvm::DIType *IRGenDebugInfo::createType(DebugTypeInfo DbgTy,
   uint64_t SizeInBits = DbgTy.size.getValue() * SizeOfByte;
   uint64_t AlignInBits = DbgTy.align.getValue() * SizeOfByte;
   unsigned Encoding = 0;
-  unsigned Flags = 0;
+  llvm::DINode::DIFlags Flags = llvm::DINode::FlagZero;
 
   TypeBase *BaseTy = DbgTy.getType();
 
@@ -1751,8 +1753,7 @@ llvm::DIType *IRGenDebugInfo::createType(DebugTypeInfo DbgTy,
           llvm::errs() << "\n");
     MangledName = "<unknown>";
   }
-  return DBuilder.createBasicType(MangledName, SizeInBits, AlignInBits,
-                                  Encoding);
+  return DBuilder.createBasicType(MangledName, SizeInBits, Encoding);
 }
 
 /// Determine if there exists a name mangling for the given type.
diff --git a/lib/IRGen/IRGenDebugInfo.h b/lib/IRGen/IRGenDebugInfo.h
index 548ea4b9ce..7b317bc90f 100644
--- a/lib/IRGen/IRGenDebugInfo.h
+++ b/lib/IRGen/IRGenDebugInfo.h
@@ -63,7 +63,7 @@ class IRGenDebugInfo {
 
   // Various caches.
   llvm::DenseMap<const SILDebugScope *, llvm::TrackingMDNodeRef> ScopeCache;
-  llvm::DenseMap<const char *, llvm::TrackingMDNodeRef> DIFileCache;
+  llvm::DenseMap<llvm::StringRef, llvm::TrackingMDNodeRef> DIFileCache;
   llvm::DenseMap<TypeBase *, llvm::TrackingMDNodeRef> DITypeCache;
   llvm::StringMap<llvm::TrackingMDNodeRef> DIModuleCache;
   TrackingDIRefMap DIRefMap;
@@ -243,7 +243,7 @@ private:
   llvm::MDNode *createInlinedAt(const SILDebugScope *CallSite);
 
   /// Translate filenames into DIFiles.
-  llvm::DIFile *getOrCreateFile(const char *Filename);
+  llvm::DIFile *getOrCreateFile(StringRef Filename);
   /// Return a DIType for Ty reusing any DeclContext found in DbgTy.
   llvm::DIType *getOrCreateDesugaredType(Type Ty, DebugTypeInfo DbgTy);
 
@@ -266,7 +266,8 @@ private:
                            SILType CanTy, DeclContext *DeclCtx);
   /// Return an array with the DITypes for each of a tuple's elements.
   llvm::DINodeArray getTupleElements(TupleType *TupleTy, llvm::DIScope *Scope,
-                                     llvm::DIFile *File, unsigned Flags,
+                                     llvm::DIFile *File,
+                                     llvm::DINode::DIFlags Flags,
                                      DeclContext *DeclContext,
                                      unsigned &SizeInBits);
   llvm::DIFile *getFile(llvm::DIScope *Scope);
@@ -278,13 +279,15 @@ private:
   /// Return an array with the DITypes for each of a struct's elements.
   llvm::DINodeArray getStructMembers(NominalTypeDecl *D, Type BaseTy,
                                      llvm::DIScope *Scope, llvm::DIFile *File,
-                                     unsigned Flags, unsigned &SizeInBits);
+                                     llvm::DINode::DIFlags Flags,
+                                     unsigned &SizeInBits);
   /// Create a temporary forward declaration for a struct and add it to
   /// the type cache so we can safely build recursive types.
   llvm::DICompositeType *
   createStructType(DebugTypeInfo DbgTy, NominalTypeDecl *Decl, Type BaseTy,
                    llvm::DIScope *Scope, llvm::DIFile *File, unsigned Line,
-                   unsigned SizeInBits, unsigned AlignInBits, unsigned Flags,
+                   unsigned SizeInBits, unsigned AlignInBits,
+                   llvm::DINode::DIFlags Flags,
                    llvm::DIType *DerivedFrom, unsigned RuntimeLang,
                    StringRef UniqueID);
 
@@ -292,49 +295,55 @@ private:
   llvm::DIDerivedType *createMemberType(DebugTypeInfo DbgTy, StringRef Name,
                                         unsigned &OffsetInBits,
                                         llvm::DIScope *Scope,
-                                        llvm::DIFile *File, unsigned Flags);
+                                        llvm::DIFile *File,
+                                        llvm::DINode::DIFlags Flags);
   /// Return an array with the DITypes for each of an enum's elements.
   llvm::DINodeArray getEnumElements(DebugTypeInfo DbgTy, EnumDecl *D,
                                     llvm::DIScope *Scope, llvm::DIFile *File,
-                                    unsigned Flags);
+                                    llvm::DINode::DIFlags Flags);
   /// Create a temporary forward declaration for an enum and add it to
   /// the type cache so we can safely build recursive types.
   llvm::DICompositeType *createEnumType(DebugTypeInfo DbgTy, EnumDecl *Decl,
                                         StringRef MangledName,
                                         llvm::DIScope *Scope,
                                         llvm::DIFile *File, unsigned Line,
-                                        unsigned Flags);
+                                        llvm::DINode::DIFlags Flags);
   /// Convenience function that creates a forward declaration for PointeeTy.
   llvm::DIType *createPointerSizedStruct(llvm::DIScope *Scope, StringRef Name,
                                          llvm::DIFile *File, unsigned Line,
-                                         unsigned Flags, StringRef MangledName);
+                                         llvm::DINode::DIFlags Flags,
+                                         StringRef MangledName);
   /// Create a pointer-sized struct with a mangled name and a single
   /// member of PointeeTy.
   llvm::DIType *createPointerSizedStruct(llvm::DIScope *Scope, StringRef Name,
                                          llvm::DIType *PointeeTy,
                                          llvm::DIFile *File, unsigned Line,
-                                         unsigned Flags, StringRef MangledName);
+                                         llvm::DINode::DIFlags Flags,
+                                         StringRef MangledName);
   /// Create a 2*pointer-sized struct with a mangled name and a single
   /// member of PointeeTy.
   llvm::DIType *createDoublePointerSizedStruct(
       llvm::DIScope *Scope, StringRef Name, llvm::DIType *PointeeTy,
-      llvm::DIFile *File, unsigned Line, unsigned Flags, StringRef MangledName);
+      llvm::DIFile *File, unsigned Line, llvm::DINode::DIFlags Flags,
+      StringRef MangledName);
 
   /// Create DWARF debug info for a function pointer type.
   llvm::DIType *createFunctionPointer(DebugTypeInfo DbgTy, llvm::DIScope *Scope,
                                       unsigned SizeInBits, unsigned AlignInBits,
-                                      unsigned Flags, StringRef MangledName);
+                                      llvm::DINode::DIFlags Flags,
+                                      StringRef MangledName);
 
   /// Create DWARF debug info for a tuple type.
   llvm::DIType *createTuple(DebugTypeInfo DbgTy, llvm::DIScope *Scope,
                             unsigned SizeInBits, unsigned AlignInBits,
-                            unsigned Flags, StringRef MangledName);
+                            llvm::DINode::DIFlags Flags, StringRef MangledName);
 
   /// Create an opaque struct with a mangled name.
   llvm::DIType *createOpaqueStruct(llvm::DIScope *Scope, StringRef Name,
                                    llvm::DIFile *File, unsigned Line,
                                    unsigned SizeInBits, unsigned AlignInBits,
-                                   unsigned Flags, StringRef MangledName);
+                                   llvm::DINode::DIFlags Flags,
+                                   StringRef MangledName);
   uint64_t getSizeOfBasicType(DebugTypeInfo DbgTy);
   TypeAliasDecl *getMetadataType();
 };
diff --git a/lib/Immediate/REPL.cpp b/lib/Immediate/REPL.cpp
index abb57f6f5c..e7d0d4297f 100644
--- a/lib/Immediate/REPL.cpp
+++ b/lib/Immediate/REPL.cpp
@@ -75,56 +75,58 @@ class ConvertForWcharSize;
 template<>
 class ConvertForWcharSize<2> {
 public:
-  static ConversionResult ConvertFromUTF8(const char** sourceStart,
-                                          const char* sourceEnd,
-                                          wchar_t** targetStart,
-                                          wchar_t* targetEnd,
-                                          ConversionFlags flags) {
-    return ConvertUTF8toUTF16(reinterpret_cast<const UTF8**>(sourceStart),
-                              reinterpret_cast<const UTF8*>(sourceEnd),
-                              reinterpret_cast<UTF16**>(targetStart),
-                              reinterpret_cast<UTF16*>(targetEnd),
+  static llvm::ConversionResult ConvertFromUTF8(const char** sourceStart,
+                                                const char* sourceEnd,
+                                                wchar_t** targetStart,
+                                                wchar_t* targetEnd,
+                                                llvm::ConversionFlags flags) {
+    return ConvertUTF8toUTF16(reinterpret_cast<const llvm::UTF8**>(sourceStart),
+                              reinterpret_cast<const llvm::UTF8*>(sourceEnd),
+                              reinterpret_cast<llvm::UTF16**>(targetStart),
+                              reinterpret_cast<llvm::UTF16*>(targetEnd),
                               flags);
   }
   
-  static ConversionResult ConvertToUTF8(const wchar_t** sourceStart,
-                                        const wchar_t* sourceEnd,
-                                        char** targetStart,
-                                        char* targetEnd,
-                                        ConversionFlags flags) {
-    return ConvertUTF16toUTF8(reinterpret_cast<const UTF16**>(sourceStart),
-                              reinterpret_cast<const UTF16*>(sourceEnd),
-                              reinterpret_cast<UTF8**>(targetStart),
-                              reinterpret_cast<UTF8*>(targetEnd),
-                              flags);
+  static llvm::ConversionResult ConvertToUTF8(const wchar_t** sourceStart,
+                                              const wchar_t* sourceEnd,
+                                              char** targetStart,
+                                              char* targetEnd,
+                                              llvm::ConversionFlags flags) {
+    return ConvertUTF16toUTF8(
+                             reinterpret_cast<const llvm::UTF16**>(sourceStart),
+                             reinterpret_cast<const llvm::UTF16*>(sourceEnd),
+                             reinterpret_cast<llvm::UTF8**>(targetStart),
+                             reinterpret_cast<llvm::UTF8*>(targetEnd),
+                             flags);
   }
 };
 
 template<>
 class ConvertForWcharSize<4> {
 public:
-  static ConversionResult ConvertFromUTF8(const char** sourceStart,
-                                          const char* sourceEnd,
-                                          wchar_t** targetStart,
-                                          wchar_t* targetEnd,
-                                          ConversionFlags flags) {
-    return ConvertUTF8toUTF32(reinterpret_cast<const UTF8**>(sourceStart),
-                              reinterpret_cast<const UTF8*>(sourceEnd),
-                              reinterpret_cast<UTF32**>(targetStart),
-                              reinterpret_cast<UTF32*>(targetEnd),
+  static llvm::ConversionResult ConvertFromUTF8(const char** sourceStart,
+                                                const char* sourceEnd,
+                                                wchar_t** targetStart,
+                                                wchar_t* targetEnd,
+                                                llvm::ConversionFlags flags) {
+    return ConvertUTF8toUTF32(reinterpret_cast<const llvm::UTF8**>(sourceStart),
+                              reinterpret_cast<const llvm::UTF8*>(sourceEnd),
+                              reinterpret_cast<llvm::UTF32**>(targetStart),
+                              reinterpret_cast<llvm::UTF32*>(targetEnd),
                               flags);
   }
   
-  static ConversionResult ConvertToUTF8(const wchar_t** sourceStart,
-                                        const wchar_t* sourceEnd,
-                                        char** targetStart,
-                                        char* targetEnd,
-                                        ConversionFlags flags) {
-    return ConvertUTF32toUTF8(reinterpret_cast<const UTF32**>(sourceStart),
-                              reinterpret_cast<const UTF32*>(sourceEnd),
-                              reinterpret_cast<UTF8**>(targetStart),
-                              reinterpret_cast<UTF8*>(targetEnd),
-                              flags);
+  static llvm::ConversionResult ConvertToUTF8(const wchar_t** sourceStart,
+                                              const wchar_t* sourceEnd,
+                                              char** targetStart,
+                                              char* targetEnd,
+                                              llvm::ConversionFlags flags) {
+    return ConvertUTF32toUTF8(
+                             reinterpret_cast<const llvm::UTF32**>(sourceStart),
+                             reinterpret_cast<const llvm::UTF32*>(sourceEnd),
+                             reinterpret_cast<llvm::UTF8**>(targetStart),
+                             reinterpret_cast<llvm::UTF8*>(targetEnd),
+                             flags);
   }
 };
 
@@ -139,8 +141,8 @@ static void convertFromUTF8(llvm::StringRef utf8,
   wchar_t *wide_begin = out.end();
   auto res = Convert::ConvertFromUTF8(&utf8_begin, utf8.end(),
                                       &wide_begin, out.data() + reserve,
-                                      lenientConversion);
-  assert(res == conversionOK && "utf8-to-wide conversion failed!");
+                                      llvm::lenientConversion);
+  assert(res == llvm::conversionOK && "utf8-to-wide conversion failed!");
   (void)res;
   out.set_size(wide_begin - out.begin());
 }
@@ -153,8 +155,8 @@ static void convertToUTF8(llvm::ArrayRef<wchar_t> wide,
   char *utf8_begin = out.end();
   auto res = Convert::ConvertToUTF8(&wide_begin, wide.end(),
                                     &utf8_begin, out.data() + reserve,
-                                    lenientConversion);
-  assert(res == conversionOK && "wide-to-utf8 conversion failed!");
+                                    llvm::lenientConversion);
+  assert(res == llvm::conversionOK && "wide-to-utf8 conversion failed!");
   (void)res;
   out.set_size(utf8_begin - out.begin());
 }
diff --git a/lib/Index/Index.cpp b/lib/Index/Index.cpp
index 1c2c88a14e..bd718239c5 100644
--- a/lib/Index/Index.cpp
+++ b/lib/Index/Index.cpp
@@ -976,8 +976,8 @@ IndexSwiftASTWalker::hashFileReference(llvm::hash_code code,
   // Don't use inode because it can easily change when you update the repository
   // even though the file is supposed to be the same (same size/time).
   code = hash_combine(code, Filename);
-  return hash_combine(code, Status.getSize(),
-                      Status.getLastModificationTime().toEpochTime());
+  auto mtime = Status.getLastModificationTime().time_since_epoch().count();
+  return hash_combine(code, Status.getSize(), mtime);
 }
 
 llvm::hash_code IndexSwiftASTWalker::hashModule(llvm::hash_code code,
diff --git a/lib/SIL/LoopInfo.cpp b/lib/SIL/LoopInfo.cpp
index 6546d19c65..714b1fde64 100644
--- a/lib/SIL/LoopInfo.cpp
+++ b/lib/SIL/LoopInfo.cpp
@@ -31,8 +31,8 @@ void SILLoop::dump() const {
 #endif
 }
 
-SILLoopInfo::SILLoopInfo(SILFunction *F, DominanceInfo *DT) {
-  LI.analyze(*DT);
+SILLoopInfo::SILLoopInfo(SILFunction *F, DominanceInfo *DT) : Dominance(DT) {
+  LI.analyze(*Dominance);
 }
 
 bool SILLoop::canDuplicate(SILInstruction *I) const {
@@ -82,5 +82,5 @@ bool SILLoop::canDuplicate(SILInstruction *I) const {
 }
 
 void SILLoopInfo::verify() const {
-  LI.verify();
+  LI.verify(*Dominance);
 }
diff --git a/lib/SIL/SILFunction.cpp b/lib/SIL/SILFunction.cpp
index 520f673f1e..a01fbea20b 100644
--- a/lib/SIL/SILFunction.cpp
+++ b/lib/SIL/SILFunction.cpp
@@ -318,8 +318,7 @@ LLBehavior("view-cfg-long-line-behavior",
                clEnumValN(LongLineBehavior::None, "none", "Print everything"),
                clEnumValN(LongLineBehavior::Truncate, "truncate",
                           "Truncate long lines"),
-               clEnumValN(LongLineBehavior::Wrap, "wrap", "Wrap long lines"),
-               clEnumValEnd));
+               clEnumValN(LongLineBehavior::Wrap, "wrap", "Wrap long lines")));
 
 static llvm::cl::opt<bool>
 RemoveUseListComments("view-cfg-remove-use-list-comments",
diff --git a/lib/SIL/SILPrinter.cpp b/lib/SIL/SILPrinter.cpp
index 3e7ba48c5a..6c3b85d8aa 100644
--- a/lib/SIL/SILPrinter.cpp
+++ b/lib/SIL/SILPrinter.cpp
@@ -606,7 +606,7 @@ public:
   void printDebugLocRef(SILLocation Loc, const SourceManager &SM,
                         bool PrintComma = true) {
     auto DL = Loc.decodeDebugLoc(SM);
-    if (DL.Filename) {
+    if (!DL.Filename.empty()) {
       if (PrintComma)
         *this << ", ";
       *this << "loc " << QuotedString(DL.Filename) << ':' << DL.Line << ':'
diff --git a/lib/SILOptimizer/Analysis/AliasAnalysis.cpp b/lib/SILOptimizer/Analysis/AliasAnalysis.cpp
index 48baaae99b..20f4e3792c 100644
--- a/lib/SILOptimizer/Analysis/AliasAnalysis.cpp
+++ b/lib/SILOptimizer/Analysis/AliasAnalysis.cpp
@@ -68,8 +68,7 @@ DebugAAKinds("aa-kind", llvm::cl::desc("Alias Analysis Kinds:"),
                                          "typed-access-tb-aa"),
                               clEnumValN(AAKind::All,
                                          "all",
-                                         "all"),
-                              clEnumValEnd));
+                                         "all")));
 
 static inline bool shouldRunAA() {
   return unsigned(AAKind(DebugAAKinds));
diff --git a/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp b/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp
index f55c95cc7a..a972d9aae3 100644
--- a/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp
+++ b/lib/SILOptimizer/Analysis/EscapeAnalysis.cpp
@@ -728,7 +728,6 @@ namespace llvm {
   /// GraphTraits specialization so the CGForDotView can be
   /// iterable by generic graph iterators.
   template <> struct GraphTraits<CGForDotView::Node *> {
-    typedef CGForDotView::Node NodeType;
     typedef CGForDotView::child_iterator ChildIteratorType;
     typedef CGForDotView::Node *NodeRef;
 
@@ -748,11 +747,13 @@ namespace llvm {
 
     static NodeRef getEntryNode(GraphType F) { return nullptr; }
 
-    typedef CGForDotView::iterator nodes_iterator;
+    typedef pointer_iterator<CGForDotView::iterator> nodes_iterator;
     static nodes_iterator nodes_begin(GraphType OCG) {
-      return OCG->Nodes.begin();
+      return nodes_iterator(OCG->Nodes.begin());
+    }
+    static nodes_iterator nodes_end(GraphType OCG) {
+      return nodes_iterator(OCG->Nodes.end());
     }
-    static nodes_iterator nodes_end(GraphType OCG) { return OCG->Nodes.end(); }
     static unsigned size(GraphType CG) { return CG->Nodes.size(); }
   };
 
diff --git a/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp b/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp
index 2124234a86..f0a81d1c1b 100644
--- a/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp
+++ b/lib/SILOptimizer/Analysis/LoopRegionAnalysis.cpp
@@ -1034,7 +1034,6 @@ alledge_iterator LoopRegionWrapper::end() {
 
 namespace llvm {
 template <> struct GraphTraits<LoopRegionWrapper> {
-  using NodeType = LoopRegionWrapper;
   using ChildIteratorType = alledge_iterator;
   typedef LoopRegionWrapper *NodeRef;
 
@@ -1052,10 +1051,15 @@ struct GraphTraits<LoopRegionFunctionInfoGrapherWrapper *>
 
   static NodeRef getEntryNode(GraphType *F) { return &F->Data[0]; }
 
-  using nodes_iterator = std::vector<LoopRegionWrapper>::iterator;
+  using nodes_iterator =
+          pointer_iterator<std::vector<LoopRegionWrapper>::iterator>;
 
-  static nodes_iterator nodes_begin(GraphType *F) { return F->Data.begin(); }
-  static nodes_iterator nodes_end(GraphType *F) { return F->Data.end(); }
+  static nodes_iterator nodes_begin(GraphType *F) {
+    return nodes_iterator(F->Data.begin());
+  }
+  static nodes_iterator nodes_end(GraphType *F) {
+    return nodes_iterator(F->Data.end());
+  }
   static unsigned size(GraphType *F) { return F->Data.size(); }
 };
 
@@ -1078,8 +1082,7 @@ static llvm::cl::opt<LongLineBehavior> LLBehavior(
         clEnumValN(LongLineBehavior::None, "none", "Print everything"),
         clEnumValN(LongLineBehavior::Truncate, "truncate",
                    "Truncate long lines"),
-        clEnumValN(LongLineBehavior::Wrap, "wrap", "Wrap long lines"),
-        clEnumValEnd));
+        clEnumValN(LongLineBehavior::Wrap, "wrap", "Wrap long lines")));
 
 static llvm::cl::opt<bool> RemoveUseListComments(
     "view-loop-regions-remove-use-list-comments", llvm::cl::init(false),
diff --git a/lib/SILOptimizer/PassManager/PassManager.cpp b/lib/SILOptimizer/PassManager/PassManager.cpp
index dfc5b0b31f..74e684ac50 100644
--- a/lib/SILOptimizer/PassManager/PassManager.cpp
+++ b/lib/SILOptimizer/PassManager/PassManager.cpp
@@ -27,7 +27,7 @@
 #include "llvm/Support/Debug.h"
 #include "llvm/Support/GraphWriter.h"
 #include "llvm/Support/ManagedStatic.h"
-#include "llvm/Support/TimeValue.h"
+#include "llvm/Support/Chrono.h"
 
 using namespace swift;
 
@@ -321,7 +321,7 @@ void SILPassManager::runPassOnFunction(SILFunctionTransform *SFT,
     F->dump(getOptions().EmitVerboseSIL);
   }
 
-  llvm::sys::TimeValue StartTime = llvm::sys::TimeValue::now();
+  llvm::sys::TimePoint<> StartTime = std::chrono::system_clock::now();
   Mod->registerDeleteNotificationHandler(SFT);
   if (breakBeforeRunning(F->getName(), SFT->getName()))
     LLVM_BUILTIN_DEBUGTRAP;
@@ -330,8 +330,7 @@ void SILPassManager::runPassOnFunction(SILFunctionTransform *SFT,
   Mod->removeDeleteNotificationHandler(SFT);
 
   if (SILPrintPassTime) {
-    auto Delta =
-        llvm::sys::TimeValue::now().nanoseconds() - StartTime.nanoseconds();
+    auto Delta = (std::chrono::system_clock::now() - StartTime).count();
     llvm::dbgs() << Delta << " (" << SFT->getName() << "," << F->getName()
                  << ")\n";
   }
@@ -445,7 +444,7 @@ void SILPassManager::runModulePass(SILModuleTransform *SMT) {
     printModule(Mod, Options.EmitVerboseSIL);
   }
 
-  llvm::sys::TimeValue StartTime = llvm::sys::TimeValue::now();
+  llvm::sys::TimePoint<> StartTime = std::chrono::system_clock::now();
   assert(analysesUnlocked() && "Expected all analyses to be unlocked!");
   Mod->registerDeleteNotificationHandler(SMT);
   SMT->run();
@@ -453,8 +452,7 @@ void SILPassManager::runModulePass(SILModuleTransform *SMT) {
   assert(analysesUnlocked() && "Expected all analyses to be unlocked!");
 
   if (SILPrintPassTime) {
-    auto Delta = llvm::sys::TimeValue::now().nanoseconds() -
-      StartTime.nanoseconds();
+    auto Delta = (std::chrono::system_clock::now() - StartTime).count();
     llvm::dbgs() << Delta << " (" << SMT->getName() << ",Module)\n";
   }
 
@@ -758,7 +756,6 @@ namespace llvm {
   /// CallGraph GraphTraits specialization so the CallGraph can be
   /// iterable by generic graph iterators.
   template <> struct GraphTraits<CallGraph::Node *> {
-    typedef CallGraph::Node NodeType;
     typedef CallGraph::child_iterator ChildIteratorType;
     typedef CallGraph::Node *NodeRef;
 
@@ -778,11 +775,13 @@ namespace llvm {
 
     static NodeRef getEntryNode(GraphType F) { return nullptr; }
 
-    typedef CallGraph::iterator nodes_iterator;
+    typedef pointer_iterator<CallGraph::iterator> nodes_iterator;
     static nodes_iterator nodes_begin(GraphType CG) {
-      return CG->Nodes.begin();
+      return nodes_iterator(CG->Nodes.begin());
+    }
+    static nodes_iterator nodes_end(GraphType CG) {
+      return nodes_iterator(CG->Nodes.end());
     }
-    static nodes_iterator nodes_end(GraphType CG) { return CG->Nodes.end(); }
     static unsigned size(GraphType CG) { return CG->Nodes.size(); }
   };
 
diff --git a/lib/SILOptimizer/Transforms/StackPromotion.cpp b/lib/SILOptimizer/Transforms/StackPromotion.cpp
index 98779c1a41..ae4fc44482 100644
--- a/lib/SILOptimizer/Transforms/StackPromotion.cpp
+++ b/lib/SILOptimizer/Transforms/StackPromotion.cpp
@@ -320,12 +320,14 @@ template <> struct GraphTraits<StackPromoter *>
     return &SP->getFunction()->front();
   }
 
-  typedef NonUnreachableBlockIter nodes_iterator;
+  typedef pointer_iterator<NonUnreachableBlockIter> nodes_iterator;
   static nodes_iterator nodes_begin(GraphType SP) {
-    return nodes_iterator(SP->getFunction()->begin(), SP->getFunction()->end());
+    return nodes_iterator(NonUnreachableBlockIter(SP->getFunction()->begin(),
+                                                  SP->getFunction()->end()));
   }
   static nodes_iterator nodes_end(GraphType SP) {
-    return nodes_iterator(SP->getFunction()->end(), SP->getFunction()->end());
+    return nodes_iterator(NonUnreachableBlockIter(SP->getFunction()->end(),
+                                                  SP->getFunction()->end()));
   }
   static unsigned size(GraphType SP) {
     return std::distance(SP->getFunction()->begin(), SP->getFunction()->end());
diff --git a/lib/SILOptimizer/UtilityPasses/BugReducerTester.cpp b/lib/SILOptimizer/UtilityPasses/BugReducerTester.cpp
index f4731ac661..1bfed40fa8 100644
--- a/lib/SILOptimizer/UtilityPasses/BugReducerTester.cpp
+++ b/lib/SILOptimizer/UtilityPasses/BugReducerTester.cpp
@@ -54,8 +54,7 @@ static llvm::cl::opt<FailureKind> TargetFailureKind(
                    "miscompile that is not a crasher"),
         clEnumValN(FailureKind::RuntimeCrasher, "runtime-crasher",
                    "Delete the target function call to cause a runtime "
-                   "miscompile that is not a crasher"),
-        clEnumValEnd),
+                   "miscompile that is not a crasher")),
     llvm::cl::init(FailureKind::None));
 
 namespace {
diff --git a/lib/SILOptimizer/UtilityPasses/LSLocationPrinter.cpp b/lib/SILOptimizer/UtilityPasses/LSLocationPrinter.cpp
index 1ffe20632c..cad34fbd44 100644
--- a/lib/SILOptimizer/UtilityPasses/LSLocationPrinter.cpp
+++ b/lib/SILOptimizer/UtilityPasses/LSLocationPrinter.cpp
@@ -50,7 +50,7 @@ static llvm::cl::opt<MLKind> LSLocationKinds(
         clEnumValN(MLKind::OnlyReduction, "only-reduction", "only-reduction"),
         clEnumValN(MLKind::OnlyTypeExpansion, "only-type-expansion",
                    "only-type-expansion"),
-        clEnumValN(MLKind::All, "all", "all"), clEnumValEnd));
+        clEnumValN(MLKind::All, "all", "all")));
 
 static llvm::cl::opt<bool> UseProjection("lslocation-dump-use-new-projection",
                                             llvm::cl::init(false));
diff --git a/lib/Serialization/DeserializeSIL.cpp b/lib/Serialization/DeserializeSIL.cpp
index 70a054d641..4c77389810 100644
--- a/lib/Serialization/DeserializeSIL.cpp
+++ b/lib/Serialization/DeserializeSIL.cpp
@@ -105,7 +105,7 @@ SILDeserializer::SILDeserializer(ModuleFile *MF, SILModule &M,
   SILCursor = MF->getSILCursor();
   SILIndexCursor = MF->getSILIndexCursor();
   // Early return if either sil block or sil index block does not exist.
-  if (!SILCursor.getBitStreamReader() || !SILIndexCursor.getBitStreamReader())
+  if (SILCursor.AtEndOfStream() || SILIndexCursor.AtEndOfStream())
     return;
 
   // Load any abbrev records at the start of the block.
diff --git a/lib/Serialization/ModuleFile.cpp b/lib/Serialization/ModuleFile.cpp
index 0c71752467..7199f778b0 100644
--- a/lib/Serialization/ModuleFile.cpp
+++ b/lib/Serialization/ModuleFile.cpp
@@ -55,7 +55,7 @@ static bool enterTopLevelModuleBlock(llvm::BitstreamCursor &cursor,
 
   if (next.ID == llvm::bitc::BLOCKINFO_BLOCK_ID) {
     if (shouldReadBlockInfo) {
-      if (cursor.ReadBlockInfoBlock())
+      if (!cursor.ReadBlockInfoBlock())
         return false;
     } else {
       if (cursor.SkipBlock())
@@ -77,23 +77,25 @@ static bool enterTopLevelModuleBlock(llvm::BitstreamCursor &cursor,
 static bool readOptionsBlock(llvm::BitstreamCursor &cursor,
                              SmallVectorImpl<uint64_t> &scratch,
                              ExtendedValidationInfo &extendedInfo) {
-  auto next = cursor.advance();
-  while (next.Kind != llvm::BitstreamEntry::EndBlock) {
-    if (next.Kind == llvm::BitstreamEntry::Error)
+  while (!cursor.AtEndOfStream()) {
+    auto entry = cursor.advance();
+    if (entry.Kind == llvm::BitstreamEntry::EndBlock)
+      break;
+
+    if (entry.Kind == llvm::BitstreamEntry::Error)
       return false;
 
-    if (next.Kind == llvm::BitstreamEntry::SubBlock) {
+    if (entry.Kind == llvm::BitstreamEntry::SubBlock) {
       // Unknown metadata sub-block, possibly for use by a future version of
       // the module format.
       if (cursor.SkipBlock())
         return false;
-      next = cursor.advance();
       continue;
     }
 
     scratch.clear();
     StringRef blobData;
-    unsigned kind = cursor.readRecord(next.ID, scratch, &blobData);
+    unsigned kind = cursor.readRecord(entry.ID, scratch, &blobData);
     switch (kind) {
     case options_block::SDK_PATH:
       extendedInfo.setSDKPath(blobData);
@@ -119,8 +121,6 @@ static bool readOptionsBlock(llvm::BitstreamCursor &cursor,
       // module format.
       break;
     }
-
-    next = cursor.advance();
   }
 
   return true;
@@ -135,15 +135,18 @@ validateControlBlock(llvm::BitstreamCursor &cursor,
   ValidationInfo result;
   bool versionSeen = false;
 
-  auto next = cursor.advance();
-  while (next.Kind != llvm::BitstreamEntry::EndBlock) {
-    if (next.Kind == llvm::BitstreamEntry::Error) {
+  while (!cursor.AtEndOfStream()) {
+    auto entry = cursor.advance();
+    if (entry.Kind == llvm::BitstreamEntry::EndBlock)
+      break;
+
+    if (entry.Kind == llvm::BitstreamEntry::Error) {
       result.status = Status::Malformed;
       return result;
     }
 
-    if (next.Kind == llvm::BitstreamEntry::SubBlock) {
-      if (next.ID == OPTIONS_BLOCK_ID && extendedInfo) {
+    if (entry.Kind == llvm::BitstreamEntry::SubBlock) {
+      if (entry.ID == OPTIONS_BLOCK_ID && extendedInfo) {
         cursor.EnterSubBlock(OPTIONS_BLOCK_ID);
         if (!readOptionsBlock(cursor, scratch, *extendedInfo)) {
           result.status = Status::Malformed;
@@ -157,13 +160,12 @@ validateControlBlock(llvm::BitstreamCursor &cursor,
           return result;
         }
       }
-      next = cursor.advance();
       continue;
     }
 
     scratch.clear();
     StringRef blobData;
-    unsigned kind = cursor.readRecord(next.ID, scratch, &blobData);
+    unsigned kind = cursor.readRecord(entry.ID, scratch, &blobData);
     switch (kind) {
     case control_block::METADATA: {
       if (versionSeen) {
@@ -209,8 +211,6 @@ validateControlBlock(llvm::BitstreamCursor &cursor,
       // module format.
       break;
     }
-
-    next = cursor.advance();
   }
 
   return result;
@@ -232,31 +232,31 @@ ValidationInfo serialization::validateSerializedAST(
       reinterpret_cast<uintptr_t>(data.data()) % 4 != 0)
     return result;
 
-  llvm::BitstreamReader reader(reinterpret_cast<const uint8_t *>(data.begin()),
-                               reinterpret_cast<const uint8_t *>(data.end()));
-  llvm::BitstreamCursor cursor(reader);
+  llvm::BitstreamCursor cursor(data);
   SmallVector<uint64_t, 32> scratch;
 
   if (!checkModuleSignature(cursor) ||
       !enterTopLevelModuleBlock(cursor, MODULE_BLOCK_ID, false))
     return result;
 
-  auto topLevelEntry = cursor.advance();
-  while (topLevelEntry.Kind == llvm::BitstreamEntry::SubBlock) {
+  llvm::BitstreamEntry topLevelEntry;
+
+  while (!cursor.AtEndOfStream()) {
+    topLevelEntry = cursor.advance(AF_DontPopBlockAtEnd);
+    if (topLevelEntry.Kind != llvm::BitstreamEntry::SubBlock)
+      break;
+
     if (topLevelEntry.ID == CONTROL_BLOCK_ID) {
       cursor.EnterSubBlock(CONTROL_BLOCK_ID);
       result = validateControlBlock(cursor, scratch, extendedInfo);
       if (result.status == Status::Malformed)
         return result;
-
     } else {
       if (cursor.SkipBlock()) {
         result.status = Status::Malformed;
         return result;
       }
     }
-
-    topLevelEntry = cursor.advance(AF_DontPopBlockAtEnd);
   }
 
   if (topLevelEntry.Kind == llvm::BitstreamEntry::EndBlock) {
@@ -466,9 +466,9 @@ bool ModuleFile::readIndexBlock(llvm::BitstreamCursor &cursor) {
   SmallVector<uint64_t, 4> scratch;
   StringRef blobData;
 
-  while (true) {
-    auto next = cursor.advance();
-    switch (next.Kind) {
+  while (!cursor.AtEndOfStream()) {
+    auto entry = cursor.advance();
+    switch (entry.Kind) {
     case llvm::BitstreamEntry::EndBlock:
       return true;
 
@@ -484,7 +484,7 @@ bool ModuleFile::readIndexBlock(llvm::BitstreamCursor &cursor) {
     case llvm::BitstreamEntry::Record:
       scratch.clear();
       blobData = {};
-      unsigned kind = cursor.readRecord(next.ID, scratch, &blobData);
+      unsigned kind = cursor.readRecord(entry.ID, scratch, &blobData);
 
       switch (kind) {
       case index_block::DECL_OFFSETS:
@@ -656,9 +656,9 @@ bool ModuleFile::readCommentBlock(llvm::BitstreamCursor &cursor) {
   SmallVector<uint64_t, 4> scratch;
   StringRef blobData;
 
-  while (true) {
-    auto next = cursor.advance();
-    switch (next.Kind) {
+  while (!cursor.AtEndOfStream()) {
+    auto entry = cursor.advance();
+    switch (entry.Kind) {
     case llvm::BitstreamEntry::EndBlock:
       return true;
 
@@ -673,7 +673,7 @@ bool ModuleFile::readCommentBlock(llvm::BitstreamCursor &cursor) {
 
     case llvm::BitstreamEntry::Record:
       scratch.clear();
-      unsigned kind = cursor.readRecord(next.ID, scratch, &blobData);
+      unsigned kind = cursor.readRecord(entry.ID, scratch, &blobData);
 
       switch (kind) {
       case comment_block::DECL_COMMENTS:
@@ -707,18 +707,6 @@ static Optional<swift::LibraryKind> getActualLibraryKind(unsigned rawKind) {
   return None;
 }
 
-static const uint8_t *getStartBytePtr(llvm::MemoryBuffer *buffer) {
-  if (!buffer)
-    return nullptr;
-  return reinterpret_cast<const uint8_t *>(buffer->getBufferStart());
-}
-
-static const uint8_t *getEndBytePtr(llvm::MemoryBuffer *buffer) {
-  if (!buffer)
-    return nullptr;
-  return reinterpret_cast<const uint8_t *>(buffer->getBufferEnd());
-}
-
 static bool areCompatibleArchitectures(const llvm::Triple &moduleTarget,
                                        const llvm::Triple &ctxTarget) {
   if (moduleTarget.getArch() == ctxTarget.getArch())
@@ -772,17 +760,13 @@ ModuleFile::ModuleFile(
     serialization::ExtendedValidationInfo *extInfo)
     : ModuleInputBuffer(std::move(moduleInputBuffer)),
       ModuleDocInputBuffer(std::move(moduleDocInputBuffer)),
-      ModuleInputReader(getStartBytePtr(this->ModuleInputBuffer.get()),
-                        getEndBytePtr(this->ModuleInputBuffer.get())),
-      ModuleDocInputReader(getStartBytePtr(this->ModuleDocInputBuffer.get()),
-                           getEndBytePtr(this->ModuleDocInputBuffer.get())),
       DeserializedTypeCallback([](Type ty) {}) {
   assert(getStatus() == Status::Valid);
   Bits.IsFramework = isFramework;
 
   PrettyModuleFileDeserialization stackEntry(*this);
 
-  llvm::BitstreamCursor cursor{ModuleInputReader};
+  llvm::BitstreamCursor cursor{ModuleInputBuffer->getMemBufferRef()};
 
   if (!checkModuleSignature(cursor) ||
       !enterTopLevelModuleBlock(cursor, MODULE_BLOCK_ID)) {
@@ -795,8 +779,13 @@ ModuleFile::ModuleFile(
   bool hasValidControlBlock = false;
   SmallVector<uint64_t, 64> scratch;
 
-  auto topLevelEntry = cursor.advance();
-  while (topLevelEntry.Kind == llvm::BitstreamEntry::SubBlock) {
+  llvm::BitstreamEntry topLevelEntry;
+
+  while (!cursor.AtEndOfStream()) {
+    topLevelEntry = cursor.advance(AF_DontPopBlockAtEnd);
+    if (topLevelEntry.Kind != llvm::BitstreamEntry::SubBlock)
+      break;
+
     switch (topLevelEntry.ID) {
     case CONTROL_BLOCK_ID: {
       cursor.EnterSubBlock(CONTROL_BLOCK_ID);
@@ -992,8 +981,6 @@ ModuleFile::ModuleFile(
       }
       break;
     }
-
-    topLevelEntry = cursor.advance(AF_DontPopBlockAtEnd);
   }
 
   if (topLevelEntry.Kind != llvm::BitstreamEntry::EndBlock) {
@@ -1004,15 +991,18 @@ ModuleFile::ModuleFile(
   if (!this->ModuleDocInputBuffer)
     return;
 
-  llvm::BitstreamCursor docCursor{ModuleDocInputReader};
+  llvm::BitstreamCursor docCursor{ModuleDocInputBuffer->getMemBufferRef()};
   if (!checkModuleDocSignature(docCursor) ||
       !enterTopLevelModuleBlock(docCursor, MODULE_DOC_BLOCK_ID)) {
     error(Status::MalformedDocumentation);
     return;
   }
 
-  topLevelEntry = docCursor.advance();
-  while (topLevelEntry.Kind == llvm::BitstreamEntry::SubBlock) {
+  while (!docCursor.AtEndOfStream()) {
+    topLevelEntry = docCursor.advance(AF_DontPopBlockAtEnd);
+    if (topLevelEntry.Kind != llvm::BitstreamEntry::SubBlock)
+      break;
+
     switch (topLevelEntry.ID) {
     case COMMENT_BLOCK_ID: {
       if (!hasValidControlBlock || !readCommentBlock(docCursor)) {
@@ -1031,8 +1021,6 @@ ModuleFile::ModuleFile(
       }
       break;
     }
-
-    topLevelEntry = docCursor.advance(AF_DontPopBlockAtEnd);
   }
 
   if (topLevelEntry.Kind != llvm::BitstreamEntry::EndBlock) {
diff --git a/lib/Serialization/Serialization.cpp b/lib/Serialization/Serialization.cpp
index 0cb5363a8f..2eef488b9b 100644
--- a/lib/Serialization/Serialization.cpp
+++ b/lib/Serialization/Serialization.cpp
@@ -3786,8 +3786,8 @@ class DeclGroupNameContext {
       auto PathOp = VD->getDeclContext()->getParentSourceFile()->getBufferID();
       if (!PathOp.hasValue())
         return NullGroupName;
-      StringRef FullPath = StringRef(VD->getASTContext().SourceMgr.
-                                     getIdentifierForBuffer(PathOp.getValue()));
+      StringRef FullPath =
+        VD->getASTContext().SourceMgr.getIdentifierForBuffer(PathOp.getValue());
       if (!pMap) {
         YamlGroupInputParser Parser(RecordPath);
         if (!Parser.parse()) {
diff --git a/lib/Serialization/SerializedModuleLoader.cpp b/lib/Serialization/SerializedModuleLoader.cpp
index 13a9c44e9f..8096da3b18 100644
--- a/lib/Serialization/SerializedModuleLoader.cpp
+++ b/lib/Serialization/SerializedModuleLoader.cpp
@@ -162,8 +162,8 @@ FileUnit *SerializedModuleLoader::loadAST(
     bool isFramework) {
   assert(moduleInputBuffer);
 
-  const char *moduleBufferID = moduleInputBuffer->getBufferIdentifier();
-  const char *moduleDocBufferID = nullptr;
+  StringRef moduleBufferID = moduleInputBuffer->getBufferIdentifier();
+  StringRef moduleDocBufferID;
   if (moduleDocInputBuffer)
     moduleDocBufferID = moduleDocInputBuffer->getBufferIdentifier();
 
@@ -248,9 +248,9 @@ FileUnit *SerializedModuleLoader::loadAST(
     break;
 
   case serialization::Status::MalformedDocumentation:
-    assert(moduleDocBufferID);
+    assert(!moduleDocBufferID.empty());
     Ctx.Diags.diagnose(*diagLoc, diag::serialization_malformed_module,
-                       moduleDocBufferID ? moduleDocBufferID : "");
+                       moduleDocBufferID);
     break;
 
   case serialization::Status::MissingDependency: {
diff --git a/test/DebugInfo/bool.swift b/test/DebugInfo/bool.swift
index a1c554673f..b46e81d2fb 100644
--- a/test/DebugInfo/bool.swift
+++ b/test/DebugInfo/bool.swift
@@ -3,7 +3,7 @@
 func markUsed<T>(_ t: T) {}
 
 // Int1 uses 1 bit, but is aligned at 8 bits.
-// CHECK: !DIBasicType(name: "_TtBi1_", size: 1, align: 8, encoding: DW_ATE_unsigned)
+// CHECK: !DIBasicType(name: "_TtBi1_", size: 1, encoding: DW_ATE_unsigned)
 func main() {
   var t = true
   var f = false
diff --git a/test/Driver/driver-time-compilation.swift b/test/Driver/driver-time-compilation.swift
index 2d488a8e94..198ff9b7d0 100644
--- a/test/Driver/driver-time-compilation.swift
+++ b/test/Driver/driver-time-compilation.swift
@@ -1,7 +1,7 @@
 // RUN: %target-build-swift -typecheck -driver-time-compilation %s 2>&1 | %FileCheck %s
 // RUN: %target-build-swift -typecheck -driver-time-compilation %s %S/../Inputs/empty.swift 2>&1 | %FileCheck -check-prefix CHECK-MULTIPLE %s
 
-// CHECK: Driver Time Compilation
+// CHECK: Driver Compilation Time
 // CHECK: Total Execution Time: {{[0-9]+}}.{{[0-9]+}} seconds ({{[0-9]+}}.{{[0-9]+}} wall clock)
 // CHECK: ---Wall Time---
 // CHECK: --- Name ---
diff --git a/test/Inputs/clang-importer-sdk/usr/include/ctypes.h b/test/Inputs/clang-importer-sdk/usr/include/ctypes.h
index d79aebb512..fff058dafa 100644
--- a/test/Inputs/clang-importer-sdk/usr/include/ctypes.h
+++ b/test/Inputs/clang-importer-sdk/usr/include/ctypes.h
@@ -17,10 +17,13 @@ enum {
   AnonConstSmall2
 };
 
+#if !defined(__have_Point)
+#define __have_Point
 struct Point {
   float x;
   float y;
 };
+#endif
 
 typedef struct {
   struct {
diff --git a/tools/SourceKit/lib/Support/Tracing.cpp b/tools/SourceKit/lib/Support/Tracing.cpp
index f2e6410e45..3c6e3403a0 100644
--- a/tools/SourceKit/lib/Support/Tracing.cpp
+++ b/tools/SourceKit/lib/Support/Tracing.cpp
@@ -14,7 +14,6 @@
 
 #include "swift/Frontend/Frontend.h"
 
-#include "llvm/Support/TimeValue.h"
 #include "llvm/Support/YAMLTraits.h"
 
 using namespace SourceKit;
diff --git a/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp b/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp
index 3208f803d8..ac99246f49 100644
--- a/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp
+++ b/tools/SourceKit/lib/SwiftLang/SwiftASTManager.cpp
@@ -543,7 +543,7 @@ BufferStamp SwiftASTManager::Implementation::getBufferStamp(StringRef FilePath){
                   << " (" << Ret.message() << ')');
     return -1;
   }
-  return Status.getLastModificationTime().toEpochTime();
+  return Status.getLastModificationTime().time_since_epoch().count();
 }
 
 std::unique_ptr<llvm::MemoryBuffer>
diff --git a/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp b/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp
index 2aab21d586..8d74c20800 100644
--- a/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp
+++ b/tools/SourceKit/tools/sourcekitd-test/sourcekitd-test.cpp
@@ -1493,8 +1493,10 @@ static void expandPlaceholders(llvm::MemoryBuffer *SourceBuf,
                                                                    nullptr, 0);
     sourcekitd_request_dictionary_set_uid(Exp, KeyRequest,
                                           RequestEditorExpandPlaceholder);
-    sourcekitd_request_dictionary_set_string(Exp, KeyName,
-                                             SourceBuf->getBufferIdentifier());
+    auto SourceBufID = SourceBuf->getBufferIdentifier();
+    sourcekitd_request_dictionary_set_stringbuf(Exp, KeyName,
+                                                SourceBufID.data(),
+                                                SourceBufID.size());
     sourcekitd_request_dictionary_set_string(Exp, KeySourceText, "");
     sourcekitd_request_dictionary_set_int64(Exp, KeyOffset, Offset);
     sourcekitd_request_dictionary_set_int64(Exp, KeyLength, Length);
diff --git a/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp b/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp
index 9e9c308d5b..70f5f75668 100644
--- a/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp
+++ b/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/sourcekitd.cpp
@@ -17,7 +17,7 @@
 
 #include "llvm/Support/ErrorHandling.h"
 #include "llvm/Support/Mutex.h"
-#include "llvm/Support/TimeValue.h"
+#include <chrono>
 #include <xpc/xpc.h>
 #include <dispatch/dispatch.h>
 
@@ -406,26 +406,27 @@ static void sendNotification(xpc_object_t event) {
 }
 
 static void updateSemanticEditorDelay() {
-  using namespace llvm::sys;
+  using namespace std::chrono;
+  using TimePoint = time_point<system_clock, nanoseconds>;
 
   // Clear any previous setting.
   SemanticEditorDelaySecondsNum = 0;
 
-  static TimeValue gPrevCrashTime;
+  static TimePoint gPrevCrashTime;
 
-  TimeValue PrevTime = gPrevCrashTime;
-  TimeValue CurrTime = TimeValue::now();
+  TimePoint PrevTime = gPrevCrashTime;
+  TimePoint CurrTime = system_clock::now();
   gPrevCrashTime = CurrTime;
-  if (PrevTime == TimeValue()) {
+  if (PrevTime == TimePoint()) {
     // First time that it crashed.
     return;
   }
 
-  TimeValue Diff = CurrTime - PrevTime;
-  if (Diff.seconds() > 30)
+  auto Diff = duration_cast<seconds>(CurrTime - PrevTime);
+  if (Diff.count() > 30)
     return; // treat this as more likely unrelated to the previous crash.
 
-  size_t Delay = std::min(size_t(20), size_t(Diff.seconds()*2 + 1));
+  size_t Delay = std::min(size_t(20), size_t(Diff.count()*2 + 1));
   LOG_WARN_FUNC("disabling semantic editor for " << Delay << " seconds");
   SemanticEditorDelaySecondsNum = Delay;
 
diff --git a/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/tracer.cpp b/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/tracer.cpp
index 2a9123adea..3c60cbe2e7 100644
--- a/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/tracer.cpp
+++ b/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/tracer.cpp
@@ -21,12 +21,12 @@
 #include "llvm/Support/Mutex.h"
 #include "llvm/Support/Path.h"
 #include "llvm/Support/raw_ostream.h"
-#include "llvm/Support/TimeValue.h"
 #include "llvm/Support/YAMLTraits.h"
 
 #include <xpc/xpc.h>
 
 #include <algorithm>
+#include <chrono>
 #include <deque>
 #include <functional>
 #include <iomanip>
@@ -70,7 +70,8 @@ static void fsWriteFile(const char *Path, StringRef Text) {
 
 static void fsInitTraceRoot(path_t &RootDir, uint64_t Id) {
   RootDir = trace_root_dir;
-  std::string DirName = llvm::sys::TimeValue::now().str();
+  std::string DirName =
+    std::to_string(std::chrono::system_clock::now().time_since_epoch().count());
   std::for_each(DirName.begin(), DirName.end(),
                 [] (char &C) { if (!isalnum(C)) C = '-'; });
   DirName += '-';
@@ -91,7 +92,7 @@ static void fsAddFileWithRevision(path_t &Path,
 typedef SourceKit::trace::OperationKind OperationKind;
 
 struct OperationInfo {
-  sys::TimeValue StartedAt;
+  std::chrono::system_clock::time_point StartedAt;
   OperationKind Kind;
   std::string SwiftArgs;
   trace::StringPairs OpArgs;
@@ -101,7 +102,7 @@ struct OperationInfo {
                 std::string &&SwiftArgs,
                 trace::StringPairs &&Files,
                 trace::StringPairs &&OpArgs)
-    : StartedAt(sys::TimeValue::now()),
+    : StartedAt(std::chrono::system_clock::now()),
       Kind(K), SwiftArgs(SwiftArgs), OpArgs(OpArgs), Files(Files) {}
 
   OperationInfo() = default;
diff --git a/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XpcTracing.cpp b/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XpcTracing.cpp
index da1028f35f..6eb2a8fdbf 100644
--- a/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XpcTracing.cpp
+++ b/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/XpcTracing.cpp
@@ -14,9 +14,9 @@
 
 #include "swift/Frontend/Frontend.h"
 
-#include "llvm/Support/TimeValue.h"
 #include "llvm/Support/YAMLTraits.h"
 
+#include <chrono>
 #include <xpc/xpc.h>
 
 using namespace sourcekitd;
@@ -29,10 +29,13 @@ using namespace llvm;
 // General
 //===----------------------------------------------------------------------===//
 
-static uint64_t tracing_session = llvm::sys::TimeValue::now().msec();
+static auto tracing_session = std::chrono::system_clock::now();
 
 uint64_t trace::getTracingSession() {
-  return tracing_session;
+  using namespace std::chrono;
+  time_point<system_clock, milliseconds> msec =
+    time_point_cast<milliseconds>(tracing_session);
+  return msec.time_since_epoch().count();
 }
 
 static void append(xpc_object_t Contents, uint64_t Value) {
diff --git a/tools/driver/api_notes.cpp b/tools/driver/api_notes.cpp
index 714efe2ad6..ce3519b9d1 100644
--- a/tools/driver/api_notes.cpp
+++ b/tools/driver/api_notes.cpp
@@ -43,8 +43,7 @@ int apinotes_main(ArrayRef<const char *> Args) {
                                "binary-to-yaml",
                                "Convert binary format to YAML"),
                     clEnumValN(api_notes::ActionType::Dump,
-                            "dump", "Parse and dump the output"),
-                    clEnumValEnd),
+                            "dump", "Parse and dump the output")),
          cl::cat(APINotesCategory));
 
   static cl::opt<std::string>
diff --git a/tools/driver/autolink_extract_main.cpp b/tools/driver/autolink_extract_main.cpp
index 10fdbd1099..4bfa16a5aa 100644
--- a/tools/driver/autolink_extract_main.cpp
+++ b/tools/driver/autolink_extract_main.cpp
@@ -147,7 +147,7 @@ static bool extractLinkerFlags(const llvm::object::Binary *Bin,
     extractLinkerFlagsFromObjectFile(ObjectFile, LinkerFlags);
     return false;
   } else if (auto *Archive = llvm::dyn_cast<llvm::object::Archive>(Bin)) {
-    llvm::Error Error;
+    llvm::Error Error = llvm::Error::success();
     for (const auto &Child : Archive->children(Error)) {
       auto ChildBinary = Child.getAsBinary();
       // FIXME: BinaryFileName below should instead be ld-style names for
diff --git a/tools/driver/modulewrap_main.cpp b/tools/driver/modulewrap_main.cpp
index 3cf75d869f..d5c041015c 100644
--- a/tools/driver/modulewrap_main.cpp
+++ b/tools/driver/modulewrap_main.cpp
@@ -143,9 +143,7 @@ int modulewrap_main(ArrayRef<const char *> Args, const char *Argv0,
   }
 
   // Superficially verify that the input is a swift module file.
-  llvm::BitstreamReader Reader((unsigned char *)(*ErrOrBuf)->getBufferStart(),
-                               (unsigned char *)(*ErrOrBuf)->getBufferEnd());
-  llvm::BitstreamCursor Cursor(Reader);
+  llvm::BitstreamCursor Cursor(ErrOrBuf.get()->getMemBufferRef());
   for (unsigned char Byte : serialization::MODULE_SIGNATURE)
     if (Cursor.AtEndOfStream() || Cursor.Read(8) != Byte) {
       Instance.getDiags().diagnose(SourceLoc(), diag::error_parse_input_file,
diff --git a/tools/sil-opt/SILOpt.cpp b/tools/sil-opt/SILOpt.cpp
index 1c5343c517..7b3153ef5b 100644
--- a/tools/sil-opt/SILOpt.cpp
+++ b/tools/sil-opt/SILOpt.cpp
@@ -96,8 +96,7 @@ static llvm::cl::opt<OptGroup> OptimizationGroup(
     llvm::cl::values(clEnumValN(OptGroup::Diagnostics, "diagnostics",
                                 "Run diagnostic passes"),
                      clEnumValN(OptGroup::Performance, "O",
-                                "Run performance passes"),
-                     clEnumValEnd),
+                                "Run performance passes")),
     llvm::cl::init(OptGroup::Unknown));
 
 static llvm::cl::list<PassKind>
@@ -105,7 +104,7 @@ Passes(llvm::cl::desc("Passes:"),
        llvm::cl::values(
 #define PASS(ID, NAME, DESCRIPTION) clEnumValN(PassKind::ID, NAME, DESCRIPTION),
 #include "swift/SILOptimizer/PassManager/Passes.def"
-       clEnumValEnd));
+       clEnumValN(0, "", "")));
 
 static llvm::cl::opt<bool>
 PrintStats("print-stats", llvm::cl::desc("Print various statistics"));
diff --git a/tools/sil-passpipeline-dumper/SILPassPipelineDumper.cpp b/tools/sil-passpipeline-dumper/SILPassPipelineDumper.cpp
index d9cce6f09d..7bcc184738 100644
--- a/tools/sil-passpipeline-dumper/SILPassPipelineDumper.cpp
+++ b/tools/sil-passpipeline-dumper/SILPassPipelineDumper.cpp
@@ -30,7 +30,7 @@ static llvm::cl::opt<PassPipelineKind>
 #define PASSPIPELINE(NAME, DESCRIPTION)                                        \
   clEnumValN(PassPipelineKind::NAME, #NAME, DESCRIPTION),
 #include "swift/SILOptimizer/PassManager/PassPipeline.def"
-                                                        clEnumValEnd));
+                                                        clEnumValN(0, "", "")));
 
 namespace llvm {
 llvm::raw_ostream &operator<<(llvm::raw_ostream &os, PassPipelineKind Kind) {
diff --git a/tools/swift-api-digester/swift-api-digester.cpp b/tools/swift-api-digester/swift-api-digester.cpp
index e73db235c1..cb93ebd02d 100644
--- a/tools/swift-api-digester/swift-api-digester.cpp
+++ b/tools/swift-api-digester/swift-api-digester.cpp
@@ -126,8 +126,7 @@ Action(llvm::cl::desc("Mode:"), llvm::cl::init(ActionType::None),
                      "Compare SDK content in JSON file"),
           clEnumValN(ActionType::DiagnoseSDKs,
                      "diagnose-sdk",
-                     "Diagnose SDK content in JSON file"),
-          clEnumValEnd));
+                     "Diagnose SDK content in JSON file")));
 
 static llvm::cl::list<std::string>
 SDKJsonPaths("input-paths",
diff --git a/tools/swift-ide-test/swift-ide-test.cpp b/tools/swift-ide-test/swift-ide-test.cpp
index 81663f93d6..357654608a 100644
--- a/tools/swift-ide-test/swift-ide-test.cpp
+++ b/tools/swift-ide-test/swift-ide-test.cpp
@@ -212,8 +212,7 @@ Action(llvm::cl::desc("Mode:"), llvm::cl::init(ActionType::None),
                       "Print group names in a module"),
            clEnumValN(ActionType::Range,
                       "range",
-                      "Print information about a given range"),
-           clEnumValEnd));
+                      "Print information about a given range")));
 
 static llvm::cl::opt<std::string>
 SourceFilename("source-filename", llvm::cl::desc("Name of the source file"));
@@ -477,8 +476,7 @@ AccessibilityFilter(
         clEnumValN(Accessibility::Internal, "accessibility-filter-internal",
             "Print internal and public declarations"),
         clEnumValN(Accessibility::Public, "accessibility-filter-public",
-            "Print public declarations"),
-        clEnumValEnd));
+            "Print public declarations")));
 
 static llvm::cl::opt<bool>
 SynthesizeExtension("synthesize-extension",
diff --git a/tools/swift-reflection-dump/swift-reflection-dump.cpp b/tools/swift-reflection-dump/swift-reflection-dump.cpp
index 6e16ed4ca3..98bcaf8728 100644
--- a/tools/swift-reflection-dump/swift-reflection-dump.cpp
+++ b/tools/swift-reflection-dump/swift-reflection-dump.cpp
@@ -58,8 +58,7 @@ Action(llvm::cl::desc("Mode:"),
                     "Dump the field reflection section"),
          clEnumValN(ActionType::DumpTypeLowering,
                     "dump-type-lowering",
-                    "Dump the field layout for typeref strings read from stdin"),
-         clEnumValEnd),
+                    "Dump the field layout for typeref strings read from stdin")),
        llvm::cl::init(ActionType::DumpReflectionSections));
 
 static llvm::cl::list<std::string>
diff --git a/lib/IDE/Utils.cpp b/lib/IDE/Utils.cpp
index 8f592443dc..1b712be568 100644
--- a/lib/IDE/Utils.cpp
+++ b/lib/IDE/Utils.cpp
@@ -342,7 +342,7 @@ bool ide::initInvocationByClangArguments(ArrayRef<const char *> ArgList,
     CCArgs.push_back(Entry);
   }
 
-  if (!ClangInvok->getLangOpts()->CompilingModule) {
+  if (!ClangInvok->getLangOpts()->isCompilingModule()) {
     CCArgs.push_back("-Xclang");
     llvm::SmallString<64> Str;
     Str += "-fmodule-name=";
diff --git a/lib/ClangImporter/ClangImporter.cpp b/lib/ClangImporter/ClangImporter.cpp
index a5d5c105d7..1bf9243062 100644
--- a/lib/ClangImporter/ClangImporter.cpp
+++ b/lib/ClangImporter/ClangImporter.cpp
@@ -157,8 +157,8 @@ namespace {
            /*null-terminated=*/true);
     }
 
-    const char *getBufferIdentifier() const override {
-      return name.c_str();
+    StringRef getBufferIdentifier() const override {
+      return name;
     }
 
     BufferKind getBufferKind() const override {
@@ -662,10 +662,11 @@ ClangImporter::create(ASTContext &ctx,
 
   // Install a Clang module file extension to build Swift name lookup tables.
   invocation->getFrontendOpts().ModuleFileExtensions.push_back(
-      new SwiftNameLookupExtension(importer->Impl.LookupTables,
+      std::make_shared<SwiftNameLookupExtension>(SwiftNameLookupExtension(
+                                   importer->Impl.LookupTables,
                                    importer->Impl.SwiftContext,
                                    importer->Impl.platformAvailability,
-                                   importer->Impl.InferImportAsMember));
+                                   importer->Impl.InferImportAsMember)));
 
   // Create a compiler instance.
   auto PCHContainerOperations =
@@ -2245,7 +2245,7 @@ StringRef ClangModuleUnit::getFilename() const {
   if (!clangModule)
     return "<imports>";
   if (const clang::FileEntry *F = clangModule->getASTFile())
-    if (F->getName())
+    if (!F->getName().empty())
       return F->getName();
   return StringRef();
 }
diff --git a/lib/ClangImporter/ImportDecl.cpp b/lib/ClangImporter/ImportDecl.cpp
index 93d36ebfb9..76a18515b0 100644
--- a/lib/ClangImporter/ImportDecl.cpp
+++ b/lib/ClangImporter/ImportDecl.cpp
@@ -245,19 +245,19 @@ getSwiftStdlibType(const clang::TypedefNameDecl *D,
     switch(CTypeKind) {
     case MappedCTypeKind::FloatIEEEsingle:
       assert(Bitwidth == 32 && "FloatIEEEsingle should be 32 bits wide");
-      if (&Sem != &APFloat::IEEEsingle)
+      if (&Sem != &APFloat::IEEEsingle())
         return std::make_pair(Type(), "");
       break;
 
     case MappedCTypeKind::FloatIEEEdouble:
       assert(Bitwidth == 64 && "FloatIEEEdouble should be 64 bits wide");
-      if (&Sem != &APFloat::IEEEdouble)
+      if (&Sem != &APFloat::IEEEdouble())
         return std::make_pair(Type(), "");
       break;
 
     case MappedCTypeKind::FloatX87DoubleExtended:
       assert(Bitwidth == 80 && "FloatX87DoubleExtended should be 80 bits wide");
-      if (&Sem != &APFloat::x87DoubleExtended)
+      if (&Sem != &APFloat::x87DoubleExtended())
         return std::make_pair(Type(), "");
       break;
 
