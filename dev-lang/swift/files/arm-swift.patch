--- a/lib/IDE/Utils.cpp
+++ b/lib/IDE/Utils.cpp
@@ -198,7 +198,7 @@
   llvm::Triple Triple(TripleStr);
   switch (Triple.getSubArch()) {
   case llvm::Triple::SubArchType::ARMSubArch_v7:
-    OS << "armv7"; break;
+    OS << "armv7a"; break;
   case llvm::Triple::SubArchType::ARMSubArch_v7s:
     OS << "armv7s"; break;
   case llvm::Triple::SubArchType::ARMSubArch_v7k:
@@ -221,7 +221,7 @@
     }
     break;
   }
-  OS << '-' << Triple.getVendorName() << '-' << Triple.getOSName();
+  OS << '-' << Triple.getVendorName() << '-' << Triple.getOSAndEnvironmentName();
   OS.flush();
   return Result;
 }
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -473,7 +473,7 @@
   elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "armv6l")
     set(SWIFT_HOST_VARIANT_ARCH_default "armv6")
   elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "armv7l")
-    set(SWIFT_HOST_VARIANT_ARCH_default "armv7")
+    set(SWIFT_HOST_VARIANT_ARCH_default "arm")
   elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "AMD64")
     set(SWIFT_HOST_VARIANT_ARCH_default "x86_64")
   elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "IA64")
@@ -552,8 +552,8 @@
       set(SWIFT_HOST_TRIPLE "${SWIFT_HOST_VARIANT_ARCH}-unknown-linux-gnu")
     elseif("${SWIFT_HOST_VARIANT_ARCH}" MATCHES "s390x")
       set(SWIFT_HOST_TRIPLE "s390x-unknown-linux-gnu")
-    elseif("${SWIFT_HOST_VARIANT_ARCH}" MATCHES "(armv6|armv7)")
-      set(SWIFT_HOST_TRIPLE "${SWIFT_HOST_VARIANT_ARCH}-unknown-linux-gnueabihf")
+    elseif("${SWIFT_HOST_VARIANT_ARCH}" MATCHES "arm")
+      set(SWIFT_HOST_TRIPLE "${SWIFT_HOST_VARIANT_ARCH}-gentoo-linux-musleabihf")
     else()
       message(FATAL_ERROR "Unable to calculate triple for linux host on ${SWIFT_HOST_VARIANT_ARCH}")
     endif()
--- a/cmake/modules/SwiftSetIfArchBitness.cmake
+++ b/cmake/modules/SwiftSetIfArchBitness.cmake
@@ -10,7 +10,7 @@
      "${SIA_ARCH}" STREQUAL "i686" OR
      "${SIA_ARCH}" STREQUAL "x86" OR
      "${SIA_ARCH}" STREQUAL "armv6" OR
-     "${SIA_ARCH}" STREQUAL "armv7" OR
+     "${SIA_ARCH}" STREQUAL "arm" OR
      "${SIA_ARCH}" STREQUAL "armv7k" OR
      "${SIA_ARCH}" STREQUAL "armv7s")
     set("${var_name}" "${SIA_CASE_32_BIT}" PARENT_SCOPE)
--- a/lib/Basic/Platform.cpp
+++ b/lib/Basic/Platform.cpp
@@ -133,10 +133,8 @@
       return Triple.getArchName();
       break;
     case llvm::Triple::SubArchType::ARMSubArch_v7:
-      return "armv7";
-      break;
     case llvm::Triple::SubArchType::ARMSubArch_v6:
-      return "armv6";
+      return "arm";
       break;
     }
   } else {
