--- a/utils/CMakeLists.txt
+++ b/utils/CMakeLists.txt
@@ -7,8 +7,3 @@
 swift_install_in_component(tools
     FILES swift-api-dump.py
     DESTINATION bin)
-
-# We install LLVM's FileCheck, if requested.
-swift_install_in_component(toolchain-dev-tools
-    FILES "${SWIFT_PATH_TO_LLVM_BUILD}/bin/FileCheck"
-    DESTINATION bin)
--- a/cmake/modules/SwiftSharedCMakeConfig.cmake
+++ b/cmake/modules/SwiftSharedCMakeConfig.cmake
@@ -202,9 +202,6 @@
   set(CMARK_BUILD_INCLUDE_DIR "${PATH_TO_CMARK_BUILD}/src")
   include_directories("${CMARK_MAIN_INCLUDE_DIR}"
                       "${CMARK_BUILD_INCLUDE_DIR}")
-
-  include(${${product}_PATH_TO_CMARK_BUILD}/src/CMarkExports.cmake)
-  add_definitions(-DCMARK_STATIC_DEFINE)
 endmacro()
 
 # Common cmake project config for standalone builds.
diff --git a/stdlib/public/SwiftShims/CMakeLists.txt b/stdlib/public/SwiftShims/CMakeLists.txt
index 3819776f2e..43a9b9cbd8 100644
--- a/stdlib/public/SwiftShims/CMakeLists.txt
+++ b/stdlib/public/SwiftShims/CMakeLists.txt
@@ -78,88 +78,6 @@ endif()
 string(REGEX MATCH "[0-9]+\\.[0-9]+(\\.[0-9]+)?" CLANG_VERSION
   "${LLVM_PACKAGE_VERSION}")
 
-# Function to find LLVM or Clang headers
-function(find_llvm_clang_headers suffix description out_var)
-  set(headers_locations
-      "${LLVM_LIBRARY_DIR}${suffix}"
-
-      "${SWIFT_PATH_TO_CLANG_BUILD}/${CMAKE_CFG_INTDIR}/lib${suffix}"
-      "${SWIFT_PATH_TO_CLANG_BUILD}/${LLVM_BUILD_TYPE}/lib${suffix}")
-
-  set(headers_location)
-  foreach(loc ${headers_locations})
-    if(EXISTS "${loc}")
-      set(headers_location "${loc}")
-      set(${out_var} "${loc}" PARENT_SCOPE)
-      break()
-    endif()
-  endforeach()
-  if("${headers_location}" STREQUAL "")
-    message(FATAL_ERROR "${description} headers were not found in any of the following locations: ${headers_locations}")
-  endif()
-endfunction()
-
-if(SWIFT_BUILT_STANDALONE)
-  find_llvm_clang_headers("" "LLVM" llvm_headers_location)
-  find_llvm_clang_headers("/clang/${CLANG_VERSION}" "Clang"
-    clang_headers_location)
-else() # NOT SWIFT_BUILT_STANDALONE
-  set(clang_headers_location "${LLVM_LIBRARY_DIR}/clang/${CLANG_VERSION}")
-  set(llvm_headers_location "${LLVM_LIBRARY_DIR}")
-endif()
-
-if("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
-  set(cmake_symlink_option "copy_directory")
-else()
-  set(cmake_symlink_option "create_symlink")
-endif()
-
-add_custom_command_target(unused_var
-    COMMAND
-      "${CMAKE_COMMAND}" "-E" "make_directory" "${SWIFTLIB_DIR}"
-    COMMAND
-      "${CMAKE_COMMAND}" "-E" "${cmake_symlink_option}"
-      "${clang_headers_location}"
-      "${SWIFTLIB_DIR}/clang"
-
-    CUSTOM_TARGET_NAME "symlink_clang_headers"
-    OUTPUT "${SWIFTLIB_DIR}/clang"
-    COMMENT "Symlinking Clang resource headers into ${SWIFTLIB_DIR}/clang")
-
-# Adding LLVM symlink at compile time.
-add_custom_command_target(unused_var2
-    COMMAND
-      "${CMAKE_COMMAND}" "-E" "make_directory" "${SWIFTLIB_DIR}"
-    COMMAND
-      "${CMAKE_COMMAND}" "-E" "${cmake_symlink_option}"
-      "${llvm_headers_location}"
-      "${SWIFTLIB_DIR}/llvm"
-
-    CUSTOM_TARGET_NAME "symlink_llvm_headers"
-    OUTPUT "${SWIFTLIB_DIR}/llvm"
-    COMMENT "Symlinking LLVM resource headers into ${SWIFTLIB_DIR}/llvm")
-add_dependencies(copy_shim_headers symlink_clang_headers symlink_llvm_headers)
-
 swift_install_in_component(compiler
     FILES ${sources}
     DESTINATION "lib/swift/shims")
-
-# Install Clang headers under the Swift library so that an installed Swift's
-# module importer can find the compiler headers corresponding to its Clang.
-swift_install_in_component(clang-builtin-headers
-    DIRECTORY "${clang_headers_location}/"
-    DESTINATION "lib/swift/clang"
-    PATTERN "*.h")
-
-swift_install_symlink_component(clang-resource-dir-symlink
-  LINK_NAME clang
-  TARGET ../clang/${CLANG_VERSION}
-  DESTINATION "lib/swift")
-
-# Possibly install Clang headers under Clang's resource directory in case we
-# need to use a different version of the headers than the installed Clang. This
-# should be used in conjunction with clang-resource-dir-symlink.
-swift_install_in_component(clang-builtin-headers-in-clang-resource-dir
-    DIRECTORY "${SWIFT_PATH_TO_CLANG_BUILD}/lib/clang"
-    DESTINATION "lib"
-    PATTERN "*.h")
