--- a/lib/AST/USRGeneration.cpp	2017-06-21 15:55:07.329951432 +0200
+++ b/lib/AST/USRGeneration.cpp	2017-06-21 15:54:20.781951673 +0200
@@ -46,27 +46,14 @@
 }
 
 static bool printObjCUSRFragment(const ValueDecl *D, StringRef ObjCName,
-                                 const ExtensionDecl *ExtContextD,
                                  raw_ostream &OS) {
   if (!D)
     return true;
 
-  // The Swift module name that the decl originated from. If the decl is
-  // originating from ObjC code (ObjC module or the bridging header) then this
-  // will be empty.
-  StringRef ModuleName;
-  if (!D->hasClangNode())
-    ModuleName = D->getModuleContext()->getNameStr();
-
   if (isa<ClassDecl>(D)) {
-    StringRef extContextName;
-    if (ExtContextD) {
-      extContextName = ExtContextD->getModuleContext()->getNameStr();
-    }
-    clang::index::generateUSRForObjCClass(ObjCName, OS,
-                                          ModuleName, extContextName);
+    clang::index::generateUSRForObjCClass(ObjCName, OS);
   } else if (isa<ProtocolDecl>(D)) {
-    clang::index::generateUSRForObjCProtocol(ObjCName, OS, ModuleName);
+    clang::index::generateUSRForObjCProtocol(ObjCName, OS);
   } else if (isa<VarDecl>(D)) {
     clang::index::generateUSRForObjCProperty(ObjCName, D->isStatic(), OS);
   } else if (isa<ConstructorDecl>(D)) {
@@ -76,33 +63,18 @@
   } else if (isa<AbstractFunctionDecl>(D)) {
     clang::index::generateUSRForObjCMethod(ObjCName, D->isInstanceMember(), OS);
   } else if (isa<EnumDecl>(D)) {
-    clang::index::generateUSRForGlobalEnum(ObjCName, OS, ModuleName);
+    OS << "@E@" << ObjCName; // FIXME: expose clang API to handle enum names
   } else if (isa<EnumElementDecl>(D)) {
-    clang::index::generateUSRForEnumConstant(ObjCName, OS);
+    OS << "@" << ObjCName;
   } else {
     llvm_unreachable("Unexpected value decl");
   }
   return false;
 }
 
-static bool printObjCUSRContext(const Decl *D, raw_ostream &OS) {
-  OS << clang::index::getUSRSpacePrefix();
-  auto *DC = D->getDeclContext();
-  if (auto *Parent = DC->getAsNominalTypeOrNominalTypeExtensionContext()) {
-    auto *extContextD = dyn_cast<ExtensionDecl>(DC);
-    auto ObjCName = objc_translation::getObjCNameForSwiftDecl(Parent);
-    if (printObjCUSRFragment(Parent, ObjCName.first.str(), extContextD, OS))
-      return true;
-  }
-  return false;
-}
-
 static bool printObjCUSRForAccessor(const AbstractStorageDecl *ASD,
                                     AccessorKind Kind,
                                     raw_ostream &OS) {
-  if (printObjCUSRContext(ASD, OS))
-    return true;
-
   ObjCSelector Selector;
   switch (Kind) {
     case swift::AccessorKind::IsGetter:
@@ -122,19 +94,23 @@
 }
 
 static bool printObjCUSR(const ValueDecl *D, raw_ostream &OS) {
-  if (printObjCUSRContext(D, OS))
-    return true;
-  auto *extContextD = dyn_cast<ExtensionDecl>(D->getDeclContext());
+  OS << clang::index::getUSRSpacePrefix();
+
+  if (auto *Parent = D->getDeclContext()->
+        getAsNominalTypeOrNominalTypeExtensionContext()) {
+    auto ObjCName = objc_translation::getObjCNameForSwiftDecl(Parent);
+    if (printObjCUSRFragment(Parent, ObjCName.first.str(), OS))
+      return true;
+  }
 
   auto ObjCName = objc_translation::getObjCNameForSwiftDecl(D);
 
   if (!ObjCName.first.empty())
-    return printObjCUSRFragment(D, ObjCName.first.str(), extContextD, OS);
+    return printObjCUSRFragment(D, ObjCName.first.str(), OS);
 
   assert(ObjCName.second);
   llvm::SmallString<128> Buf;
-  return printObjCUSRFragment(D, ObjCName.second.getString(Buf),
-                              extContextD, OS);
+  return printObjCUSRFragment(D, ObjCName.second.getString(Buf), OS);
 }
 
 static bool shouldUseObjCUSR(const Decl *D) {
@@ -215,9 +191,13 @@
     auto &Importer = *D->getASTContext().getClangModuleLoader();
 
     auto ClangMacroInfo = ClangN.getAsMacro();
-    bool Ignore = clang::index::generateUSRForMacro(D->getNameStr(),
-        ClangMacroInfo->getDefinitionLoc(),
-        Importer.getClangASTContext().getSourceManager(), Buf);
+    auto PPRecord = Importer.getClangPreprocessor().getPreprocessingRecord();
+    assert(PPRecord && "Clang importer should be created with "
+                       "-detailed-preprocessing-record option");
+    auto ClangMacroDef = PPRecord->findMacroDefinition(ClangMacroInfo);
+
+    bool Ignore = clang::index::generateUSRForMacro(
+        ClangMacroDef, Importer.getClangASTContext().getSourceManager(), Buf);
     if (!Ignore)
       OS << Buf.str();
     return Ignore;
diff -urN a/lib/ClangImporter/ClangImporter.cpp b/lib/ClangImporter/ClangImporter.cpp
--- a/lib/ClangImporter/ClangImporter.cpp	2017-06-21 15:55:07.333951432 +0200
+++ b/lib/ClangImporter/ClangImporter.cpp	2017-06-21 15:54:20.784951673 +0200
@@ -731,7 +731,6 @@
                          *clangDiags,
                          CI.getLangOpts(),
                          clangSrcMgr,
-                         CI.getPCMCache(),
                          CI.getPreprocessor().getHeaderSearchInfo(), CI,
                          /*IILookup=*/nullptr,
                          /*OwnsHeaderSearch=*/false);
@@ -2633,7 +2632,7 @@
 }
 
 std::string ClangImporter::getClangModuleHash() const {
-  return Impl.Invocation->getModuleHash(Impl.Instance->getDiagnostics());
+  return Impl.Invocation->getModuleHash();
 }
 
 Decl *ClangImporter::importDeclCached(const clang::NamedDecl *ClangDecl) {
diff -urN a/lib/ClangImporter/ImportDecl.cpp b/lib/ClangImporter/ImportDecl.cpp
--- a/lib/ClangImporter/ImportDecl.cpp	2017-06-21 15:55:07.335951432 +0200
+++ b/lib/ClangImporter/ImportDecl.cpp	2017-06-21 15:54:20.785951673 +0200
@@ -1021,7 +1021,7 @@
                                                        clang::VK_RValue,
                                                        clang::OK_Ordinary,
                                                        clang::SourceLocation(),
-                                                       clang::FPOptions());
+                                                       false);
     
     cSetterDecl->setBody(cSetterExpr);
 
diff -urN a/lib/IRGen/GenMeta.cpp b/lib/IRGen/GenMeta.cpp
--- a/lib/IRGen/GenMeta.cpp	2017-06-21 15:55:07.353951432 +0200
+++ b/lib/IRGen/GenMeta.cpp	2017-06-21 15:54:20.788951673 +0200
@@ -2023,9 +2023,6 @@
   case llvm::Triple::COFF:
     var->setSection(".rdata");
     break;
-  case llvm::Triple::Wasm:
-    llvm_unreachable("web assembly object format is not supported.");
-    break;
   }
 }
 
diff -urN a/lib/IRGen/GenReflection.cpp b/lib/IRGen/GenReflection.cpp
--- a/lib/IRGen/GenReflection.cpp	2017-06-21 15:55:07.354951432 +0200
+++ b/lib/IRGen/GenReflection.cpp	2017-06-21 15:54:20.789951673 +0200
@@ -790,9 +790,6 @@
            "Mach-O section name length must be <= 16 characters");
     OS << "__TEXT,__swift3_" << LongName << ", regular, no_dead_strip";
     break;
-  case llvm::Triple::Wasm:
-    llvm_unreachable("web assembly object format is not supported.");
-    break;
   }
   return OS.str();
 }
diff -urN a/lib/IRGen/IRGen.cpp b/lib/IRGen/IRGen.cpp
--- a/lib/IRGen/IRGen.cpp	2017-06-21 15:55:07.356951432 +0200
+++ b/lib/IRGen/IRGen.cpp	2017-06-21 15:54:20.789951673 +0200
@@ -1097,9 +1097,6 @@
   case llvm::Triple::MachO:
     Section = std::string(MachOASTSegmentName) + "," + MachOASTSectionName;
     break;
-  case llvm::Triple::Wasm:
-    llvm_unreachable("web assembly object format is not supported.");
-    break;
   }
   ASTSym->setSection(Section);
   ASTSym->setAlignment(8);
diff -urN a/lib/IRGen/IRGenDebugInfo.cpp b/lib/IRGen/IRGenDebugInfo.cpp
--- a/lib/IRGen/IRGenDebugInfo.cpp	2017-06-21 15:55:07.357951432 +0200
+++ b/lib/IRGen/IRGenDebugInfo.cpp	2017-06-21 15:54:20.789951673 +0200
@@ -1031,7 +1031,6 @@
                                              MangledName, Scope, File, 0,
                                              llvm::dwarf::DW_LANG_ObjC, 0, 0);
       return DBuilder.createPointerType(IdTy, PtrSize, 0,
-                                        /* DWARFAddressSpace */ None,
                                         MangledName);
     }
 
@@ -1039,7 +1038,7 @@
       unsigned PtrSize = CI.getTargetInfo().getPointerWidth(0);
       auto PTy =
           DBuilder.createPointerType(nullptr, PtrSize, 0,
-                                     /* DWARFAddressSpace */ None, MangledName);
+                                     MangledName);
       return DBuilder.createObjectPointerType(PTy);
     }
 
@@ -1047,14 +1046,13 @@
       unsigned PtrSize = CI.getTargetInfo().getPointerWidth(0);
       auto PTy =
           DBuilder.createPointerType(nullptr, PtrSize, 0,
-                                     /* DWARFAddressSpace */ None, MangledName);
+                                    MangledName);
       return DBuilder.createObjectPointerType(PTy);
     }
 
     case TypeKind::BuiltinRawPointer: {
       unsigned PtrSize = CI.getTargetInfo().getPointerWidth(0);
       return DBuilder.createPointerType(nullptr, PtrSize, 0,
-                                        /* DWARFAddressSpace */ None,
                                         MangledName);
     }
 
@@ -1840,7 +1838,7 @@
   // Construct the DISubprogram.
   llvm::DISubprogram *SP = DBuilder.createFunction(
       Scope, Name, LinkageName, File, Line, DIFnTy, IsLocalToUnit, IsDefinition,
-      ScopeLine, Flags, IsOptimized, TemplateParameters, Decl, Error);
+      ScopeLine, Flags, IsOptimized, TemplateParameters, Decl);
 
   if (Fn && !Fn->isDeclaration())
     Fn->setSubprogram(SP);
diff -urN a/lib/PrintAsObjC/PrintAsObjC.cpp b/lib/PrintAsObjC/PrintAsObjC.cpp
--- a/lib/PrintAsObjC/PrintAsObjC.cpp	2017-06-21 15:55:07.369951432 +0200
+++ b/lib/PrintAsObjC/PrintAsObjC.cpp	2017-06-21 15:54:20.792951673 +0200
@@ -2335,22 +2335,6 @@
            "#if !defined(__has_warning)\n"
            "# define __has_warning(x) 0\n"
            "#endif\n"
-           "\n"
-           "#if __has_attribute(external_source_symbol)\n"
-           "# define SWIFT_STRINGIFY(str) #str\n"
-           "# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) "
-             "_Pragma(SWIFT_STRINGIFY(clang attribute "
-             "push(__attribute__((external_source_symbol(language=\"Swift\", "
-             "defined_in=module_name, generated_declaration))), "
-             "apply_to=any(function, enum, objc_interface, objc_category, "
-             "objc_protocol))))\n"
-           "# define SWIFT_MODULE_NAMESPACE_POP "
-             "_Pragma(\"clang attribute pop\")\n"
-           "#else\n"
-           "# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)\n"
-           "# define SWIFT_MODULE_NAMESPACE_POP\n"
-           "#endif\n"
-           "\n"
            "#if __has_include(<swift/objc-prologue.h>)\n"
            "# include <swift/objc-prologue.h>\n"
            "#endif\n"
@@ -2714,11 +2698,7 @@
         "#endif\n"
         "#pragma clang diagnostic ignored \"-Wunknown-pragmas\"\n"
         "#pragma clang diagnostic ignored \"-Wnullability\"\n"
-        "\n"
-        "SWIFT_MODULE_NAMESPACE_PUSH(\"" << M.getNameStr() << "\")\n"
-      << os.str()
-      << "SWIFT_MODULE_NAMESPACE_POP\n"
-         "#pragma clang diagnostic pop\n";
+        "#pragma clang diagnostic pop\n";
     return false;
   }
 };
diff -urN a/test/Index/Inputs/cross_language_bridge_head.h b/test/Index/Inputs/cross_language_bridge_head.h
--- a/test/Index/Inputs/cross_language_bridge_head.h	2017-06-21 15:55:07.549951431 +0200
+++ b/test/Index/Inputs/cross_language_bridge_head.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,2 +0,0 @@
-@interface SomeObjCClass
-@end
