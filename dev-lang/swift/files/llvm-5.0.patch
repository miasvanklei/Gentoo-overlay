--- b/lib/IRGen/IRGenDebugInfo.cpp
+++ a/lib/IRGen/IRGenDebugInfo.cpp
@@ -2007,13 +2007,13 @@
     while (InsPt != E && isa<llvm::PHINode>(&*InsPt))
       ++InsPt;
     if (InsPt != E) {
+      DBuilder.insertDbgValueIntrinsic(Storage, 0, Var, Expr, DL, &*InsPt);
-      DBuilder.insertDbgValueIntrinsic(Storage, Var, Expr, DL, &*InsPt);
       return;
     }
   }
 
   // Otherwise just insert it at the current insertion point.
+  DBuilder.insertDbgValueIntrinsic(Storage, 0, Var, Expr, DL, BB);
-  DBuilder.insertDbgValueIntrinsic(Storage, Var, Expr, DL, BB);
 }
 
 void IRGenDebugInfoImpl::emitGlobalVariableDeclaration(
--- b/lib/IRGen/IRGenSIL.cpp
+++ a/lib/IRGen/IRGenSIL.cpp
@@ -637,7 +637,7 @@
             auto *DVI = dyn_cast<llvm::DbgValueInst>(I);
             if (DVI && DVI->getValue() == Value)
               IGM.DebugInfo->getBuilder().insertDbgValueIntrinsic(
+                  DVI->getValue(), 0, DVI->getVariable(), DVI->getExpression(),
-                  DVI->getValue(), DVI->getVariable(), DVI->getExpression(),
                   DVI->getDebugLoc(), &*CurBB->getFirstInsertionPt());
             else
               // Found all dbg.value intrinsics describing this location.
--- b/test/DebugInfo/inlined-generics.swift
+++ a/test/DebugInfo/inlined-generics.swift
@@ -12,7 +12,7 @@
 
 // CHECK: define {{.*}}@_T04main4foo2yxAA1PRzlF
 public func foo2<S:P>(_ s: S) {
+  // CHECK: call void @llvm.dbg.value(metadata %swift.type* %S.DT1, i64 0,
-  // CHECK: call void @llvm.dbg.value(metadata %swift.type* %S.DT1,
   // CHECK-SAME:                     metadata ![[META:[0-9]+]]
   foo1(s, s.getDT())
   // T.DT1 should get substituted with S.DT1.
--- b/test/DebugInfo/letclause.swift
+++ a/test/DebugInfo/letclause.swift
@@ -7,7 +7,7 @@
 func foo() {
 // CHECK: define {{.*}}foo
 // CHECK: call void @llvm.dbg.value(metadata i{{.*}} 0,
+// CHECK-SAME:                        metadata ![[S:.*]], metadata !{{[0-9]+}})
-// CHECK-SAME:                      metadata ![[S:.*]], metadata !{{[0-9]+}})
 // CHECK: ![[S]] = !DILocalVariable(name: "s"
 // CHECK-SAME:                      line: [[@LINE+1]],
   while let s = peek() {
--- b/test/DebugInfo/liverange-extension-vector.swift
+++ a/test/DebugInfo/liverange-extension-vector.swift
@@ -9,7 +9,7 @@
 public func rangeExtension(x: Int32, y: Int32) {
   let p = int2(x, y)
   // CHECK: define {{.*}}rangeExtension
+  // CHECK: llvm.dbg.value(metadata <2 x i32> %[[P:.*]], i64 0, metadata
-  // CHECK: llvm.dbg.value(metadata <2 x i32> %[[P:.*]], metadata
   use(p)
   // CHECK: asm sideeffect "", "r"{{.*}}[[P]]
 }
--- b/test/DebugInfo/liverange-extension.swift
+++ a/test/DebugInfo/liverange-extension.swift
@@ -7,21 +7,21 @@
 public func rangeExtension(_ b: Bool) {
   // CHECK: define {{.*}}rangeExtension
   let i = getInt32()
+  // CHECK: llvm.dbg.value(metadata i32 [[I:.*]], i64 0, metadata
-  // CHECK: llvm.dbg.value(metadata i32 [[I:.*]], metadata {{.*}}, metadata
   use(i)
   if b {
     let j = getInt32()
+    // CHECK: llvm.dbg.value(metadata i32 [[I]], i64 0, metadata
+    // CHECK: llvm.dbg.value(metadata i32 [[J:.*]], i64 0, metadata
-    // CHECK: llvm.dbg.value(metadata i32 [[I]], metadata {{.*}}, metadata
-    // CHECK: llvm.dbg.value(metadata i32 [[J:.*]], metadata {{.*}}, metadata
     use(j)
     // CHECK-DAG: {{(asm sideeffect "", "r".*)|(zext i32)}} [[J]]
     // CHECK-DAG: asm sideeffect "", "r"
   }
   let z = getInt32()
   use(z)
+  // CHECK-NOT: llvm.dbg.value(metadata i32 [[J]], i64 0, metadata
+  // CHECK-DAG: llvm.dbg.value(metadata i32 [[I]], i64 0, metadata
+  // CHECK-DAG: llvm.dbg.value(metadata i32 [[Z:.*]], i64 0, metadata
-  // CHECK-NOT: llvm.dbg.value(metadata i32 [[J]], metadata {{.*}}, metadata
-  // CHECK-DAG: llvm.dbg.value(metadata i32 [[I]], metadata {{.*}}, metadata
-  // CHECK-DAG: llvm.dbg.value(metadata i32 [[Z:.*]], metadata {{.*}}, metadata
   // CHECK-DAG: {{(asm sideeffect "", "r".*)|(zext i32)}} [[I]]
   // CHECK-DAG: asm sideeffect "", "r"
 }
