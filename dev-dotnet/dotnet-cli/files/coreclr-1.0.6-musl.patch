--- a/coreclr-1.0.6/src/coreclr/hosts/unixcoreruncommon/coreruncommon.cpp	2017-07-05 17:43:30.047372263 +0200
+++ b/coreclr-1.0.6/src/coreclr/hosts/unixcoreruncommon/coreruncommon.cpp	2017-07-05 17:41:04.415365093 +0200
@@ -16,7 +16,7 @@
 #include <string>
 #include <string.h>
 #include <sys/stat.h>
-#include <sys/sysctl.h>
+//#include <sys/sysctl.h>
 #include "coreruncommon.h"
 #include "coreclrhost.h"
 #include <unistd.h>
--- a/coreclr-1.0.6/src/pal/src/loader/module.cpp	2017-07-05 17:43:59.488373713 +0200
+++ b/coreclr-1.0.6/src/pal/src/loader/module.cpp	2017-07-05 17:45:29.023378121 +0200
@@ -54,8 +54,12 @@
 #include <sys/types.h>
 #include <sys/mman.h>
 
-#if defined(__linux__)
-#include <gnu/lib-names.h>
+#if defined (__linux__)
+# if defined(__GLIBC__)
+# include <gnu/lib-names.h>
+# else
+# define LIBC_SO ".so"
+# endif
 #endif
 
 using namespace CorUnix;
--- a/coreclr-1.0.6/src/pal/src/misc/sysinfo.cpp	2017-07-05 17:48:35.863387320 +0200
+++ b/coreclr-1.0.6/src/pal/src/misc/sysinfo.cpp	2017-07-05 17:48:12.071386148 +0200
@@ -346,7 +346,7 @@
 {
     size_t cacheSize = 0;
 
-#if HAVE_SYSCONF && defined(__linux__)
+#if HAVE_SYSCONF && defined(__GLIBC__)
     cacheSize = max(cacheSize, sysconf(_SC_LEVEL1_DCACHE_SIZE));
     cacheSize = max(cacheSize, sysconf(_SC_LEVEL1_ICACHE_SIZE));
     cacheSize = max(cacheSize, sysconf(_SC_LEVEL2_CACHE_SIZE));
--- a/coreclr-1.0.6/src/pal/src/safecrt/input.inl	2017-07-05 17:50:26.016392743 +0200
+++ b/coreclr-1.0.6/src/pal/src/safecrt/input.inl	2017-07-05 17:57:56.832414939 +0200
@@ -46,6 +46,7 @@
 
 #define _CVTBUFSIZE (309+40) /* # of digits in max. dp value + slop */
 
+#include <stdint.h>
 //#include <cruntime.h>
 //#include <stdio.h>
 //#include <ctype.h>
@@ -258,7 +259,7 @@
 #endif  /* ALLOC_TABLE */
 
 #if _INTEGRAL_MAX_BITS >= 64   
-    __uint64_t num64 = 0LL;             /* temp for 64-bit integers          */
+    uint64_t num64 = 0LL;             /* temp for 64-bit integers          */
 #endif  /* _INTEGRAL_MAX_BITS >= 64    */
     void *pointer=NULL;                 /* points to user data receptacle    */
     void *start;                        /* indicate non-empty string         */
@@ -927,7 +928,7 @@
                             } /* end of WHILE loop */
 
                             if (negative)
-                                num64 = (__uint64_t )(-(__int64)num64);
+                                num64 = (uint64_t )(-(__int64)num64);
                         }
                         else {
 #endif  /* _INTEGRAL_MAX_BITS >= 64    */
@@ -984,7 +985,7 @@
 assign_num:
 #if _INTEGRAL_MAX_BITS >= 64   
                                 if ( integer64 )
-                                    *(__int64 UNALIGNED *)pointer = ( __uint64_t )num64;
+                                    *(__int64 UNALIGNED *)pointer = ( uint64_t )num64;
                                 else
 #endif  /* _INTEGRAL_MAX_BITS >= 64    */
                                 if (longone)
--- a/coreclr-1.0.6/src/pal/src/safecrt/safecrt_output_l.c	2017-07-05 17:51:26.272395710 +0200
+++ b/coreclr-1.0.6/src/pal/src/safecrt/safecrt_output_l.c	2017-07-05 18:00:42.832423112 +0200
@@ -26,6 +26,7 @@
 #include <string.h>
 #include <errno.h>
 #include <limits.h>
+#include <stdint.h>
 #include <stdlib.h>
 #include "internal_securecrt.h"
 
@@ -1058,7 +1059,7 @@
 
 #if _INTEGRAL_MAX_BITS >= 64       
 //                unsigned __int64 number;    /* number to convert */
-                __uint64_t number;      /* number to convert */
+                uint64_t number;      /* number to convert */
                 int digit;              /* ascii value of digit */
                 __int64 l;              /* temp long value */
 #else  /* _INTEGRAL_MAX_BITS >= 64        */
--- a/coreclr-1.0.6/src/pal/src/safecrt/output.inl	2017-07-05 17:51:59.904397366 +0200
+++ b/coreclr-1.0.6/src/pal/src/safecrt/output.inl	2017-07-05 17:58:35.104416823 +0200
@@ -43,6 +43,7 @@
 #define _INTEGRAL_MAX_BITS  64
 #endif  /* _INTEGRAL_MAX_BITS */
 
+#include <stdint.h>
 //#include <mtdll.h>
 //#include <cruntime.h>
 //#include <limits.h>
@@ -1215,7 +1216,7 @@
                 /* appropriately. */
 
 #if _INTEGRAL_MAX_BITS >= 64       
-                __uint64_t number;    /* number to convert */
+                uint64_t number;    /* number to convert */
                 int digit;              /* ascii value of digit */
                 __int64 l;              /* temp long value */
 #else  /* _INTEGRAL_MAX_BITS >= 64        */
--- a/coreclr-1.0.6/src/pal/src/thread/context.cpp	2017-07-05 18:01:02.908424100 +0200
+++ b/coreclr-1.0.6/src/pal/src/thread/context.cpp	2017-07-05 18:03:04.577430090 +0200
@@ -29,6 +29,10 @@
 #include <errno.h>
 #include <unistd.h>
 
+#ifndef __GLIBC__
+typedef int __ptrace_request
+#endif
+
 SET_DEFAULT_DEBUG_CHANNEL(THREAD);
 
 extern PGET_GCMARKER_EXCEPTION_CODE g_getGcMarkerExceptionCode;
--- a/coreclr-1.0.6/src/pal/src/CMakeLists.txt	2017-07-05 18:04:02.409432938 +0200
+++ b/coreclr-1.0.6/src/pal/src/CMakeLists.txt	2017-07-05 18:04:49.217435242 +0200
@@ -249,7 +249,7 @@
   find_library(UNWIND_GENERIC NAMES unwind-generic)
 
   target_link_libraries(coreclrpal
-    gcc_s
+    unwind
     pthread
     rt
     dl
--- a/coreclr-1.0.6/src/pal/inc/unixasmmacrosamd64.inc
+++ b/coreclr-1.0.6/src/pal/inc/unixasmmacrosamd64.inc
@@ -8,7 +8,7 @@
 #if defined(__APPLE__)
         .cfi_personality 0x9b, C_FUNC(\Handler) // 0x9b == DW_EH_PE_indirect | DW_EH_PE_pcrel | DW_EH_PE_sdata4
 #else
-        .cfi_personality 0, C_FUNC(\Handler) // 0 == DW_EH_PE_absptr
+        .cfi_personality 0x1b, C_FUNC(\Handler) // 0x1b == DW_EH_PE_pcrel | DW_EH_PE_sdata4
 #endif
         .endif
 .endm
--- a/coreclr-1.0.6/src/dlls/mscoree/coreclr/CMakeLists.txt	2017-07-05 21:17:15.951003739 +0200
+++ b/coreclr-1.0.6/src/dlls/mscoree/coreclr/CMakeLists.txt	2017-07-05 21:16:23.559001159 +0200
@@ -58,7 +58,7 @@
 add_custom_target(coreclr_exports DEPENDS ${EXPORTS_FILE})
 add_dependencies(coreclr coreclr_exports)
 
-set_property(TARGET coreclr APPEND_STRING PROPERTY LINK_FLAGS ${EXPORTS_LINKER_OPTION})
+set_property(TARGET coreclr APPEND_STRING PROPERTY LINK_FLAGS "${EXPORTS_LINKER_OPTION} -Wl,-nostrip")
 set_property(TARGET coreclr APPEND_STRING PROPERTY LINK_DEPENDS ${EXPORTS_FILE})
 
 if (CLR_CMAKE_PLATFORM_UNIX)
--- a/coreclr-1.0.6/src/dlls/mscordac/CMakeLists.txt	2017-07-05 22:10:15.466160280 +0200
+++ b/coreclr-1.0.6/src/dlls/mscordac/CMakeLists.txt	2017-07-05 22:09:46.426158850 +0200
@@ -60,7 +60,7 @@
     add_custom_target(mscordaccore_exports DEPENDS ${EXPORTS_FILE})
     add_dependencies(mscordaccore mscordaccore_exports)
 
-    set_property(TARGET mscordaccore APPEND_STRING PROPERTY LINK_FLAGS ${EXPORTS_LINKER_OPTION})
+    set_property(TARGET mscordaccore APPEND_STRING PROPERTY LINK_FLAGS "${EXPORTS_LINKER_OPTION} -Wl,-z,muldefs")
     set_property(TARGET mscordaccore APPEND_STRING PROPERTY LINK_DEPENDS ${EXPORTS_FILE})
 endif(CLR_CMAKE_PLATFORM_UNIX)
 
