diff --git a/OpenTabletDriver.Daemon/DriverDaemon.cs b/OpenTabletDriver.Daemon/DriverDaemon.cs
index 7e5f586ca..9a7c0b30f 100644
--- a/OpenTabletDriver.Daemon/DriverDaemon.cs
+++ b/OpenTabletDriver.Daemon/DriverDaemon.cs
@@ -31,7 +31,7 @@ namespace OpenTabletDriver.Daemon
 {
     public class DriverDaemon : IDriverDaemon
     {
-        public DriverDaemon(Driver driver)
+        public DriverDaemon(Driver driver, ISleepDetector sleepDetector)
         {
             Driver = driver;
 
@@ -63,16 +63,16 @@ public DriverDaemon(Driver driver)
 
             LoadUserSettings();
 
-#if !DEBUG
-            SleepDetection = new(async () =>
+            sleepDetector.Slept += async () =>
             {
-                Log.Write(nameof(SleepDetectionThread), "Sleep detected...", LogLevel.Info);
+#if DEBUG
+                if (Debugger.IsAttached)
+                    return;
+#endif
+                Log.Write(nameof(DriverDaemon), "Sleep detected...", LogLevel.Info);
                 await DetectTablets();
                 await SetSettings(Settings);
-            });
-
-            SleepDetection.Start();
-#endif
+            };
         }
 
         public event EventHandler<LogMessage>? Message;
@@ -84,9 +84,6 @@ public DriverDaemon(Driver driver)
         private Collection<LogMessage> LogMessages { set; get; } = new Collection<LogMessage>();
         private Collection<ITool> Tools { set; get; } = new Collection<ITool>();
         private IUpdater Updater = DesktopInterop.Updater;
-#if !DEBUG
-        private readonly SleepDetectionThread SleepDetection;
-#endif
 
         private bool debugging;
 
diff --git a/OpenTabletDriver.Daemon/Program.cs b/OpenTabletDriver.Daemon/Program.cs
index 343b253d0..e5e7e88c7 100644
--- a/OpenTabletDriver.Daemon/Program.cs
+++ b/OpenTabletDriver.Daemon/Program.cs
@@ -7,6 +7,7 @@
 using Microsoft.Extensions.DependencyInjection;
 using OpenTabletDriver.Desktop;
 using OpenTabletDriver.Desktop.RPC;
+using OpenTabletDriver.Interop;
 using OpenTabletDriver.Plugin;
 using OpenTabletDriver.Plugin.Components;
 
@@ -71,14 +72,15 @@ static async Task Main(string[] args)
 
         static DriverDaemon BuildDaemon()
         {
-            return new DriverDaemon(new DriverBuilder()
+            var driver = new DriverBuilder()
                 .ConfigureServices(serviceCollection =>
                 {
                     serviceCollection.AddSingleton<IDeviceConfigurationProvider, DesktopDeviceConfigurationProvider>();
                     serviceCollection.AddSingleton<IReportParserProvider, DesktopReportParserProvider>();
                 })
-                .Build<Driver>(out _)
-            );
+                .Build<Driver>(out _);
+
+            return new DriverDaemon(driver, new SleepDetector());
         }
     }
 }
diff --git a/OpenTabletDriver/Interop/SleepDetectionThread.cs b/OpenTabletDriver/Interop/SleepDetectionThread.cs
deleted file mode 100644
index 66f0d29e4..000000000
--- a/OpenTabletDriver/Interop/SleepDetectionThread.cs
+++ /dev/null
@@ -1,67 +0,0 @@
-using System;
-using System.Diagnostics;
-using System.Threading;
-using System.Threading.Tasks;
-
-namespace OpenTabletDriver.Interop
-{
-    public class SleepDetectionThread : IDisposable
-    {
-        private readonly Stopwatch stopwatch = new();
-        private readonly Action action;
-        private Task task;
-        private CancellationTokenSource cancellationTokenSource;
-        private double prev;
-
-        public SleepDetectionThread(Action action)
-        {
-            this.action = action;
-        }
-
-        public void Start()
-        {
-            if (task != null)
-            {
-                Stop();
-            }
-
-            cancellationTokenSource = new();
-            task = DetectionLoop(cancellationTokenSource.Token);
-        }
-
-        public void Stop()
-        {
-            if (task != null)
-            {
-                cancellationTokenSource.Cancel();
-                task.Wait();
-
-                cancellationTokenSource.Dispose();
-                cancellationTokenSource = null;
-                task = null;
-            }
-        }
-
-        private async Task DetectionLoop(CancellationToken cancellationToken)
-        {
-            stopwatch.Start();
-            while (!cancellationToken.IsCancellationRequested)
-            {
-                var elapsed = stopwatch.Elapsed.TotalSeconds;
-                if (elapsed - prev > 2)
-                    action?.Invoke();
-
-                prev = elapsed;
-
-                await Task.Delay(TimeSpan.FromSeconds(1), cancellationToken);
-            }
-            stopwatch.Stop();
-        }
-
-        public void Dispose()
-        {
-            Stop();
-            GC.SuppressFinalize(this);
-        }
-    }
-}
diff --git a/OpenTabletDriver/Interop/SleepDetector.cs b/OpenTabletDriver/Interop/SleepDetector.cs
new file mode 100644
index 000000000..4ded55543
--- /dev/null
+++ b/OpenTabletDriver/Interop/SleepDetector.cs
@@ -0,0 +1,89 @@
+using System;
+using System.Diagnostics;
+using System.Threading;
+using System.Threading.Tasks;
+
+#nullable enable
+
+namespace OpenTabletDriver.Interop
+{
+    public interface ISleepDetector
+    {
+        event Action Slept;
+    }
+
+    public class SleepDetector : ISleepDetector
+    {
+        private readonly object sync = new();
+        private Task? task;
+        private CancellationTokenSource? cts;
+        private event Action? slept;
+
+        public event Action Slept
+        {
+            add
+            {
+                if (slept == null)
+                {
+                    Start();
+                }
+
+                slept += value;
+            }
+
+            remove
+            {
+                slept -= value;
+
+                if (slept == null)
+                {
+                    Stop();
+                }
+            }
+        }
+
+        private void Start()
+        {
+            lock (sync)
+            {
+                if (task != null)
+                    return;
+
+                cts = new();
+                task = DetectionLoop(cts.Token);
+            }
+        }
+
+        private void Stop()
+        {
+            lock (sync)
+            {
+                if (task == null)
+                    return;
+
+                cts!.Cancel();
+                task.Wait();
+
+                cts.Dispose();
+                cts = null;
+                task = null;
+            }
+        }
+
+        private async Task DetectionLoop(CancellationToken ct)
+        {
+            var prev = DateTime.UtcNow;
+            while (!ct.IsCancellationRequested)
+            {
+                var elapsed = DateTime.UtcNow;
+
+                if (elapsed - prev > TimeSpan.FromSeconds(8))
+                    slept?.Invoke();
+
+                prev = elapsed;
+
+                await Task.Delay(1000, ct);
+            }
+        }
+    }
+}
