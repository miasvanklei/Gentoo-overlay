--- a/src/coreclr/pal/src/CMakeLists.txt	2020-11-14 00:56:09.442947775 +0100
+++ b/src/coreclr/pal/src/CMakeLists.txt	2020-11-14 00:56:19.858033703 +0100
@@ -82,9 +82,6 @@
 if(CLR_CMAKE_HOST_ALPINE_LINUX)
   # Setting RLIMIT_NOFILE breaks debugging of coreclr on Alpine Linux for some reason
   add_definitions(-DDONT_SET_RLIMIT_NOFILE)
-  # On Alpine Linux, we need to ensure that the reported stack range for the primary thread is
-  # larger than the initial committed stack size.
-  add_definitions(-DENSURE_PRIMARY_STACK_SIZE)
 endif(CLR_CMAKE_HOST_ALPINE_LINUX)
 
 # turn off capability to remove unused functions (which was enabled in debug build with sanitizers)
--- a/src/coreclr/pal/src/thread/process.cpp	2022-02-15 10:51:12.586307418 +0100
+++ b/src/coreclr/pal/src/thread/process.cpp	2022-02-15 10:51:54.719829577 +0100
@@ -3062,7 +3062,7 @@
 PROCNotifyProcessShutdown(bool isExecutingOnAltStack)
 {
     // Call back into the coreclr to clean up the debugger transport pipes
-    PSHUTDOWN_CALLBACK callback = InterlockedExchangePointer(&g_shutdownCallback, NULL);
+    PSHUTDOWN_CALLBACK callback = InterlockedExchangePointer(&g_shutdownCallback, 0);
     if (callback != NULL)
     {
         callback(isExecutingOnAltStack);
--- a/eng/native/configureplatform.cmake
+++ b/eng/native/configureplatform.cmake
@@ -72,6 +72,9 @@
         elseif(CLR_CMAKE_LINUX_ID STREQUAL alpine)
             set(CLR_CMAKE_HOST_ALPINE_LINUX 1)
             set(CLR_CMAKE_HOST_OS ${CLR_CMAKE_LINUX_ID})
+        elseif(CLR_CMAKE_LINUX_ID STREQUAL gentoo)
+            set(CLR_CMAKE_HOST_ALPINE_LINUX 1)
+            set(CLR_CMAKE_HOST_OS ${CLR_CMAKE_LINUX_ID})
         endif()
     endif(DEFINED CLR_CMAKE_LINUX_ID)
 endif(CLR_CMAKE_HOST_OS STREQUAL Linux)
@@ -253,6 +256,13 @@
     set(CLR_CMAKE_TARGET_ALPINE_LINUX 1)
 endif(CLR_CMAKE_TARGET_OS STREQUAL alpine)
 
+if(CLR_CMAKE_TARGET_OS STREQUAL gentoo)
+    set(CLR_CMAKE_TARGET_UNIX 1)
+    set(CLR_CMAKE_TARGET_LINUX 1)
+    set(CLR_CMAKE_TARGET_ALPINE_LINUX 1)
+    set(CLR_CMAKE_TARGET_LINUX_MUSL 1)
+endif(CLR_CMAKE_TARGET_OS STREQUAL gentoo)
+
 if(CLR_CMAKE_TARGET_OS STREQUAL Android)
     set(CLR_CMAKE_TARGET_UNIX 1)
     set(CLR_CMAKE_TARGET_LINUX 1)
--- a/eng/native/configurecompiler.cmake
+++ b/eng/native/configurecompiler.cmake
@@ -439,6 +439,9 @@
     add_compile_definitions($<$<NOT:$<BOOL:$<TARGET_PROPERTY:IGNORE_DEFAULT_TARGET_OS>>>:TARGET_FREEBSD>)
   elseif(CLR_CMAKE_TARGET_LINUX)
     add_compile_definitions($<$<NOT:$<BOOL:$<TARGET_PROPERTY:IGNORE_DEFAULT_TARGET_OS>>>:TARGET_LINUX>)
+    if(CLR_CMAKE_TARGET_LINUX_MUSL)
+        add_compile_definitions($<$<NOT:$<BOOL:$<TARGET_PROPERTY:IGNORE_DEFAULT_TARGET_OS>>>:TARGET_LINUX_MUSL>)
+    endif()
   elseif(CLR_CMAKE_TARGET_NETBSD)
     add_compile_definitions($<$<NOT:$<BOOL:$<TARGET_PROPERTY:IGNORE_DEFAULT_TARGET_OS>>>:TARGET_NETBSD>)
   elseif(CLR_CMAKE_TARGET_SUNOS)
--- a/src/native/corehost/hostmisc/pal.h
+++ b/src/native/corehost/hostmisc/pal.h
@@ -81,6 +81,8 @@
 #define FALLBACK_HOST_RID _X("illumos")
 #elif defined(__sun)
 #define FALLBACK_HOST_RID _X("solaris")
+#elif defined(TARGET_LINUX_MUSL)
+#define FALLBACK_HOST_RID _X("linux-musl")
 #else
 #define FALLBACK_HOST_RID _X("linux")
 #endif
--- a/src/coreclr/vm/amd64/unixstubs.cpp	2022-11-02 18:12:28.424716885 +0100
+++ b/src/coreclr/vm/amd64/unixstubs.cpp	2022-11-02 18:16:10.451639248 +0100
@@ -10,6 +10,7 @@
         PORTABILITY_ASSERT("Implement for PAL");
     }
 
+#if !__has_builtin(__cpuid)
     void __cpuid(int cpuInfo[4], int function_id)
     {
         // Based on the Clang implementation provided in cpuid.h:
@@ -31,6 +32,7 @@
             : "0"(function_id), "2"(subFunction_id)
         );
     }
+#endif
 
     DWORD xmmYmmStateSupport()
     {
--- a/src/coreclr/debug/createdump/crashinfounix.cpp	2022-11-02 18:13:46.762748373 +0100
+++ b/src/coreclr/debug/createdump/crashinfounix.cpp	2022-11-02 18:14:17.700155592 +0100
@@ -395,7 +395,7 @@
         // performance optimization.
         m_canUseProcVmReadSyscall = false;
         assert(m_fd != -1);
-        *read = pread64(m_fd, buffer, size, (off64_t)address);
+        *read = pread(m_fd, buffer, size, (off_t)address);
     }
 
     if (*read == (size_t)-1)
