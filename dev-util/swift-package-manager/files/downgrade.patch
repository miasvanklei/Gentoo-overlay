diff --git a/Sources/SourceControl/GitRepository.swift b/Sources/SourceControl/GitRepository.swift
index 255eaed..61bd02d 100644
--- a/Sources/SourceControl/GitRepository.swift
+++ b/Sources/SourceControl/GitRepository.swift
@@ -219,9 +219,6 @@ public class GitRepository: Repository, WorkingCheckout {
     /// The path of the repository on disk.
     public let path: AbsolutePath
 
-    /// The (serial) queue to execute git cli on.
-    private let queue = DispatchQueue(label: "org.swift.swiftpm.gitqueue")
-
     /// If this repo is a work tree repo (checkout) as opposed to a bare repo.
     let isWorkingRepo: Bool
 
@@ -242,7 +239,8 @@ public class GitRepository: Repository, WorkingCheckout {
     ///   - remote: The name of the remote. It shouldn't already be present.
     ///   - url: The url of the remote.
     func add(remote: String, url: String) throws {
-        try runCommandQuietly([Git.tool, "-C", path.asString, "remote", "add", remote, url])
+        try system(
+            Git.tool, "-C", path.asString, "remote", "add", remote, url)
     }
 
     /// Removes a remote from the git repository.
@@ -251,41 +249,13 @@ public class GitRepository: Repository, WorkingCheckout {
     ///   - remote: The name of the remote to be removed. It should already be present.
     ///   - url: the url of the remote.
     func remove(remote: String) throws {
-        try runCommandQuietly([Git.tool, "-C", path.asString, "remote", "remove", remote])
-    }
-
-    /// Gets the current list of remotes of the repository.
-    ///
-    /// - Returns: An array of tuple containing name and url of the remote.
-    public func remotes() throws -> [(name: String, url: String)] {
-        return try queue.sync {
-            // Get the remote names.
-            let remoteNamesOutput = try Git.runPopen([Git.tool, "-C", path.asString, "remote"]).chomp()
-            let remoteNames = remoteNamesOutput.characters.split(separator: "\n").map(String.init)
-            return try remoteNames.map { name in
-                // For each remote get the url.
-                let url = try Git.runPopen([Git.tool, "-C", path.asString, "config", "--get", "remote.\(name).url"]).chomp()
-                return (name, url)
-            }
-        }
+        try system(
+            Git.tool, "-C", path.asString, "remote", "remove", remote)
     }
 
     // MARK: Repository Interface
-
-    /// Returns the tags present in repository.
-    public var tags: [String] {
-        return queue.sync {
-            // Check if we already have the tags cached.
-            if let tags = tagsCache {
-                return tags
-            }
-            tagsCache = getTags()
-            return tagsCache!
-        }
-    }
-
-    /// Cache for the tags.
-    private var tagsCache: [String]? = nil
+    public var tags: [String] { return tagsCache.getValue(self) }
+    private var tagsCache = LazyCache(getTags)
 
     /// Returns the tags present in repository.
     private func getTags() -> [String] {
@@ -299,27 +269,8 @@ public class GitRepository: Repository, WorkingCheckout {
     }
 
     public func fetch() throws {
-        try runCommandQuietly([Git.tool, "-C", path.asString, "fetch", "--tags"]) {
-            self.tagsCache = nil
-        }
-    }
-
-    public func hasUncommitedChanges() -> Bool {
-        // Only a work tree can have changes.
-        guard isWorkingRepo else { return false }
-        return queue.sync {
-            // Detect if there is a staged or unstaged diff.
-            // This won't detect new untracked files, but it is
-            // just a safety measure for now.
-            let diffArgs = ["--no-ext-diff", "--quiet", "--exit-code"]
-            do {
-                _ = try Git.runPopen([Git.tool, "-C", path.asString, "diff"] + diffArgs)
-                _ = try Git.runPopen([Git.tool, "-C", path.asString, "diff", "--cached"] + diffArgs)
-            } catch {
-                return true
-            }
-            return false
-        }
+        try system(
+            Git.tool, "-C", path.asString, "fetch", "--tags")
     }
 
     public func openFileView(revision: Revision) throws -> FileSystem {
@@ -329,30 +280,33 @@ public class GitRepository: Repository, WorkingCheckout {
     // MARK: Working Checkout Interface
 
     public func hasUnpushedCommits() throws -> Bool {
-        let hasOutput = try runPopen([Git.tool, "-C", path.asString, "log", "--branches", "--not", "--remotes"]).chomp().isEmpty
+        let hasOutput = try Git.runPopen([Git.tool, "-C", path.asString, "log", "--branches", "--not", "--remotes"]).chomp().isEmpty
         return !hasOutput
     }
 
     public func getCurrentRevision() throws -> Revision {
-        return Revision(identifier: try runPopen([Git.tool, "-C", path.asString, "rev-parse", "--verify", "HEAD"]).chomp())
+        return Revision(identifier: try Git.runPopen([Git.tool, "-C", path.asString, "rev-parse", "--verify", "HEAD"]).chomp())
     }
 
     public func checkout(tag: String) throws {
         // FIXME: Audit behavior with off-branch tags in remote repositories, we
         // may need to take a little more care here.
-        try runCommandQuietly([Git.tool, "-C", path.asString, "reset", "--hard", tag])
+        try system(
+            Git.tool, "-C", path.asString, "reset", "--hard", tag, message: nil)
     }
 
     public func checkout(revision: Revision) throws {
         // FIXME: Audit behavior with off-branch tags in remote repositories, we
         // may need to take a little more care here.
-        try runCommandQuietly([Git.tool, "-C", path.asString, "checkout", "-f", revision.identifier])
+        try system(
+            Git.tool, "-C", path.asString, "reset", "--hard", revision.identifier, message: nil)
     }
 
     /// Returns true if a revision exists.
     public func exists(revision: Revision) -> Bool {
         do {
-           _ = try runCommandQuietly([Git.tool, "-C", path.asString, "rev-parse", "--verify", revision.identifier])
+           _ = try system(
+                   Git.tool, "-C", path.asString, "rev-parse", "--verify", revision.identifier)
         } catch {
             return false
         }
@@ -361,7 +315,8 @@ public class GitRepository: Repository, WorkingCheckout {
 
     public func checkout(newBranch: String) throws {
         precondition(isWorkingRepo, "This operation should run in a working repo.")
-        try runCommandQuietly([Git.tool, "-C", path.asString, "checkout", "-b", newBranch])
+        try system(
+            Git.tool, "-C", path.asString, "checkout", "-b", newBranch)
     }
 
     // MARK: Git Operations
@@ -377,7 +332,7 @@ public class GitRepository: Repository, WorkingCheckout {
         } else {
             specifier = treeish
         }
-        let response = try runPopen([Git.tool, "-C", path.asString, "rev-parse", "--verify", specifier]).chomp()
+        let response = try Git.runPopen([Git.tool, "-C", path.asString, "rev-parse", "--verify", specifier]).chomp()
         if let hash = Hash(response) {
             return hash
         } else {
@@ -396,7 +351,7 @@ public class GitRepository: Repository, WorkingCheckout {
     /// Read a tree object.
     func read(tree hash: Hash) throws -> Tree {
         // Get the contents using `ls-tree`.
-        let treeInfo = try runPopen([Git.tool, "-C", path.asString, "ls-tree", hash.bytes.asString!])
+        let treeInfo = try Git.runPopen([Git.tool, "-C", path.asString, "ls-tree", hash.bytes.asString!])
 
         var contents: [Tree.Entry] = []
         for line in treeInfo.components(separatedBy: "\n") {
@@ -444,24 +399,9 @@ public class GitRepository: Repository, WorkingCheckout {
         // Get the contents using `cat-file`.
         //
         // FIXME: We need to get the raw bytes back, not a String.
-        let output = try runPopen([Git.tool, "-C", path.asString, "cat-file", "-p", hash.bytes.asString!])
+        let output = try Git.runPopen([Git.tool, "-C", path.asString, "cat-file", "-p", hash.bytes.asString!])
         return ByteString(encodingAsUTF8: output)
     }
-
-    /// Runs the command in the serial queue and runs the completion closure if present.
-    private func runCommandQuietly(_ command: [String], completion: (() -> Void)? = nil) throws {
-        try queue.sync {
-            try Git.runCommandQuietly(command)
-            completion?()
-        }
-    }
-
-    /// Executes popen in the serial queue.
-    private func runPopen(_ command: [String]) throws -> String {
-        return try queue.sync {
-            return try Git.runPopen(command)
-        }
-    }
 }
 
 func ==(_ lhs: GitRepository.Commit, _ rhs: GitRepository.Commit) -> Bool {
diff --git a/Sources/SourceControl/Repository.swift b/Sources/SourceControl/Repository.swift
index 5d34809..18fd118 100644
--- a/Sources/SourceControl/Repository.swift
+++ b/Sources/SourceControl/Repository.swift
@@ -150,10 +150,6 @@ public protocol WorkingCheckout {
     /// Query whether the checkout has any commits which are not pushed to its remote.
     func hasUnpushedCommits() throws -> Bool
 
-    /// This check for any modified state of the repository and returns true
-    /// if there are uncommited changes.
-    func hasUncommitedChanges() -> Bool
-
     /// Check out the given tag.
     func checkout(tag: String) throws
 
diff --git a/Sources/Commands/Workspace.swift b/Sources/Commands/Workspace.swift
index fc0c5e7..91327cd 100644
--- a/Sources/Commands/Workspace.swift
+++ b/Sources/Commands/Workspace.swift
@@ -400,9 +400,6 @@ public class Workspace {
         // Check for uncommited and unpushed changes if force removal is off.
         if !forceRemove {
             let workingRepo = try repositoryManager.provider.openCheckout(at: path)
-            guard !workingRepo.hasUncommitedChanges() else {
-                throw WorkspaceOperationError.hasUncommitedChanges(repo: path)
-            }
             guard try !workingRepo.hasUnpushedCommits() else {
                 throw WorkspaceOperationError.hasUnpushedChanges(repo: path)
             }
@@ -750,9 +747,6 @@ public class Workspace {
         // Remove the checkout.
         let dependencyPath = checkoutsPath.appending(dependency.subpath)
         let checkedOutRepo = try repositoryManager.provider.openCheckout(at: dependencyPath)
-        guard !checkedOutRepo.hasUncommitedChanges() else {
-            throw WorkspaceOperationError.hasUncommitedChanges(repo: dependencyPath)
-        }
         try removeFileTree(dependencyPath)
 
         // Remove the clone.
diff --git a/Sources/Basic/Thread.swift b/Sources/Basic/Thread.swift
index c942863..403a3eb 100644
--- a/Sources/Basic/Thread.swift
+++ b/Sources/Basic/Thread.swift
@@ -47,7 +47,7 @@ final public class Thread {
             }
         }
 
-        self.thread = ThreadImpl(block: theTask)
+        self.thread = ThreadImpl(theTask)
     }
 
     /// Starts the thread execution.
