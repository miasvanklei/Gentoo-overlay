diff --git a/Sources/Basic/OutputByteStream.swift b/Sources/Basic/OutputByteStream.swift
index 349e57a..e6eebc1 100644
--- a/Sources/Basic/OutputByteStream.swift
+++ b/Sources/Basic/OutputByteStream.swift
@@ -560,7 +560,7 @@ public class FileOutputByteStream: OutputByteStream {
 public final class LocalFileOutputByteStream: FileOutputByteStream {
 
     /// The pointer to the file.
-    let fp: UnsafeMutablePointer<FILE>
+    let fp: OpaquePointer
 
     /// True if there were any IO error during writing.
     private var error: Bool = false
@@ -569,7 +569,7 @@ public final class LocalFileOutputByteStream: FileOutputByteStream {
     private var closeOnDeinit: Bool
 
     /// Instantiate using the file pointer.
-    init(filePointer: UnsafeMutablePointer<FILE>, closeOnDeinit: Bool = true) throws {
+    init(filePointer: OpaquePointer, closeOnDeinit: Bool = true) throws {
         self.fp = filePointer
         self.closeOnDeinit = closeOnDeinit
         super.init()
diff --git a/Sources/Utility/ArgumentParser.swift b/Sources/Utility/ArgumentParser.swift
index 539b6f4..f61f08b 100644
--- a/Sources/Utility/ArgumentParser.swift
+++ b/Sources/Utility/ArgumentParser.swift
@@ -206,7 +206,15 @@ fileprivate final class AnyArgument: ArgumentProtocol, CustomStringConvertible {
     let isArray: Bool
 
     init<T: ArgumentProtocol>(_ arg: T) {
-        self.kind = T.ArgumentKindTy.self as! ArgumentKind.Type
+        if T.ArgumentKindTy.self is String.Type {
+            self.kind = String.self
+        } else if T.ArgumentKindTy.self is Bool.Type {
+            self.kind = Bool.self
+        } else if T.ArgumentKindTy.self is Int.Type {
+            self.kind = Int.self
+        } else {
+            self.kind = String.self
+        }
         self.name = arg.name
         self.shortName = arg.shortName
         self.usage = arg.usage
@@ -215,7 +223,15 @@ fileprivate final class AnyArgument: ArgumentProtocol, CustomStringConvertible {
 
     /// Initializer for array arguments.
     init<T>(_ arg: OptionArgument<[T]>) {
-        self.kind = T.self as! ArgumentKind.Type
+        if T.self is String.Type {
+            self.kind = String.self
+        } else if T.self is Bool.Type {
+            self.kind = Bool.self
+        } else if T.self is Int.Type {
+            self.kind = Int.self
+        } else {
+            self.kind = String.self
+        }
         self.name = arg.name
         self.shortName = arg.shortName
         self.usage = arg.usage
