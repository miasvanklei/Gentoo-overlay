From 7da55912d851f8897077537cf50c305846d05cd9 Mon Sep 17 00:00:00 2001
From: Ankit Aggarwal <ankit_aggarwal@apple.com>
Date: Fri, 16 Dec 2016 20:04:48 +0530
Subject: [PATCH] [Build] Link swiftmodule in debug mode for executables

This is needed to debug swift executables on linux.

- https://bugs.swift.org/browse/SR-3280
---
 Sources/Build/Command.link(SwiftModule).swift  | 16 +++++++++++++++-
 Tests/FunctionalTests/MiscellaneousTests.swift | 10 ++++++++++
 2 files changed, 25 insertions(+), 1 deletion(-)

diff --git a/Sources/Build/Command.link(SwiftModule).swift b/Sources/Build/Command.link(SwiftModule).swift
index b96b3e3..f7b6bdc 100644
--- a/Sources/Build/Command.link(SwiftModule).swift
+++ b/Sources/Build/Command.link(SwiftModule).swift
@@ -26,7 +26,16 @@ extension Command {
             return [module] + module.recursiveDependencies.filter{ $0.type == .library }
         }.flatMap{ $0 as? SwiftModule }).contents
         
-        var objects = buildables.flatMap { SwiftcTool(module: $0, prefix: prefix, otherArgs: [], executable: linkerExec.asString, conf: conf).objects }
+        var objects = buildables.flatMap { module -> [AbsolutePath] in
+            let tool = SwiftcTool(module: module, prefix: prefix, otherArgs: [], executable: linkerExec.asString, conf: conf)
+            var objects = tool.objects
+            // To make executables debuggable, we need to link swiftmodule of the main executable module.
+            if module.type == .executable && conf == .debug {
+                assert(product.type == .Executable)
+                objects.append(tool.moduleOutputPath)
+            }
+            return objects
+        }
 
         let outpath = prefix.appending(product.outname)
 
@@ -84,6 +93,11 @@ extension Command {
         case .Library(.Dynamic):
             args.append("-emit-library")
         case .Executable:
+            // FIXME: This is inefficient, we can store the main module in enum payload.
+            guard let mainModule = product.modules.first(where: { $0.type == .executable }) else {
+                fatalError("Product does not have an executable module \(product.modules)")
+            }
+            args += ["-module-name", mainModule.c99name]
             args.append("-emit-executable")
         }
         
diff --git a/Tests/FunctionalTests/MiscellaneousTests.swift b/Tests/FunctionalTests/MiscellaneousTests.swift
index 550c91e..fa1e2fc 100644
--- a/Tests/FunctionalTests/MiscellaneousTests.swift
+++ b/Tests/FunctionalTests/MiscellaneousTests.swift
@@ -435,6 +435,15 @@ class MiscellaneousTestCase: XCTestCase {
         }
     }
 
+    func testCanDebugUsinglldb() throws {
+        fixture(name: "DependencyResolution/Internal/Simple") { prefix in
+            _ = try executeSwiftBuild(prefix)
+            let exec = prefix.appending(components: ".build", "debug", "Foo").asString
+            let result = try popen(["lldb", exec, "-o", "b main.swift:2", "-o", "r", "-o", "po Bar().value", "-b"])
+            XCTAssertTrue(result.contains("\"Bar\""))
+        }
+    }
+
     static var allTests = [
         ("testExecutableAsBuildOrderDependency", testExecutableAsBuildOrderDependency),
         ("testPrintsSelectedDependencyVersion", testPrintsSelectedDependencyVersion),
@@ -468,5 +477,6 @@ class MiscellaneousTestCase: XCTestCase {
         ("testInitPackageNonc99Directory", testInitPackageNonc99Directory),
         ("testOverridingSwiftcArguments", testOverridingSwiftcArguments),
         ("testPkgConfigClangModules", testPkgConfigClangModules),
+        ("testCanDebugUsinglldb", testCanDebugUsinglldb),
     ]
 }
