diff --git a/CMakeLists.txt b/CMakeLists.txt
index aefe2cd5c..c26727b12 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,6 +8,8 @@ if(NOT LLDB_BUILT_STANDALONE AND EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../swift)
    list(APPEND CMAKE_MODULE_PATH
         "${CMAKE_CURRENT_SOURCE_DIR}/../swift/cmake"
         "${CMAKE_CURRENT_SOURCE_DIR}/../swift/cmake/modules")
+else()
+    list(APPEND CMAKE_MODULE_PATH "/usr/lib/cmake/swift")
 endif()
 
 if (__ANDROID_NDK__ OR (CMAKE_SYSTEM_NAME MATCHES "Windows"))
diff --git a/cmake/LLDBDependencies.cmake b/cmake/LLDBDependencies.cmake
index 55ce37908..098bf6321 100644
--- a/cmake/LLDBDependencies.cmake
+++ b/cmake/LLDBDependencies.cmake
@@ -8,6 +8,9 @@ if ( CMAKE_SYSTEM_NAME MATCHES "Windows" )
     )
 endif ()
 
+list(APPEND LLDB_SYSTEM_LIBS uuid)
+list(APPEND LLDB_SYSTEM_LIBS cmark)
+
 if (NOT LLDB_DISABLE_LIBEDIT)
   list(APPEND LLDB_SYSTEM_LIBS edit)
 endif()
@@ -18,10 +21,6 @@ if (NOT LLDB_DISABLE_CURSES)
   endif()
 endif()
 
-if (NOT HAVE_CXX_ATOMICS64_WITHOUT_LIB )
-    list(APPEND LLDB_SYSTEM_LIBS atomic)
-endif()
-
 list(APPEND LLDB_SYSTEM_LIBS ${Backtrace_LIBRARY})
 
 if (NOT LLDB_DISABLE_PYTHON AND NOT LLVM_BUILD_STATIC)
diff --git a/cmake/modules/LLDBStandalone.cmake b/cmake/modules/LLDBStandalone.cmake
index 42edffcc5..459e8c414 100644
--- a/cmake/modules/LLDBStandalone.cmake
+++ b/cmake/modules/LLDBStandalone.cmake
@@ -12,12 +12,7 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
 
   # Rely on llvm-config.
   set(CONFIG_OUTPUT)
-  set(FIND_PATHS "")
-  if (LLDB_PATH_TO_LLVM_BUILD)
-    set(FIND_PATHS "${LLDB_PATH_TO_LLVM_BUILD}/bin")
-  endif()
-  find_program(LLVM_CONFIG "llvm-config"
-    HINTS ${FIND_PATHS})
+  find_program(LLVM_CONFIG "llvm-config")
 
   if(LLVM_CONFIG)
     message(STATUS "Found LLVM_CONFIG as ${LLVM_CONFIG}")
@@ -63,18 +58,7 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
     mark_as_advanced(LLVM_ENABLE_ASSERTIONS)
   endif()
 
-  if (LLDB_PATH_TO_CLANG_SOURCE)
-    get_filename_component(CLANG_MAIN_SRC_DIR ${LLDB_PATH_TO_CLANG_SOURCE} ABSOLUTE)
-    set(CLANG_MAIN_INCLUDE_DIR "${CLANG_MAIN_SRC_DIR}/include")
-  endif()
-
-  if (LLDB_PATH_TO_SWIFT_SOURCE)
-      get_filename_component(SWIFT_MAIN_SRC_DIR ${LLDB_PATH_TO_SWIFT_SOURCE}
-                             ABSOLUTE)
-  endif()
 
-  list(APPEND CMAKE_MODULE_PATH "${LLDB_PATH_TO_LLVM_BUILD}/share/llvm/cmake")
-  list(APPEND CMAKE_MODULE_PATH "${LLDB_PATH_TO_SWIFT_SOURCE}/cmake/modules")
   set(LLVM_TOOLS_BINARY_DIR ${TOOLS_BINARY_DIR} CACHE PATH "Path to llvm/bin")
   set(LLVM_LIBRARY_DIR ${LIBRARY_DIR} CACHE PATH "Path to llvm/lib")
   set(LLVM_MAIN_INCLUDE_DIR ${INCLUDE_DIR} CACHE PATH "Path to llvm/include")
@@ -94,14 +78,6 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
     message(FATAL_ERROR "Not found: ${LLVMCONFIG_FILE}")
   endif()
 
-
-  get_filename_component(PATH_TO_SWIFT_BUILD ${LLDB_PATH_TO_SWIFT_BUILD}
-                         ABSOLUTE)
-
-  get_filename_component(PATH_TO_CMARK_BUILD ${LLDB_PATH_TO_CMARK_BUILD}
-                         ABSOLUTE)
-
-  # These variables are used by add_llvm_library.
   # They are used as destination of target generators.
   set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin)
   set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX})
@@ -129,37 +105,35 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
     message("-- Found PythonInterp: ${PYTHON_EXECUTABLE}")
   endif()
 
-  # Start Swift Mods
-  find_package(Clang REQUIRED CONFIG
-    HINTS "${LLDB_PATH_TO_CLANG_BUILD}" NO_DEFAULT_PATH)
-  find_package(Swift REQUIRED CONFIG
-    HINTS "${PATH_TO_SWIFT_BUILD}" NO_DEFAULT_PATH)
-  # End Swift Mods
+  # Import CMake library targets from LLVM and Clang.
+  include("${LLVM_OBJ_ROOT}/lib${LLVM_LIBDIR_SUFFIX}/cmake/llvm/LLVMConfig.cmake")
+  # cmake/clang/ClangConfig.cmake is not created when LLVM and Cland are built together.
+  if (EXISTS "${LLVM_OBJ_ROOT}/lib${LLVM_LIBDIR_SUFFIX}/cmake/clang/ClangConfig.cmake")
+    include("${LLVM_OBJ_ROOT}/lib${LLVM_LIBDIR_SUFFIX}/cmake/clang/ClangConfig.cmake")
+  endif()
 
   set(PACKAGE_VERSION "${LLVM_PACKAGE_VERSION}")
 
-  # Why are we doing this?
-  # set(LLVM_BINARY_DIR ${CMAKE_BINARY_DIR})
-
-  set(CLANG_MAIN_INCLUDE_DIR "${CLANG_MAIN_SRC_DIR}/include")
-
-  set(SWIFT_MAIN_INCLUDE_DIR "${SWIFT_MAIN_SRC_DIR}/include")
+  set(LLVM_BINARY_DIR ${CMAKE_BINARY_DIR})
 
   set(CMAKE_INCLUDE_CURRENT_DIR ON)
-  include_directories("${LLVM_BINARY_DIR}/include"
-                      "${LLVM_BINARY_DIR}/tools/clang/include"
-                      "${LLVM_MAIN_INCLUDE_DIR}"
-                      "${PATH_TO_CLANG_BUILD}/include"
-                      "${CLANG_MAIN_INCLUDE_DIR}"
-                      "${PATH_TO_SWIFT_BUILD}/include"
-                      "${SWIFT_MAIN_INCLUDE_DIR}"
-                      "${CMAKE_CURRENT_SOURCE_DIR}/source")
+  include_directories("${LLVM_BINARY_DIR}/include" "${LLVM_MAIN_INCLUDE_DIR}")
+  # Next three include directories are needed when llvm-config is located in build directory.
+  # LLVM and Cland are assumed to be built together
+  if (EXISTS "${LLVM_OBJ_ROOT}/include")
+    include_directories("${LLVM_OBJ_ROOT}/include")
+  endif()
+  if (EXISTS "${LLVM_MAIN_SRC_DIR}/tools/clang/include")
+    include_directories("${LLVM_MAIN_SRC_DIR}/tools/clang/include")
+  endif()
+  if (EXISTS "${LLVM_OBJ_ROOT}/tools/clang/include")
+    include_directories("${LLVM_OBJ_ROOT}/tools/clang/include")
+  endif()
+  link_directories("${LLVM_LIBRARY_DIR}")
 
   set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
   set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX})
   set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX})
 
   set(LLDB_BUILT_STANDALONE 1)
-else()
-  set(LLDB_PATH_TO_SWIFT_BUILD ${CMAKE_BINARY_DIR})
 endif()
diff --git a/source/API/CMakeLists.txt b/source/API/CMakeLists.txt
index e66cad635..5b7cce9b1 100644
--- a/source/API/CMakeLists.txt
+++ b/source/API/CMakeLists.txt
@@ -89,6 +89,8 @@ add_lldb_library(liblldb SHARED
   ${LLDB_WRAP_PYTHON}
 
   LINK_LIBS
+    clangAnalysis
+    clangIndex
     lldbBase
     lldbBreakpoint
     lldbCore
@@ -99,10 +101,22 @@ add_lldb_library(liblldb SHARED
     lldbSymbol
     lldbTarget
     lldbUtility
+    swiftMarkup
+    swiftLLVMPasses
+    swiftOption
+    swiftParseSIL
     ${LLDB_ALL_PLUGINS}
-    ${SWIFT_ALL_LIBS}
   LINK_COMPONENTS
+    TransformUtils
+    ObjCARCOpts
     Support
+    BitWriter
+    BitReader
+    Coverage
+    ProfileData
+    Instrumentation
+    Option
+    Object
   )
 
 if (LLVM_ENABLE_WERROR)
@@ -158,21 +171,6 @@ if (LLDB_WRAP_PYTHON)
 endif()
 target_link_libraries(liblldb PRIVATE ${LLDB_SYSTEM_LIBS})
 
-set(lib_dir "${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX}")
-set(CLANG_RESOURCE_PATH "${LLDB_PATH_TO_SWIFT_BUILD}/lib${LLVM_LIBDIR_SUFFIX}/swift/clang")
-set(clang_headers_target ${CLANG_RESOURCE_PATH}/include)
-if(NOT LLDB_BUILT_STANDALONE)
-  set(clang_headers_target symlink_clang_headers)
-endif()
-
-add_custom_command_target(
-    unused_var
-    COMMAND "${CMAKE_COMMAND}" "-E" "copy_directory" "${CLANG_RESOURCE_PATH}" "${lib_dir}/lldb/clang"
-    OUTPUT "${lib_dir}/lldb/clang"
-    VERBATIM
-    ALL
-    DEPENDS ${clang_headers_target})
-
 if(LLDB_BUILD_FRAMEWORK)
   file(GLOB public_headers ${LLDB_SOURCE_DIR}/include/lldb/API/*.h)
   set_target_properties(liblldb PROPERTIES
@@ -189,10 +187,3 @@ if(LLDB_BUILD_FRAMEWORK)
     COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX}/clang/${LLDB_VERSION} $<TARGET_FILE_DIR:liblldb>/Resources/Clang
     )
 endif()
-
-install(
-  CODE "file(MAKE_DIRECTORY ${lib_dir}/lldb)")
-
-install(
-  DIRECTORY "${lib_dir}/lldb/clang"
-  DESTINATION lib${LLVM_LIBDIR_SUFFIX}/lldb/)
diff --git a/source/Expression/CMakeLists.txt b/source/Expression/CMakeLists.txt
index 7d9643a45..04754ebdb 100644
--- a/source/Expression/CMakeLists.txt
+++ b/source/Expression/CMakeLists.txt
@@ -34,5 +34,6 @@ add_lldb_library(lldbExpression
   LINK_COMPONENTS
     Core
     ExecutionEngine
+    RuntimeDyld
     Support
   )
diff --git a/source/Plugins/Disassembler/llvm/CMakeLists.txt b/source/Plugins/Disassembler/llvm/CMakeLists.txt
index 0ae774464..fbfe19052 100644
--- a/source/Plugins/Disassembler/llvm/CMakeLists.txt
+++ b/source/Plugins/Disassembler/llvm/CMakeLists.txt
@@ -9,4 +9,5 @@ add_lldb_library(lldbPluginDisassemblerLLVM PLUGIN
     ${LLVM_TARGETS_TO_BUILD}
     MC
     Support
+    MCDisassembler
   )
diff --git a/source/Plugins/ExpressionParser/Swift/CMakeLists.txt b/source/Plugins/ExpressionParser/Swift/CMakeLists.txt
index 57c0f3b95..a15400aa0 100644
--- a/source/Plugins/ExpressionParser/Swift/CMakeLists.txt
+++ b/source/Plugins/ExpressionParser/Swift/CMakeLists.txt
@@ -24,7 +24,9 @@ add_lldb_library(lldbPluginExpressionParserSwift PLUGIN
     swiftIDE
     swiftParse
     swiftSIL
+    swiftSILGen
     swiftSILOptimizer
+    swiftSema
     swiftSerialization
     clangAST
     clangBasic
@@ -33,4 +35,5 @@ add_lldb_library(lldbPluginExpressionParserSwift PLUGIN
   LINK_COMPONENTS
     Support
     Core
+    Analysis
   )
diff --git a/source/Symbol/CMakeLists.txt b/source/Symbol/CMakeLists.txt
index a2533b34b..bb4021608 100644
--- a/source/Symbol/CMakeLists.txt
+++ b/source/Symbol/CMakeLists.txt
@@ -47,6 +47,7 @@ add_lldb_library(lldbSymbol
     swiftDriver
     swiftFrontend
     swiftIDE
+    swiftIRGen
     swiftSIL
     swiftSerialization
     clangAST
diff --git a/source/Target/CMakeLists.txt b/source/Target/CMakeLists.txt
index 97180b2cd..ee6d229e5 100644
--- a/source/Target/CMakeLists.txt
+++ b/source/Target/CMakeLists.txt
@@ -63,6 +63,7 @@ add_lldb_library(lldbTarget
   LINK_LIBS
     swiftAST
     swiftBasic
+    swiftDemangling
     swiftFrontend
     swiftRemoteAST
     lldbBreakpoint
diff --git a/tools/lldb-server/CMakeLists.txt b/tools/lldb-server/CMakeLists.txt
index 4a0960042..89c259f64 100644
--- a/tools/lldb-server/CMakeLists.txt
+++ b/tools/lldb-server/CMakeLists.txt
@@ -23,7 +23,12 @@ endif ()
 
 include_directories(../../source)
 
+
 set(LLDB_SYSTEM_LIBS)
+
+list(APPEND LLDB_SYSTEM_LIBS uuid)
+list(APPEND LLDB_SYSTEM_LIBS cmark)
+
 if (NOT LLDB_DISABLE_LIBEDIT)
   list(APPEND LLDB_SYSTEM_LIBS edit)
 endif()
@@ -66,16 +71,31 @@ add_lldb_tool(lldb-server INCLUDE_IN_FRAMEWORK
     LLDBServerUtilities.cpp
 
     LINK_LIBS
+      clangAnalysis
+      clangIndex
       lldbBase
       lldbCore
       lldbHost
       lldbInitialization
       lldbInterpreter
+      swiftMarkup
+      swiftLLVMPasses
+      swiftOption
+      swiftParseSIL
       ${LLDB_PLUGINS}
       ${LLDB_SYSTEM_LIBS}
 
     LINK_COMPONENTS
       Support
+      TransformUtils
+      ObjCARCOpts
+      BitWriter
+      BitReader
+      Coverage
+      ProfileData
+      Instrumentation
+      Option
+      Object
 )
 
 target_link_libraries(lldb-server ${LLDB_SYSTEM_LIBS})
diff --git a/tools/repl/swift/CMakeLists.txt b/tools/repl/swift/CMakeLists.txt
index 02c027c5f..dbb2c9c33 100644
--- a/tools/repl/swift/CMakeLists.txt
+++ b/tools/repl/swift/CMakeLists.txt
@@ -14,12 +14,12 @@ if(NOT LLDB_SWIFTC)
   if(NOT LLDB_BUILT_STANDALONE)
     set(LLDB_SWIFTC $<TARGET_FILE:swift>c)
   else()
-    set(LLDB_SWIFTC ${LLDB_PATH_TO_SWIFT_BUILD}/bin/swiftc)
+    set(LLDB_SWIFTC /usr/bin/swiftc)
   endif()
 endif()
 
-set(swift_compile_cmd "${LLDB_SWIFTC}"
-                      -resource-dir "${LLDB_PATH_TO_SWIFT_BUILD}/lib/swift"
+set(swift_compile_cmd "${LLDB_SWIFTC}" -Xlinker -nostrip
+                      -resource-dir "/usr/lib/swift"
                       -module-cache-path "${module_cache_dir}")
 
 if(CMAKE_CROSSCOMPILING)
