diff --git a/CMakeLists.txt b/CMakeLists.txt
index aefe2cd5c..8965dfa53 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,6 +10,15 @@ if(NOT LLDB_BUILT_STANDALONE AND EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../swift)
         "${CMAKE_CURRENT_SOURCE_DIR}/../swift/cmake/modules")
 endif()
 
+if(NOT LLDB_BUILT_STANDALONE AND EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../swift)
+   list(APPEND CMAKE_MODULE_PATH
+        "${CMAKE_CURRENT_SOURCE_DIR}/../swift/cmake"
+        "${CMAKE_CURRENT_SOURCE_DIR}/../swift/cmake/modules")
+else()
+   list(APPEND CMAKE_MODULE_PATH
+        "/usr/lib/cmake/swift")
+endif()
+
 if (__ANDROID_NDK__ OR (CMAKE_SYSTEM_NAME MATCHES "Windows"))
   set(LLDB_DEFAULT_DISABLE_LIBEDIT 1)
 else()
diff --git a/cmake/LLDBDependencies.cmake b/cmake/LLDBDependencies.cmake
index 55ce37908..802016fd9 100644
--- a/cmake/LLDBDependencies.cmake
+++ b/cmake/LLDBDependencies.cmake
@@ -1,13 +1,178 @@
-set(LLDB_SYSTEM_LIBS)
+set( LLDB_USED_LIBS
+  lldbBase
+  lldbBreakpoint
+  lldbCommands
+  lldbDataFormatters
+  lldbHost
+  lldbCore
+  lldbExpression
+  lldbInitialization
+  lldbInterpreter
+  lldbSymbol
+  lldbTarget
+  lldbUtility
+
+  # Plugins
+  lldbPluginDisassemblerLLVM
+  lldbPluginSymbolFileDWARF
+  lldbPluginSymbolFilePDB
+  lldbPluginSymbolFileSymtab
+  lldbPluginDynamicLoaderStatic
+  lldbPluginDynamicLoaderPosixDYLD
+  lldbPluginDynamicLoaderHexagonDYLD
+  lldbPluginDynamicLoaderWindowsDYLD
+
+  lldbPluginCPlusPlusLanguage
+  lldbPluginGoLanguage
+  lldbPluginJavaLanguage
+  lldbPluginObjCLanguage
+  lldbPluginObjCPlusPlusLanguage
+  lldbPluginSwiftLanguage
+  lldbPluginOCamlLanguage
+
+  lldbPluginObjectFileELF
+  lldbPluginObjectFileJIT
+  lldbPluginSymbolVendorELF
+  lldbPluginObjectContainerBSDArchive
+  lldbPluginObjectContainerMachOArchive
+  lldbPluginProcessGDBRemote
+  lldbPluginProcessUtility
+  lldbPluginPlatformAndroid
+  lldbPluginPlatformGDB
+  lldbPluginPlatformFreeBSD
+  lldbPluginPlatformKalimba
+  lldbPluginPlatformLinux
+  lldbPluginPlatformNetBSD
+  lldbPluginPlatformPOSIX
+  lldbPluginPlatformWindows
+  lldbPluginObjectContainerMachOArchive
+  lldbPluginObjectContainerBSDArchive
+  lldbPluginPlatformMacOSX
+  lldbPluginStructuredDataDarwinLog
+  lldbPluginDynamicLoaderMacOSXDYLD
+  lldbPluginUnwindAssemblyInstEmulation
+  lldbPluginUnwindAssemblyX86
+  lldbPluginAppleObjCRuntime
+  lldbPluginRenderScriptRuntime
+  lldbPluginLanguageRuntimeGo
+  lldbPluginLanguageRuntimeJava
+  lldbPluginCXXItaniumABI
+  lldbPluginABIMacOSX_arm
+  lldbPluginABIMacOSX_arm64
+  lldbPluginABIMacOSX_i386
+  lldbPluginABISysV_arm
+  lldbPluginABISysV_arm64
+  lldbPluginABISysV_i386
+  lldbPluginABISysV_x86_64
+  lldbPluginABISysV_hexagon
+  lldbPluginABISysV_ppc
+  lldbPluginABISysV_ppc64
+  lldbPluginABISysV_mips
+  lldbPluginABISysV_mips64
+  lldbPluginABISysV_s390x
+  lldbPluginInstructionARM
+  lldbPluginInstructionARM64
+  lldbPluginInstructionMIPS
+  lldbPluginInstructionMIPS64
+  lldbPluginObjectFilePECOFF
+  lldbPluginOSGo
+  lldbPluginOSPython
+  lldbPluginMemoryHistoryASan
+  lldbPluginInstrumentationRuntimeAddressSanitizer
+  lldbPluginInstrumentationRuntimeMainThreadChecker
+  lldbPluginInstrumentationRuntimeSwiftRuntimeReporting
+  lldbPluginInstrumentationRuntimeThreadSanitizer
+  lldbPluginInstrumentationRuntimeUndefinedBehaviorSanitizer
+  lldbPluginSystemRuntimeMacOSX
+  lldbPluginProcessElfCore
+  lldbPluginProcessMinidump
+  lldbPluginJITLoaderGDB
+  lldbPluginExpressionParserClang
+  lldbPluginExpressionParserGo
+  lldbPluginExpressionParserSwift
+  )
 
 # Windows-only libraries
 if ( CMAKE_SYSTEM_NAME MATCHES "Windows" )
-  list(APPEND LLDB_SYSTEM_LIBS
+  list(APPEND LLDB_USED_LIBS
+    lldbPluginProcessWindowsCommon
     ws2_32
     rpcrt4
     )
 endif ()
 
+# Linux-only libraries
+if ( CMAKE_SYSTEM_NAME MATCHES "Linux" )
+  list(APPEND LLDB_USED_LIBS
+    lldbPluginProcessLinux
+    lldbPluginProcessPOSIX
+   )
+endif ()
+
+# FreeBSD-only libraries
+if ( CMAKE_SYSTEM_NAME MATCHES "FreeBSD" )
+  list(APPEND LLDB_USED_LIBS
+    lldbPluginProcessFreeBSD
+    lldbPluginProcessPOSIX
+    )
+endif ()
+
+# NetBSD-only libraries
+if ( CMAKE_SYSTEM_NAME MATCHES "NetBSD" )
+  list(APPEND LLDB_USED_LIBS
+    lldbPluginProcessPOSIX
+    )
+endif ()
+
+# Darwin-only libraries
+if ( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
+  list(APPEND LLDB_USED_LIBS
+    lldbPluginDynamicLoaderDarwinKernel
+    lldbPluginObjectFileMachO
+    lldbPluginProcessMachCore
+    lldbPluginProcessMacOSXKernel
+    lldbPluginSymbolVendorMacOSX
+    )
+endif()
+
+set( CLANG_USED_LIBS
+  clangAnalysis
+  clangAST
+  clangBasic
+  clangCodeGen
+  clangDriver
+  clangEdit
+  clangFrontend
+  clangIndex
+  clangLex
+  clangParse
+  clangRewrite
+  clangRewriteFrontend
+  clangSema
+  clangSerialization
+  )
+set( SWIFT_USED_LIBS
+  swiftBasic
+  swiftAST
+  swiftDemangling
+  swiftIDE
+  swiftIRGen
+  swiftFrontend
+  swiftLLVMPasses
+  swiftSerialization
+  swiftClangImporter
+  swiftMarkup
+  swiftOption
+  swiftParse
+  swiftSema
+  swiftSIL
+  swiftSILGen
+  swiftSILOptimizer
+  swiftASTSectionImporter
+  swiftRemoteAST
+  )
+
+set(LLDB_SYSTEM_LIBS)
 if (NOT LLDB_DISABLE_LIBEDIT)
   list(APPEND LLDB_SYSTEM_LIBS edit)
 endif()
@@ -39,6 +204,46 @@ if (LLVM_BUILD_STATIC)
   endif()
 endif()
 
+# we should do this with a configuration script, but there is none for UUID
+if (NOT CMAKE_SYSTEM_NAME MATCHES "Darwin")
+list(APPEND LLDB_SYSTEM_LIBS uuid)
+endif()
+
+if(LLDB_BUILT_STANDALONE)
+  list(APPEND LLDB_SYSTEM_LIBS "-lcmark")
+else()
+  list(APPEND LLDB_SYSTEM_LIBS libcmark_static)
+endif()
+
+set(LLVM_LINK_COMPONENTS
+  ${LLVM_TARGETS_TO_BUILD}
+  interpreter
+  asmparser
+  bitreader
+  bitwriter
+  codegen
+  demangle
+  ipo
+  selectiondag
+  bitreader
+  mc
+  mcjit
+  core
+  analysis
+  profiledata
+  transformutils
+  objcarcopts
+  instrumentation
+  object
+  mcdisassembler
+  executionengine
+  runtimedyld
+  option
+  support
+  coverage
+  target
+  )
+
 if ( NOT LLDB_DISABLE_PYTHON )
   set_source_files_properties(${LLDB_WRAP_PYTHON} PROPERTIES GENERATED 1)
   if (CLANG_CL)
diff --git a/cmake/modules/AddLLDB.cmake b/cmake/modules/AddLLDB.cmake
index ac42d1955..46a4717d7 100644
--- a/cmake/modules/AddLLDB.cmake
+++ b/cmake/modules/AddLLDB.cmake
@@ -1,17 +1,31 @@
+function(lldb_link_common_libs name targetkind)
+  if (NOT LLDB_USED_LIBS)
+    return()
+  endif()
+
+  if(${targetkind} MATCHES "SHARED")
+    set(LINK_KEYWORD PRIVATE)
+  endif()
+
+  if(${targetkind} MATCHES "SHARED" OR ${targetkind} MATCHES "EXE")
+    if (LLDB_LINKER_SUPPORTS_GROUPS)
+      target_link_libraries(${name} ${LINK_KEYWORD}
+                            -Wl,--start-group ${LLDB_USED_LIBS} -Wl,--end-group)
+    else()
+      target_link_libraries(${name} ${LINK_KEYWORD} ${LLDB_USED_LIBS})
+    endif()
+  endif()
+endfunction(lldb_link_common_libs)
+
 function(add_lldb_library name)
   # only supported parameters to this macro are the optional
   # MODULE;SHARED;STATIC library type and source files
   cmake_parse_arguments(PARAM
-    "MODULE;SHARED;STATIC;OBJECT;PLUGIN"
+    "MODULE;SHARED;STATIC;OBJECT"
     ""
-    "DEPENDS;LINK_LIBS;LINK_COMPONENTS"
+    "DEPENDS"
     ${ARGN})
   llvm_process_sources(srcs ${PARAM_UNPARSED_ARGUMENTS})
-  list(APPEND LLVM_LINK_COMPONENTS ${PARAM_LINK_COMPONENTS})
-
-  if(PARAM_PLUGIN)
-    set_property(GLOBAL APPEND PROPERTY LLDB_PLUGINS ${name})
-  endif()
 
   if (MSVC_IDE OR XCODE)
     string(REGEX MATCHALL "/[^/]+" split_path ${CMAKE_CURRENT_SOURCE_DIR})
@@ -42,11 +56,26 @@ function(add_lldb_library name)
   if (PARAM_OBJECT)
     add_library(${name} ${libkind} ${srcs})
   else()
-    llvm_add_library(${name} ${libkind} ${srcs} LINK_LIBS
-                                ${PARAM_LINK_LIBS}
-                                DEPENDS ${PARAM_DEPENDS})
+    if (PARAM_SHARED)
+      if (LLDB_LINKER_SUPPORTS_GROUPS)
+        llvm_add_library(${name} ${libkind} ${srcs} LINK_LIBS
+                                -Wl,--start-group ${LLDB_USED_LIBS} -Wl,--end-group
+                                -Wl,--start-group ${CLANG_USED_LIBS} -Wl,--end-group
+                                -Wl,--start-group ${SWIFT_USED_LIBS} -Wl,--end-group
+                                DEPENDS ${PARAM_DEPENDS}
+          )
+      else()
+        llvm_add_library(${name} ${libkind} ${srcs} LINK_LIBS
+                                ${LLDB_USED_LIBS} ${CLANG_USED_LIBS}
+                                ${SWIFT_USED_LIBS}
+                                DEPENDS ${PARAM_DEPENDS}
+          )
+      endif()
+    else()
+      llvm_add_library(${name} ${libkind} ${srcs} DEPENDS ${PARAM_DEPENDS})
+    endif()
 
-    if (${name} STREQUAL "liblldb")
+    if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY OR ${name} STREQUAL "liblldb")
       if (PARAM_SHARED)
         set(out_dir lib${LLVM_LIBDIR_SUFFIX})
         if(${name} STREQUAL "liblldb" AND LLDB_BUILD_FRAMEWORK)
@@ -85,17 +114,8 @@ function(add_lldb_library name)
 endfunction(add_lldb_library)
 
 function(add_lldb_executable name)
-  cmake_parse_arguments(ARG
-    "INCLUDE_IN_FRAMEWORK;GENERATE_INSTALL"
-    ""
-    "LINK_LIBS;LINK_COMPONENTS"
-    ${ARGN}
-    )
-
-  list(APPEND LLVM_LINK_COMPONENTS ${ARG_LINK_COMPONENTS})
+  cmake_parse_arguments(ARG "INCLUDE_IN_FRAMEWORK;GENERATE_INSTALL" "" "" ${ARGN})
   add_llvm_executable(${name} ${ARG_UNPARSED_ARGUMENTS})
-
-  target_link_libraries(${name} ${ARG_LINK_LIBS})
   set_target_properties(${name} PROPERTIES
     FOLDER "lldb executables")
 
@@ -136,10 +156,6 @@ function(add_lldb_executable name)
     endif()
   endif()
 
-  # Might need the following in an else clause for above to cover non-Apple
-  # set(rpath_prefix "$ORIGIN")
-  # set_target_properties(${name} PROPERTIES INSTALL_RPATH "${rpath_prefix}/../lib")
-
   if(ARG_INCLUDE_IN_FRAMEWORK AND LLDB_BUILD_FRAMEWORK)
     add_llvm_tool_symlink(${name} ${name} ALWAYS_GENERATE SKIP_INSTALL
                             OUTPUT_DIR ${LLVM_RUNTIME_OUTPUT_INTDIR})
diff --git a/cmake/modules/LLDBConfig.cmake b/cmake/modules/LLDBConfig.cmake
index 50c66bd48..b367be1c1 100644
--- a/cmake/modules/LLDBConfig.cmake
+++ b/cmake/modules/LLDBConfig.cmake
@@ -25,8 +25,6 @@ endif()
 
 set(LLDB_DISABLE_PYTHON ${LLDB_DEFAULT_DISABLE_PYTHON} CACHE BOOL
   "Disables the Python scripting integration.")
-set(LLDB_ALLOW_STATIC_BINDINGS FALSE CACHE BOOL
-  "Enable using static/baked language bindings if swig is not present.")
 set(LLDB_DISABLE_CURSES ${LLDB_DEFAULT_DISABLE_CURSES} CACHE BOOL
   "Disables the Curses integration.")
 
diff --git a/cmake/modules/LLDBStandalone.cmake b/cmake/modules/LLDBStandalone.cmake
index 42edffcc5..2ac81e558 100644
--- a/cmake/modules/LLDBStandalone.cmake
+++ b/cmake/modules/LLDBStandalone.cmake
@@ -12,13 +12,7 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
 
   # Rely on llvm-config.
   set(CONFIG_OUTPUT)
-  set(FIND_PATHS "")
-  if (LLDB_PATH_TO_LLVM_BUILD)
-    set(FIND_PATHS "${LLDB_PATH_TO_LLVM_BUILD}/bin")
-  endif()
-  find_program(LLVM_CONFIG "llvm-config"
-    HINTS ${FIND_PATHS})
-
+  find_program(LLVM_CONFIG "llvm-config")
   if(LLVM_CONFIG)
     message(STATUS "Found LLVM_CONFIG as ${LLVM_CONFIG}")
     set(CONFIG_COMMAND ${LLVM_CONFIG}
@@ -63,18 +57,6 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
     mark_as_advanced(LLVM_ENABLE_ASSERTIONS)
   endif()
 
-  if (LLDB_PATH_TO_CLANG_SOURCE)
-    get_filename_component(CLANG_MAIN_SRC_DIR ${LLDB_PATH_TO_CLANG_SOURCE} ABSOLUTE)
-    set(CLANG_MAIN_INCLUDE_DIR "${CLANG_MAIN_SRC_DIR}/include")
-  endif()
-
-  if (LLDB_PATH_TO_SWIFT_SOURCE)
-      get_filename_component(SWIFT_MAIN_SRC_DIR ${LLDB_PATH_TO_SWIFT_SOURCE}
-                             ABSOLUTE)
-  endif()
-
-  list(APPEND CMAKE_MODULE_PATH "${LLDB_PATH_TO_LLVM_BUILD}/share/llvm/cmake")
-  list(APPEND CMAKE_MODULE_PATH "${LLDB_PATH_TO_SWIFT_SOURCE}/cmake/modules")
   set(LLVM_TOOLS_BINARY_DIR ${TOOLS_BINARY_DIR} CACHE PATH "Path to llvm/bin")
   set(LLVM_LIBRARY_DIR ${LIBRARY_DIR} CACHE PATH "Path to llvm/lib")
   set(LLVM_MAIN_INCLUDE_DIR ${INCLUDE_DIR} CACHE PATH "Path to llvm/include")
@@ -87,21 +69,12 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
 
   set(LLVMCONFIG_FILE "${LLVM_CMAKE_PATH}/LLVMConfig.cmake")
   if(EXISTS ${LLVMCONFIG_FILE})
-    file(TO_CMAKE_PATH "${LLVM_CMAKE_PATH}" LLVM_CMAKE_PATH)
     list(APPEND CMAKE_MODULE_PATH "${LLVM_CMAKE_PATH}")
     include(${LLVMCONFIG_FILE})
   else()
     message(FATAL_ERROR "Not found: ${LLVMCONFIG_FILE}")
   endif()
 
-
-  get_filename_component(PATH_TO_SWIFT_BUILD ${LLDB_PATH_TO_SWIFT_BUILD}
-                         ABSOLUTE)
-
-  get_filename_component(PATH_TO_CMARK_BUILD ${LLDB_PATH_TO_CMARK_BUILD}
-                         ABSOLUTE)
-
-  # These variables are used by add_llvm_library.
   # They are used as destination of target generators.
   set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin)
   set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX})
@@ -116,7 +89,6 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
   include(HandleLLVMOptions)
   include(CheckAtomic)
 
-
   if (PYTHON_EXECUTABLE STREQUAL "")
     set(Python_ADDITIONAL_VERSIONS 3.5 3.4 3.3 3.2 3.1 3.0 2.7 2.6 2.5)
     include(FindPythonInterp)
@@ -129,37 +101,39 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
     message("-- Found PythonInterp: ${PYTHON_EXECUTABLE}")
   endif()
 
-  # Start Swift Mods
-  find_package(Clang REQUIRED CONFIG
-    HINTS "${LLDB_PATH_TO_CLANG_BUILD}" NO_DEFAULT_PATH)
-  find_package(Swift REQUIRED CONFIG
-    HINTS "${PATH_TO_SWIFT_BUILD}" NO_DEFAULT_PATH)
-  # End Swift Mods
+  # Import CMake library targets from LLVM and Clang.
+  include("${LLVM_OBJ_ROOT}/lib${LLVM_LIBDIR_SUFFIX}/cmake/llvm/LLVMConfig.cmake")
+  # cmake/clang/ClangConfig.cmake is not created when LLVM and Cland are built together.
+  if (EXISTS "${LLVM_OBJ_ROOT}/lib${LLVM_LIBDIR_SUFFIX}/cmake/clang/ClangConfig.cmake")
+    include("${LLVM_OBJ_ROOT}/lib${LLVM_LIBDIR_SUFFIX}/cmake/clang/ClangConfig.cmake")
+  endif()
 
   set(PACKAGE_VERSION "${LLVM_PACKAGE_VERSION}")
 
-  # Why are we doing this?
-  # set(LLVM_BINARY_DIR ${CMAKE_BINARY_DIR})
+  set(LLVM_BINARY_DIR ${CMAKE_BINARY_DIR})
 
   set(CLANG_MAIN_INCLUDE_DIR "${CLANG_MAIN_SRC_DIR}/include")
 
   set(SWIFT_MAIN_INCLUDE_DIR "${SWIFT_MAIN_SRC_DIR}/include")
 
   set(CMAKE_INCLUDE_CURRENT_DIR ON)
-  include_directories("${LLVM_BINARY_DIR}/include"
-                      "${LLVM_BINARY_DIR}/tools/clang/include"
-                      "${LLVM_MAIN_INCLUDE_DIR}"
-                      "${PATH_TO_CLANG_BUILD}/include"
-                      "${CLANG_MAIN_INCLUDE_DIR}"
-                      "${PATH_TO_SWIFT_BUILD}/include"
-                      "${SWIFT_MAIN_INCLUDE_DIR}"
-                      "${CMAKE_CURRENT_SOURCE_DIR}/source")
+  include_directories("${LLVM_BINARY_DIR}/include" "${LLVM_MAIN_INCLUDE_DIR}")
+  # Next three include directories are needed when llvm-config is located in build directory.
+  # LLVM and Cland are assumed to be built together
+  if (EXISTS "${LLVM_OBJ_ROOT}/include")
+    include_directories("${LLVM_OBJ_ROOT}/include")
+  endif()
+  if (EXISTS "${LLVM_MAIN_SRC_DIR}/tools/clang/include")
+    include_directories("${LLVM_MAIN_SRC_DIR}/tools/clang/include")
+  endif()
+  if (EXISTS "${LLVM_OBJ_ROOT}/tools/clang/include")
+    include_directories("${LLVM_OBJ_ROOT}/tools/clang/include")
+  endif()
+  link_directories("${LLVM_LIBRARY_DIR}")
 
   set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
   set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX})
   set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX})
 
   set(LLDB_BUILT_STANDALONE 1)
-else()
-  set(LLDB_PATH_TO_SWIFT_BUILD ${CMAKE_BINARY_DIR})
 endif()
diff --git a/source/Breakpoint/CMakeLists.txt b/source/Breakpoint/CMakeLists.txt
index 50878ff21..85494b15a 100644
--- a/source/Breakpoint/CMakeLists.txt
+++ b/source/Breakpoint/CMakeLists.txt
@@ -20,16 +20,4 @@ add_lldb_library(lldbBreakpoint
   Watchpoint.cpp
   WatchpointList.cpp
   WatchpointOptions.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbExpression
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbPluginCPlusPlusLanguage
-    lldbPluginObjCLanguage
-
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Commands/CMakeLists.txt b/source/Commands/CMakeLists.txt
index 990f3ad2e..8805bbf6d 100644
--- a/source/Commands/CMakeLists.txt
+++ b/source/Commands/CMakeLists.txt
@@ -29,21 +29,4 @@ add_lldb_library(lldbCommands
   CommandObjectWatchpoint.cpp
   CommandObjectWatchpointCommand.cpp
   CommandObjectLanguage.cpp
-
-  LINK_LIBS
-    swiftAST
-    swiftIDE
-    lldbBreakpoint
-    lldbCore
-    lldbDataFormatters
-    lldbExpression
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginExpressionParserClang
-
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Core/CMakeLists.txt b/source/Core/CMakeLists.txt
index 2523aae48..16539f09e 100644
--- a/source/Core/CMakeLists.txt
+++ b/source/Core/CMakeLists.txt
@@ -70,27 +70,5 @@ add_lldb_library(lldbCore
   ValueObjectSyntheticFilter.cpp
   ValueObjectVariable.cpp
   VMRange.cpp
-
-  LINK_LIBS
-    swiftBasic
-    swiftFrontend
-    swiftSerialization
-    lldbBreakpoint
-    lldbDataFormatters
-    lldbExpression
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginProcessUtility
-    lldbPluginCPlusPlusLanguage
-    lldbPluginObjCLanguage
-    lldbPluginObjectFileJIT
-    lldbPluginExpressionParserClang
-
-  LINK_COMPONENTS
-    Support
-    Demangle
   )
 
diff --git a/source/DataFormatters/CMakeLists.txt b/source/DataFormatters/CMakeLists.txt
index de525086e..7ff16606e 100644
--- a/source/DataFormatters/CMakeLists.txt
+++ b/source/DataFormatters/CMakeLists.txt
@@ -16,16 +16,6 @@ add_lldb_library(lldbDataFormatters
   TypeValidator.cpp
   ValueObjectPrinter.cpp
   VectorType.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-  
-  LINK_COMPONENTS
-    Support
   )
 
 include(AddLLVM)
diff --git a/source/Expression/CMakeLists.txt b/source/Expression/CMakeLists.txt
index 7d9643a45..f8faa6df0 100644
--- a/source/Expression/CMakeLists.txt
+++ b/source/Expression/CMakeLists.txt
@@ -21,18 +21,4 @@ add_lldb_library(lldbExpression
 
   DEPENDS
   ${tablegen_deps}
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginExpressionParserClang
-
-  LINK_COMPONENTS
-    Core
-    ExecutionEngine
-    Support
   )
diff --git a/source/Host/CMakeLists.txt b/source/Host/CMakeLists.txt
index 663624bdd..3c5b78127 100644
--- a/source/Host/CMakeLists.txt
+++ b/source/Host/CMakeLists.txt
@@ -55,10 +55,6 @@ add_host_subdirectory(posix
   posix/ConnectionFileDescriptorPosix.cpp
   )
 
-if(NOT LLDB_DISABLE_PYTHON)
-  list(APPEND LLDB_PLUGINS lldbPluginScriptInterpreterPython)
-endif()
-
 if (CMAKE_SYSTEM_NAME MATCHES "Windows")
   add_host_subdirectory(windows
     windows/ConnectionGenericFileWindows.cpp
@@ -169,16 +165,4 @@ endif ()
 
 add_lldb_library(lldbHost
   ${HOST_SOURCES}
-  
-  LINK_LIBS
-    lldbCore
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    ${LLDB_PLUGINS}
-    ${EXTRA_LIBS}
-  
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Initialization/CMakeLists.txt b/source/Initialization/CMakeLists.txt
index 0d33d91dc..537e601c0 100644
--- a/source/Initialization/CMakeLists.txt
+++ b/source/Initialization/CMakeLists.txt
@@ -14,21 +14,4 @@ add_lldb_library(lldbInitialization
   SystemInitializerCommon.cpp
   SystemInitializer.cpp
   SystemLifetimeManager.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbPluginInstructionARM
-    lldbPluginInstructionMIPS
-    lldbPluginInstructionMIPS64
-    lldbPluginObjectContainerBSDArchive
-    lldbPluginObjectContainerMachOArchive
-    lldbPluginObjectFileELF
-    lldbPluginObjectFilePECOFF
-    lldbPluginProcessGDBRemote
-    lldbPluginExpressionParserSwift
-    ${EXTRA_PLUGINS}
-    ${LLDB_SYSTEM_LIBS}
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Interpreter/CMakeLists.txt b/source/Interpreter/CMakeLists.txt
index 0ab25f171..76d046f7d 100644
--- a/source/Interpreter/CMakeLists.txt
+++ b/source/Interpreter/CMakeLists.txt
@@ -43,15 +43,4 @@ add_lldb_library(lldbInterpreter
   Options.cpp
   Property.cpp
   ScriptInterpreter.cpp
-
-  LINK_LIBS
-    lldbCommands
-    lldbCore
-    lldbDataFormatters
-    lldbHost
-    lldbTarget
-    lldbUtility
-
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/MacOSX-arm/CMakeLists.txt b/source/Plugins/ABI/MacOSX-arm/CMakeLists.txt
index b41814f32..ea8b011b1 100644
--- a/source/Plugins/ABI/MacOSX-arm/CMakeLists.txt
+++ b/source/Plugins/ABI/MacOSX-arm/CMakeLists.txt
@@ -1,11 +1,3 @@
-add_lldb_library(lldbPluginABIMacOSX_arm PLUGIN
+add_lldb_library(lldbPluginABIMacOSX_arm
   ABIMacOSX_arm.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-    lldbPluginProcessUtility
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/MacOSX-arm64/CMakeLists.txt b/source/Plugins/ABI/MacOSX-arm64/CMakeLists.txt
index f769d63bc..498bb7218 100644
--- a/source/Plugins/ABI/MacOSX-arm64/CMakeLists.txt
+++ b/source/Plugins/ABI/MacOSX-arm64/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginABIMacOSX_arm64 PLUGIN
+add_lldb_library(lldbPluginABIMacOSX_arm64
   ABIMacOSX_arm64.cpp
-  
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/MacOSX-i386/CMakeLists.txt b/source/Plugins/ABI/MacOSX-i386/CMakeLists.txt
index 21f153d36..f6a543a66 100644
--- a/source/Plugins/ABI/MacOSX-i386/CMakeLists.txt
+++ b/source/Plugins/ABI/MacOSX-i386/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginABIMacOSX_i386 PLUGIN
+add_lldb_library(lldbPluginABIMacOSX_i386
   ABIMacOSX_i386.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/SysV-arm/CMakeLists.txt b/source/Plugins/ABI/SysV-arm/CMakeLists.txt
index c5979046d..c25ce5a1c 100644
--- a/source/Plugins/ABI/SysV-arm/CMakeLists.txt
+++ b/source/Plugins/ABI/SysV-arm/CMakeLists.txt
@@ -1,11 +1,3 @@
-add_lldb_library(lldbPluginABISysV_arm PLUGIN
+add_lldb_library(lldbPluginABISysV_arm
   ABISysV_arm.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-    lldbPluginProcessUtility
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/SysV-arm64/CMakeLists.txt b/source/Plugins/ABI/SysV-arm64/CMakeLists.txt
index 077b39482..0ddb37043 100644
--- a/source/Plugins/ABI/SysV-arm64/CMakeLists.txt
+++ b/source/Plugins/ABI/SysV-arm64/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginABISysV_arm64 PLUGIN
+add_lldb_library(lldbPluginABISysV_arm64
   ABISysV_arm64.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/SysV-hexagon/CMakeLists.txt b/source/Plugins/ABI/SysV-hexagon/CMakeLists.txt
index a857fff12..b8fbb0744 100644
--- a/source/Plugins/ABI/SysV-hexagon/CMakeLists.txt
+++ b/source/Plugins/ABI/SysV-hexagon/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginABISysV_hexagon PLUGIN
+add_lldb_library(lldbPluginABISysV_hexagon
   ABISysV_hexagon.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/SysV-i386/CMakeLists.txt b/source/Plugins/ABI/SysV-i386/CMakeLists.txt
index 598b3d03c..3528f01ad 100644
--- a/source/Plugins/ABI/SysV-i386/CMakeLists.txt
+++ b/source/Plugins/ABI/SysV-i386/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginABISysV_i386 PLUGIN
+add_lldb_library(lldbPluginABISysV_i386
   ABISysV_i386.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/SysV-mips/CMakeLists.txt b/source/Plugins/ABI/SysV-mips/CMakeLists.txt
index a3266a75a..0db3e5c1c 100644
--- a/source/Plugins/ABI/SysV-mips/CMakeLists.txt
+++ b/source/Plugins/ABI/SysV-mips/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginABISysV_mips PLUGIN
+add_lldb_library(lldbPluginABISysV_mips
   ABISysV_mips.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/SysV-mips64/CMakeLists.txt b/source/Plugins/ABI/SysV-mips64/CMakeLists.txt
index 5eddfb539..099464821 100644
--- a/source/Plugins/ABI/SysV-mips64/CMakeLists.txt
+++ b/source/Plugins/ABI/SysV-mips64/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginABISysV_mips64 PLUGIN
+add_lldb_library(lldbPluginABISysV_mips64
   ABISysV_mips64.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/SysV-ppc/CMakeLists.txt b/source/Plugins/ABI/SysV-ppc/CMakeLists.txt
index 63bfc4a96..a7784195f 100644
--- a/source/Plugins/ABI/SysV-ppc/CMakeLists.txt
+++ b/source/Plugins/ABI/SysV-ppc/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginABISysV_ppc PLUGIN
+add_lldb_library(lldbPluginABISysV_ppc
   ABISysV_ppc.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/SysV-ppc64/CMakeLists.txt b/source/Plugins/ABI/SysV-ppc64/CMakeLists.txt
index b31182dd0..7a33d2922 100644
--- a/source/Plugins/ABI/SysV-ppc64/CMakeLists.txt
+++ b/source/Plugins/ABI/SysV-ppc64/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginABISysV_ppc64 PLUGIN
+add_lldb_library(lldbPluginABISysV_ppc64
   ABISysV_ppc64.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/SysV-s390x/CMakeLists.txt b/source/Plugins/ABI/SysV-s390x/CMakeLists.txt
index f670f0157..c3992db02 100644
--- a/source/Plugins/ABI/SysV-s390x/CMakeLists.txt
+++ b/source/Plugins/ABI/SysV-s390x/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginABISysV_s390x PLUGIN
+add_lldb_library(lldbPluginABISysV_s390x
   ABISysV_s390x.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ABI/SysV-x86_64/CMakeLists.txt b/source/Plugins/ABI/SysV-x86_64/CMakeLists.txt
index 17644d74a..a2b62d724 100644
--- a/source/Plugins/ABI/SysV-x86_64/CMakeLists.txt
+++ b/source/Plugins/ABI/SysV-x86_64/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginABISysV_x86_64 PLUGIN
+add_lldb_library(lldbPluginABISysV_x86_64
   ABISysV_x86_64.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/Disassembler/llvm/CMakeLists.txt b/source/Plugins/Disassembler/llvm/CMakeLists.txt
index 0ae774464..ada81dc55 100644
--- a/source/Plugins/Disassembler/llvm/CMakeLists.txt
+++ b/source/Plugins/Disassembler/llvm/CMakeLists.txt
@@ -1,12 +1,3 @@
-add_lldb_library(lldbPluginDisassemblerLLVM PLUGIN
+add_lldb_library(lldbPluginDisassemblerLLVM
   DisassemblerLLVMC.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    ${LLVM_TARGETS_TO_BUILD}
-    MC
-    Support
   )
diff --git a/source/Plugins/DynamicLoader/Darwin-Kernel/CMakeLists.txt b/source/Plugins/DynamicLoader/Darwin-Kernel/CMakeLists.txt
index ffc797b74..02752b78a 100644
--- a/source/Plugins/DynamicLoader/Darwin-Kernel/CMakeLists.txt
+++ b/source/Plugins/DynamicLoader/Darwin-Kernel/CMakeLists.txt
@@ -1,13 +1,3 @@
-add_lldb_library(lldbPluginDynamicLoaderDarwinKernel PLUGIN
+add_lldb_library(lldbPluginDynamicLoaderDarwinKernel
   DynamicLoaderDarwinKernel.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginPlatformMacOSX
   )
diff --git a/source/Plugins/DynamicLoader/Hexagon-DYLD/CMakeLists.txt b/source/Plugins/DynamicLoader/Hexagon-DYLD/CMakeLists.txt
index c590457d0..af15f2841 100644
--- a/source/Plugins/DynamicLoader/Hexagon-DYLD/CMakeLists.txt
+++ b/source/Plugins/DynamicLoader/Hexagon-DYLD/CMakeLists.txt
@@ -1,10 +1,4 @@
-add_lldb_library(lldbPluginDynamicLoaderHexagonDYLD PLUGIN
+add_lldb_library(lldbPluginDynamicLoaderHexagonDYLD
   HexagonDYLDRendezvous.cpp
   DynamicLoaderHexagonDYLD.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbSymbol
-    lldbTarget
   )
diff --git a/source/Plugins/DynamicLoader/MacOSX-DYLD/CMakeLists.txt b/source/Plugins/DynamicLoader/MacOSX-DYLD/CMakeLists.txt
index 515c82dca..7dc3e98e6 100644
--- a/source/Plugins/DynamicLoader/MacOSX-DYLD/CMakeLists.txt
+++ b/source/Plugins/DynamicLoader/MacOSX-DYLD/CMakeLists.txt
@@ -1,16 +1,5 @@
-add_lldb_library(lldbPluginDynamicLoaderMacOSXDYLD PLUGIN
+add_lldb_library(lldbPluginDynamicLoaderMacOSXDYLD
   DynamicLoaderMacOSXDYLD.cpp
   DynamicLoaderMacOS.cpp
   DynamicLoaderDarwin.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbExpression
-    lldbHost
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/DynamicLoader/POSIX-DYLD/CMakeLists.txt b/source/Plugins/DynamicLoader/POSIX-DYLD/CMakeLists.txt
index 409ba92a0..b30299779 100644
--- a/source/Plugins/DynamicLoader/POSIX-DYLD/CMakeLists.txt
+++ b/source/Plugins/DynamicLoader/POSIX-DYLD/CMakeLists.txt
@@ -1,15 +1,5 @@
-add_lldb_library(lldbPluginDynamicLoaderPosixDYLD PLUGIN
+add_lldb_library(lldbPluginDynamicLoaderPosixDYLD
   AuxVector.cpp
   DYLDRendezvous.cpp
   DynamicLoaderPOSIXDYLD.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbHost
-    lldbSymbol
-    lldbTarget
-    lldbPluginProcessElfCore
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/DynamicLoader/Static/CMakeLists.txt b/source/Plugins/DynamicLoader/Static/CMakeLists.txt
index b827ab38f..274f6bac3 100644
--- a/source/Plugins/DynamicLoader/Static/CMakeLists.txt
+++ b/source/Plugins/DynamicLoader/Static/CMakeLists.txt
@@ -1,9 +1,3 @@
-add_lldb_library(lldbPluginDynamicLoaderStatic PLUGIN
+add_lldb_library(lldbPluginDynamicLoaderStatic
   DynamicLoaderStatic.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbSymbol
-    lldbTarget
   )
diff --git a/source/Plugins/DynamicLoader/Windows-DYLD/CMakeLists.txt b/source/Plugins/DynamicLoader/Windows-DYLD/CMakeLists.txt
index 7557ada51..ee768057b 100644
--- a/source/Plugins/DynamicLoader/Windows-DYLD/CMakeLists.txt
+++ b/source/Plugins/DynamicLoader/Windows-DYLD/CMakeLists.txt
@@ -1,9 +1,3 @@
-add_lldb_library(lldbPluginDynamicLoaderWindowsDYLD PLUGIN
+add_lldb_library(lldbPluginDynamicLoaderWindowsDYLD
   DynamicLoaderWindowsDYLD.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ExpressionParser/Clang/CMakeLists.txt b/source/Plugins/ExpressionParser/Clang/CMakeLists.txt
index a780e7d59..64559d20b 100644
--- a/source/Plugins/ExpressionParser/Clang/CMakeLists.txt
+++ b/source/Plugins/ExpressionParser/Clang/CMakeLists.txt
@@ -2,7 +2,7 @@ if(NOT LLDB_BUILT_STANDALONE)
   set(tablegen_deps intrinsics_gen)
 endif()
 
-add_lldb_library(lldbPluginExpressionParserClang PLUGIN
+add_lldb_library(lldbPluginExpressionParserClang
   ASTDumper.cpp
   ASTResultSynthesizer.cpp
   ASTStructExtractor.cpp
@@ -19,30 +19,4 @@ add_lldb_library(lldbPluginExpressionParserClang PLUGIN
 
   DEPENDS
   ${tablegen_deps}
-
-  LINK_LIBS
-    clangAST
-    clangCodeGen
-    clangEdit
-    clangFrontend
-    clangLex
-    clangParse
-    clangRewrite
-    clangRewriteFrontend
-    clangSema
-    clangSerialization
-    lldbCore
-    lldbExpression
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginCPlusPlusLanguage
-  LINK_COMPONENTS
-    Core
-    ExecutionEngine
-    ipo
-    MCJIT
-    Support
   )
diff --git a/source/Plugins/ExpressionParser/Go/CMakeLists.txt b/source/Plugins/ExpressionParser/Go/CMakeLists.txt
index 3d552aafa..f59f51e76 100644
--- a/source/Plugins/ExpressionParser/Go/CMakeLists.txt
+++ b/source/Plugins/ExpressionParser/Go/CMakeLists.txt
@@ -1,13 +1,5 @@
-add_lldb_library(lldbPluginExpressionParserGo PLUGIN
+add_lldb_library(lldbPluginExpressionParserGo
 	GoLexer.cpp
 	GoParser.cpp
 	GoUserExpression.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbExpression
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ExpressionParser/Swift/CMakeLists.txt b/source/Plugins/ExpressionParser/Swift/CMakeLists.txt
index 57c0f3b95..26f3fb8b6 100644
--- a/source/Plugins/ExpressionParser/Swift/CMakeLists.txt
+++ b/source/Plugins/ExpressionParser/Swift/CMakeLists.txt
@@ -1,4 +1,4 @@
-add_lldb_library(lldbPluginExpressionParserSwift PLUGIN
+add_lldb_library(lldbPluginExpressionParserSwift
   SwiftASTManipulator.cpp
   SwiftExpressionParser.cpp
   SwiftExpressionVariable.cpp
@@ -7,30 +7,4 @@ add_lldb_library(lldbPluginExpressionParserSwift PLUGIN
   SwiftREPLMaterializer.cpp
   SwiftUserExpression.cpp
   SwiftSILManipulator.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbDataFormatters
-    lldbExpression
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    swiftAST
-    swiftBasic
-    swiftClangImporter
-    swiftFrontend
-    swiftIDE
-    swiftParse
-    swiftSIL
-    swiftSILOptimizer
-    swiftSerialization
-    clangAST
-    clangBasic
-    clangRewrite
-
-  LINK_COMPONENTS
-    Support
-    Core
   )
diff --git a/source/Plugins/Instruction/ARM/CMakeLists.txt b/source/Plugins/Instruction/ARM/CMakeLists.txt
index 24f803db3..dc547a573 100644
--- a/source/Plugins/Instruction/ARM/CMakeLists.txt
+++ b/source/Plugins/Instruction/ARM/CMakeLists.txt
@@ -1,14 +1,4 @@
-add_lldb_library(lldbPluginInstructionARM PLUGIN
+add_lldb_library(lldbPluginInstructionARM
   EmulateInstructionARM.cpp
   EmulationStateARM.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbPluginProcessUtility
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/Instruction/ARM64/CMakeLists.txt b/source/Plugins/Instruction/ARM64/CMakeLists.txt
index effe0e3bf..9f8ee0848 100644
--- a/source/Plugins/Instruction/ARM64/CMakeLists.txt
+++ b/source/Plugins/Instruction/ARM64/CMakeLists.txt
@@ -1,11 +1,3 @@
-add_lldb_library(lldbPluginInstructionARM64 PLUGIN
+add_lldb_library(lldbPluginInstructionARM64
   EmulateInstructionARM64.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbInterpreter
-    lldbSymbol
-    lldbPluginProcessUtility
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/Instruction/MIPS/CMakeLists.txt b/source/Plugins/Instruction/MIPS/CMakeLists.txt
index b2fe0ee88..b24a7d647 100644
--- a/source/Plugins/Instruction/MIPS/CMakeLists.txt
+++ b/source/Plugins/Instruction/MIPS/CMakeLists.txt
@@ -2,17 +2,7 @@ if(Mips IN_LIST LLVM_TARGETS_TO_BUILD)
   set(mips_target Mips)
 endif()
 
-add_lldb_library(lldbPluginInstructionMIPS PLUGIN
+add_lldb_library(lldbPluginInstructionMIPS
   EmulateInstructionMIPS.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbPluginProcessUtility
-  LINK_COMPONENTS
-    MC
-    Support
     ${mips_target}
   )
diff --git a/source/Plugins/Instruction/MIPS64/CMakeLists.txt b/source/Plugins/Instruction/MIPS64/CMakeLists.txt
index ddb964bf5..3fbee6820 100644
--- a/source/Plugins/Instruction/MIPS64/CMakeLists.txt
+++ b/source/Plugins/Instruction/MIPS64/CMakeLists.txt
@@ -2,17 +2,7 @@ if(Mips IN_LIST LLVM_TARGETS_TO_BUILD)
   set(mips_target Mips)
 endif()
 
-add_lldb_library(lldbPluginInstructionMIPS64 PLUGIN
+add_lldb_library(lldbPluginInstructionMIPS64
   EmulateInstructionMIPS64.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbPluginProcessUtility
-  LINK_COMPONENTS
-    MC
-    Support
     ${mips_target}
   )
diff --git a/source/Plugins/InstrumentationRuntime/AddressSanitizer/CMakeLists.txt b/source/Plugins/InstrumentationRuntime/AddressSanitizer/CMakeLists.txt
index 1adfc6ba5..77e7d15ca 100644
--- a/source/Plugins/InstrumentationRuntime/AddressSanitizer/CMakeLists.txt
+++ b/source/Plugins/InstrumentationRuntime/AddressSanitizer/CMakeLists.txt
@@ -1,13 +1,3 @@
-add_lldb_library(lldbPluginInstrumentationRuntimeAddressSanitizer PLUGIN
+add_lldb_library(lldbPluginInstrumentationRuntimeAddressSanitizer
   AddressSanitizerRuntime.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbExpression
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/InstrumentationRuntime/MainThreadChecker/CMakeLists.txt b/source/Plugins/InstrumentationRuntime/MainThreadChecker/CMakeLists.txt
index 440b176b2..bdb17ebfd 100644
--- a/source/Plugins/InstrumentationRuntime/MainThreadChecker/CMakeLists.txt
+++ b/source/Plugins/InstrumentationRuntime/MainThreadChecker/CMakeLists.txt
@@ -1,13 +1,3 @@
-add_lldb_library(lldbPluginInstrumentationRuntimeMainThreadChecker PLUGIN
+add_lldb_library(lldbPluginInstrumentationRuntimeMainThreadChecker
   MainThreadCheckerRuntime.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbExpression
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/InstrumentationRuntime/SwiftRuntimeReporting/CMakeLists.txt b/source/Plugins/InstrumentationRuntime/SwiftRuntimeReporting/CMakeLists.txt
index 0ee157205..2fadacea0 100644
--- a/source/Plugins/InstrumentationRuntime/SwiftRuntimeReporting/CMakeLists.txt
+++ b/source/Plugins/InstrumentationRuntime/SwiftRuntimeReporting/CMakeLists.txt
@@ -1,13 +1,3 @@
-add_lldb_library(lldbPluginInstrumentationRuntimeSwiftRuntimeReporting PLUGIN
+add_lldb_library(lldbPluginInstrumentationRuntimeSwiftRuntimeReporting
   SwiftRuntimeReporting.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbExpression
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/InstrumentationRuntime/ThreadSanitizer/CMakeLists.txt b/source/Plugins/InstrumentationRuntime/ThreadSanitizer/CMakeLists.txt
index db7c4a251..6ef79433d 100644
--- a/source/Plugins/InstrumentationRuntime/ThreadSanitizer/CMakeLists.txt
+++ b/source/Plugins/InstrumentationRuntime/ThreadSanitizer/CMakeLists.txt
@@ -1,12 +1,3 @@
-add_lldb_library(lldbPluginInstrumentationRuntimeThreadSanitizer PLUGIN
+add_lldb_library(lldbPluginInstrumentationRuntimeThreadSanitizer
   ThreadSanitizerRuntime.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbExpression
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbPluginProcessUtility
   )
diff --git a/source/Plugins/InstrumentationRuntime/UndefinedBehaviorSanitizer/CMakeLists.txt b/source/Plugins/InstrumentationRuntime/UndefinedBehaviorSanitizer/CMakeLists.txt
index 8f4b1a539..274c8c6c2 100644
--- a/source/Plugins/InstrumentationRuntime/UndefinedBehaviorSanitizer/CMakeLists.txt
+++ b/source/Plugins/InstrumentationRuntime/UndefinedBehaviorSanitizer/CMakeLists.txt
@@ -1,13 +1,3 @@
-add_lldb_library(lldbPluginInstrumentationRuntimeUndefinedBehaviorSanitizer PLUGIN
+add_lldb_library(lldbPluginInstrumentationRuntimeUndefinedBehaviorSanitizer
   UndefinedBehaviorSanitizerRuntime.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbExpression
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/JITLoader/GDB/CMakeLists.txt b/source/Plugins/JITLoader/GDB/CMakeLists.txt
index 25e8d1ee2..bcf714dca 100644
--- a/source/Plugins/JITLoader/GDB/CMakeLists.txt
+++ b/source/Plugins/JITLoader/GDB/CMakeLists.txt
@@ -1,16 +1,6 @@
 include_directories(.)
 
-add_lldb_library(lldbPluginJITLoaderGDB PLUGIN
+add_lldb_library(lldbPluginJITLoaderGDB
   JITLoaderGDB.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-  LINK_COMPONENTS
-    Support
   )
 
diff --git a/source/Plugins/Language/CPlusPlus/CMakeLists.txt b/source/Plugins/Language/CPlusPlus/CMakeLists.txt
index d569a1585..5e105aa19 100644
--- a/source/Plugins/Language/CPlusPlus/CMakeLists.txt
+++ b/source/Plugins/Language/CPlusPlus/CMakeLists.txt
@@ -1,4 +1,4 @@
-add_lldb_library(lldbPluginCPlusPlusLanguage PLUGIN
+add_lldb_library(lldbPluginCPlusPlusLanguage
   BlockPointer.cpp
   CPlusPlusLanguage.cpp
   CxxStringTypes.cpp
@@ -12,14 +12,4 @@ add_lldb_library(lldbPluginCPlusPlusLanguage PLUGIN
   LibStdcpp.cpp
   LibStdcppTuple.cpp
   LibStdcppUniquePointer.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbDataFormatters
-    lldbHost
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-  LINK_COMPONENTS
-    Support
 )
diff --git a/source/Plugins/Language/Go/CMakeLists.txt b/source/Plugins/Language/Go/CMakeLists.txt
index 793e417a6..f3a9c12b7 100644
--- a/source/Plugins/Language/Go/CMakeLists.txt
+++ b/source/Plugins/Language/Go/CMakeLists.txt
@@ -1,13 +1,4 @@
-add_lldb_library(lldbPluginGoLanguage PLUGIN
+add_lldb_library(lldbPluginGoLanguage
   GoLanguage.cpp
   GoFormatterFunctions.cpp
-
-  LINK_LIBS
-    clangAST
-    lldbCore
-    lldbDataFormatters
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
 )
diff --git a/source/Plugins/Language/Java/CMakeLists.txt b/source/Plugins/Language/Java/CMakeLists.txt
index f0cbcd8d3..80f7b08e7 100644
--- a/source/Plugins/Language/Java/CMakeLists.txt
+++ b/source/Plugins/Language/Java/CMakeLists.txt
@@ -1,12 +1,4 @@
-add_lldb_library(lldbPluginJavaLanguage PLUGIN
+add_lldb_library(lldbPluginJavaLanguage
   JavaFormatterFunctions.cpp
   JavaLanguage.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbDataFormatters
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
 )
diff --git a/source/Plugins/Language/OCaml/CMakeLists.txt b/source/Plugins/Language/OCaml/CMakeLists.txt
index e779ae2ac..e969618d5 100644
--- a/source/Plugins/Language/OCaml/CMakeLists.txt
+++ b/source/Plugins/Language/OCaml/CMakeLists.txt
@@ -1,12 +1,4 @@
-add_lldb_library(lldbPluginOCamlLanguage PLUGIN
+add_lldb_library(lldbPluginOCamlLanguage
   OCamlLanguage.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbDataFormatters
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
 )
 
diff --git a/source/Plugins/Language/ObjC/CMakeLists.txt b/source/Plugins/Language/ObjC/CMakeLists.txt
index 8aa2a6c02..5c480a1ae 100644
--- a/source/Plugins/Language/ObjC/CMakeLists.txt
+++ b/source/Plugins/Language/ObjC/CMakeLists.txt
@@ -1,4 +1,4 @@
-add_lldb_library(lldbPluginObjCLanguage PLUGIN
+add_lldb_library(lldbPluginObjCLanguage
   ObjCLanguage.cpp
   CF.cpp
   Cocoa.cpp
@@ -10,16 +10,4 @@ add_lldb_library(lldbPluginObjCLanguage PLUGIN
   NSIndexPath.cpp
   NSSet.cpp
   NSString.cpp
-
-  LINK_LIBS
-    clangAST
-    lldbCore
-    lldbDataFormatters
-    lldbExpression
-    lldbHost
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginAppleObjCRuntime
-    lldbPluginSwiftLanguage
 )
diff --git a/source/Plugins/Language/ObjCPlusPlus/CMakeLists.txt b/source/Plugins/Language/ObjCPlusPlus/CMakeLists.txt
index 75df9794d..ef80af741 100644
--- a/source/Plugins/Language/ObjCPlusPlus/CMakeLists.txt
+++ b/source/Plugins/Language/ObjCPlusPlus/CMakeLists.txt
@@ -1,7 +1,3 @@
-add_lldb_library(lldbPluginObjCPlusPlusLanguage PLUGIN
+add_lldb_library(lldbPluginObjCPlusPlusLanguage
   ObjCPlusPlusLanguage.cpp
-  
-  LINK_LIBS
-    lldbCore
-    lldbTarget
 )
diff --git a/source/Plugins/Language/Swift/CMakeLists.txt b/source/Plugins/Language/Swift/CMakeLists.txt
index 90b87b710..b62feace5 100644
--- a/source/Plugins/Language/Swift/CMakeLists.txt
+++ b/source/Plugins/Language/Swift/CMakeLists.txt
@@ -1,6 +1,6 @@
 set(LLVM_NO_RTTI 1)
 
-add_lldb_library(lldbPluginSwiftLanguage PLUGIN
+add_lldb_library(lldbPluginSwiftLanguage
   FoundationValueTypes.cpp
   ObjCRuntimeSyntheticProvider.cpp
   SwiftArray.cpp
@@ -13,19 +13,5 @@ add_lldb_library(lldbPluginSwiftLanguage PLUGIN
   SwiftOptionSet.cpp
   SwiftOptional.cpp
   SwiftSet.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbDataFormatters
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginObjCLanguage
-    swiftAST
-    swiftClangImporter
-    clangAST
-
-  LINK_COMPONENTS
-    Support
 )
 
diff --git a/source/Plugins/LanguageRuntime/CPlusPlus/ItaniumABI/CMakeLists.txt b/source/Plugins/LanguageRuntime/CPlusPlus/ItaniumABI/CMakeLists.txt
index 14d1f46ca..d25215d0a 100644
--- a/source/Plugins/LanguageRuntime/CPlusPlus/ItaniumABI/CMakeLists.txt
+++ b/source/Plugins/LanguageRuntime/CPlusPlus/ItaniumABI/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginCXXItaniumABI PLUGIN
+add_lldb_library(lldbPluginCXXItaniumABI
   ItaniumABILanguageRuntime.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
   )
diff --git a/source/Plugins/LanguageRuntime/Go/CMakeLists.txt b/source/Plugins/LanguageRuntime/Go/CMakeLists.txt
index 16756d5c9..7c9166a94 100644
--- a/source/Plugins/LanguageRuntime/Go/CMakeLists.txt
+++ b/source/Plugins/LanguageRuntime/Go/CMakeLists.txt
@@ -1,13 +1,5 @@
 set(LLVM_NO_RTTI 1)
 
-add_lldb_library(lldbPluginLanguageRuntimeGo PLUGIN
+add_lldb_library(lldbPluginLanguageRuntimeGo
   GoLanguageRuntime.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/LanguageRuntime/Java/CMakeLists.txt b/source/Plugins/LanguageRuntime/Java/CMakeLists.txt
index ec8771875..4cfd71c2e 100644
--- a/source/Plugins/LanguageRuntime/Java/CMakeLists.txt
+++ b/source/Plugins/LanguageRuntime/Java/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginLanguageRuntimeJava PLUGIN
+add_lldb_library(lldbPluginLanguageRuntimeJava
   JavaLanguageRuntime.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/CMakeLists.txt b/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/CMakeLists.txt
index 18f3ae1c5..13fde3d18 100644
--- a/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/CMakeLists.txt
+++ b/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime/CMakeLists.txt
@@ -1,4 +1,4 @@
-add_lldb_library(lldbPluginAppleObjCRuntime PLUGIN
+add_lldb_library(lldbPluginAppleObjCRuntime
   AppleObjCRuntime.cpp
   AppleObjCRuntimeV1.cpp
   AppleObjCRuntimeV2.cpp
@@ -7,18 +7,4 @@ add_lldb_library(lldbPluginAppleObjCRuntime PLUGIN
   AppleThreadPlanStepThroughObjCTrampoline.cpp
   AppleObjCClassDescriptorV2.cpp
   AppleObjCTypeEncodingParser.cpp
-
-  LINK_LIBS
-    clangAST
-    lldbBreakpoint
-    lldbCore
-    lldbExpression
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginExpressionParserClang
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/CMakeLists.txt b/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/CMakeLists.txt
index 1a6c49946..cd08f1413 100644
--- a/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/CMakeLists.txt
+++ b/source/Plugins/LanguageRuntime/RenderScript/RenderScriptRuntime/CMakeLists.txt
@@ -3,7 +3,7 @@ if(NOT LLDB_BUILT_STANDALONE)
 endif()
 
 
-add_lldb_library(lldbPluginRenderScriptRuntime PLUGIN
+add_lldb_library(lldbPluginRenderScriptRuntime
   RenderScriptRuntime.cpp
   RenderScriptExpressionOpts.cpp
   RenderScriptx86ABIFixups.cpp
@@ -11,20 +11,4 @@ add_lldb_library(lldbPluginRenderScriptRuntime PLUGIN
 
   DEPENDS
   ${tablegen_deps}
-
-  LINK_LIBS
-    clangBasic
-    lldbBreakpoint
-    lldbCore
-    lldbDataFormatters
-    lldbExpression
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Core
-    IRReader
-    Support
-    Target
   )
diff --git a/source/Plugins/MemoryHistory/asan/CMakeLists.txt b/source/Plugins/MemoryHistory/asan/CMakeLists.txt
index 08deb75aa..8bfe95e36 100644
--- a/source/Plugins/MemoryHistory/asan/CMakeLists.txt
+++ b/source/Plugins/MemoryHistory/asan/CMakeLists.txt
@@ -1,9 +1,3 @@
-add_lldb_library(lldbPluginMemoryHistoryASan PLUGIN
+add_lldb_library(lldbPluginMemoryHistoryASan
   MemoryHistoryASan.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbExpression
-    lldbTarget
-    lldbPluginProcessUtility
   )
diff --git a/source/Plugins/ObjectContainer/BSD-Archive/CMakeLists.txt b/source/Plugins/ObjectContainer/BSD-Archive/CMakeLists.txt
index acc13d31c..68ebe885e 100644
--- a/source/Plugins/ObjectContainer/BSD-Archive/CMakeLists.txt
+++ b/source/Plugins/ObjectContainer/BSD-Archive/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginObjectContainerBSDArchive PLUGIN
+add_lldb_library(lldbPluginObjectContainerBSDArchive
   ObjectContainerBSDArchive.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbSymbol
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ObjectContainer/Universal-Mach-O/CMakeLists.txt b/source/Plugins/ObjectContainer/Universal-Mach-O/CMakeLists.txt
index 9f173cf4c..b4553868b 100644
--- a/source/Plugins/ObjectContainer/Universal-Mach-O/CMakeLists.txt
+++ b/source/Plugins/ObjectContainer/Universal-Mach-O/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginObjectContainerMachOArchive PLUGIN
+add_lldb_library(lldbPluginObjectContainerMachOArchive
   ObjectContainerUniversalMachO.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbSymbol
-    lldbTarget
-    lldbUtility
   )
diff --git a/source/Plugins/ObjectFile/ELF/CMakeLists.txt b/source/Plugins/ObjectFile/ELF/CMakeLists.txt
index a941b8d55..69ec80c62 100644
--- a/source/Plugins/ObjectFile/ELF/CMakeLists.txt
+++ b/source/Plugins/ObjectFile/ELF/CMakeLists.txt
@@ -1,12 +1,4 @@
-add_lldb_library(lldbPluginObjectFileELF PLUGIN
+add_lldb_library(lldbPluginObjectFileELF
   ELFHeader.cpp
   ObjectFileELF.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ObjectFile/JIT/CMakeLists.txt b/source/Plugins/ObjectFile/JIT/CMakeLists.txt
index fd575532d..979724bac 100644
--- a/source/Plugins/ObjectFile/JIT/CMakeLists.txt
+++ b/source/Plugins/ObjectFile/JIT/CMakeLists.txt
@@ -1,11 +1,3 @@
-add_lldb_library(lldbPluginObjectFileJIT PLUGIN
+add_lldb_library(lldbPluginObjectFileJIT
   ObjectFileJIT.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ObjectFile/Mach-O/CMakeLists.txt b/source/Plugins/ObjectFile/Mach-O/CMakeLists.txt
index d39b93768..45d45860b 100644
--- a/source/Plugins/ObjectFile/Mach-O/CMakeLists.txt
+++ b/source/Plugins/ObjectFile/Mach-O/CMakeLists.txt
@@ -1,13 +1,3 @@
-add_lldb_library(lldbPluginObjectFileMachO PLUGIN
+add_lldb_library(lldbPluginObjectFileMachO
   ObjectFileMachO.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginProcessUtility
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.cpp b/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.cpp
index 436dc5f51..7555bb129 100644
--- a/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.cpp
+++ b/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.cpp
@@ -58,8 +58,6 @@
 
 #ifndef __APPLE__
 #include "Utility/UuidCompatibility.h"
-#else
-#include <uuid/uuid.h>
 #endif
 
 #define THUMB_ADDRESS_BIT_MASK 0xfffffffffffffffeull
@@ -5560,67 +5558,23 @@ uint32_t ObjectFileMachO::GetNumThreadContexts() {
   return m_thread_context_offsets.GetSize();
 }
 
+// The LC_IDENT load command has been obsoleted for a very
+// long time and it should not occur in Mach-O files.  But
+// if it is there, it may contain a hint about where to find
+// the main binary in a core file, so we'll use it.
 std::string ObjectFileMachO::GetIdentifierString() {
   std::string result;
   ModuleSP module_sp(GetModule());
   if (module_sp) {
     std::lock_guard<std::recursive_mutex> guard(module_sp->GetMutex());
-
-    // First, look over the load commands for an LC_NOTE load command
-    // with data_owner string "kern ver str" & use that if found.
     lldb::offset_t offset = MachHeaderSizeFromMagic(m_header.magic);
     for (uint32_t i = 0; i < m_header.ncmds; ++i) {
       const uint32_t cmd_offset = offset;
-      load_command lc;
-      if (m_data.GetU32(&offset, &lc.cmd, 2) == NULL)
-          break;
-      if (lc.cmd == LC_NOTE)
-      {
-          char data_owner[17];
-          m_data.CopyData (offset, 16, data_owner);
-          data_owner[16] = '\0';
-          offset += 16;
-          uint64_t fileoff = m_data.GetU64_unchecked (&offset);
-          uint64_t size = m_data.GetU64_unchecked (&offset);
-
-          // "kern ver str" has a uint32_t version and then a
-          // nul terminated c-string.
-          if (strcmp ("kern ver str", data_owner) == 0)
-          {
-              offset = fileoff;
-              uint32_t version;
-              if (m_data.GetU32 (&offset, &version, 1) != nullptr)
-              {
-                  if (version == 1)
-                  {
-                      uint32_t strsize = size - sizeof (uint32_t);
-                      char *buf = (char*) malloc (strsize);
-                      if (buf)
-                      {
-                          m_data.CopyData (offset, strsize, buf);
-                          buf[strsize - 1] = '\0';
-                          result = buf;
-                          if (buf)
-                              free (buf);
-                          return result;
-                      }
-                  }
-              }
-          }
-      }
-      offset = cmd_offset + lc.cmdsize;
-    }
-
-    // Second, make a pass over the load commands looking for an
-    // obsolete LC_IDENT load command.
-    offset = MachHeaderSizeFromMagic(m_header.magic);
-    for (uint32_t i = 0; i < m_header.ncmds; ++i) {
-      const uint32_t cmd_offset = offset;
       struct ident_command ident_command;
       if (m_data.GetU32(&offset, &ident_command, 2) == NULL)
         break;
       if (ident_command.cmd == LC_IDENT && ident_command.cmdsize != 0) {
-        char *buf = (char *) malloc (ident_command.cmdsize);
+        char *buf = (char *)malloc (ident_command.cmdsize);
         if (buf != nullptr 
             && m_data.CopyData (offset, ident_command.cmdsize, buf) == ident_command.cmdsize) {
           buf[ident_command.cmdsize - 1] = '\0';
@@ -5636,60 +5590,6 @@ std::string ObjectFileMachO::GetIdentifierString() {
   return result;
 }
 
-bool ObjectFileMachO::GetCorefileMainBinaryInfo (addr_t &address, UUID &uuid) {
-  address = LLDB_INVALID_ADDRESS;
-  uuid.Clear();
-  ModuleSP module_sp(GetModule());
-  if (module_sp) {
-    std::lock_guard<std::recursive_mutex> guard(module_sp->GetMutex());
-    lldb::offset_t offset = MachHeaderSizeFromMagic(m_header.magic);
-    for (uint32_t i = 0; i < m_header.ncmds; ++i) {
-      const uint32_t cmd_offset = offset;
-      load_command lc;
-      if (m_data.GetU32(&offset, &lc.cmd, 2) == NULL)
-          break;
-      if (lc.cmd == LC_NOTE)
-      {
-          char data_owner[17];
-          memset (data_owner, 0, sizeof (data_owner));
-          m_data.CopyData (offset, 16, data_owner);
-          offset += 16;
-          uint64_t fileoff = m_data.GetU64_unchecked (&offset);
-          uint64_t size = m_data.GetU64_unchecked (&offset);
-
-          // "main bin spec" (main binary specification) data payload is formatted:
-          //    uint32_t version       [currently 1]
-          //    uint32_t type          [0 == unspecified, 1 == kernel, 2 == user process]
-          //    uint64_t address       [ UINT64_MAX if address not specified ]
-          //    uuid_t   uuid          [ all zero's if uuid not specified ]
-          //    uint32_t log2_pagesize [ process page size in log base 2, e.g. 4k pages are 12.  0 for unspecified ]
-
-          if (strcmp ("main bin spec", data_owner) == 0 && size >= 32)
-          {
-              offset = fileoff;
-              uint32_t version;
-              if (m_data.GetU32 (&offset, &version, 1) != nullptr && version == 1)
-              {
-                  uint32_t type = 0;
-                  uuid_t raw_uuid;
-                  memset (raw_uuid, 0, sizeof (uuid_t));
-
-                  if (m_data.GetU32 (&offset, &type, 1)
-                      && m_data.GetU64 (&offset, &address, 1)
-                      && m_data.CopyData (offset, sizeof (uuid_t), raw_uuid) != 0
-                      && uuid.SetBytes (raw_uuid, sizeof (uuid_t)))
-                  {
-                      return true;
-                  }
-              }
-          }
-      }
-      offset = cmd_offset + lc.cmdsize;
-    }
-  }
-  return false;
-}
-
 lldb::RegisterContextSP
 ObjectFileMachO::GetThreadContextAtIndex(uint32_t idx,
                                          lldb_private::Thread &thread) {
diff --git a/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.h b/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.h
index 05aeca678..cf3de7899 100644
--- a/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.h
+++ b/source/Plugins/ObjectFile/Mach-O/ObjectFileMachO.h
@@ -17,7 +17,6 @@
 #include "lldb/Core/Address.h"
 #include "lldb/Core/FileSpecList.h"
 #include "lldb/Core/RangeMap.h"
-#include "lldb/Core/UUID.h"
 #include "lldb/Host/FileSpec.h"
 #include "lldb/Symbol/ObjectFile.h"
 #include "lldb/Utility/SafeMachO.h"
@@ -114,8 +113,6 @@ public:
 
   std::string GetIdentifierString() override;
 
-  bool GetCorefileMainBinaryInfo (lldb::addr_t &address, lldb_private::UUID &uuid) override;
-
   lldb::RegisterContextSP
   GetThreadContextAtIndex(uint32_t idx, lldb_private::Thread &thread) override;
 
diff --git a/source/Plugins/ObjectFile/PECOFF/CMakeLists.txt b/source/Plugins/ObjectFile/PECOFF/CMakeLists.txt
index 1e8fb85c7..5c7c488f3 100644
--- a/source/Plugins/ObjectFile/PECOFF/CMakeLists.txt
+++ b/source/Plugins/ObjectFile/PECOFF/CMakeLists.txt
@@ -1,12 +1,4 @@
-add_lldb_library(lldbPluginObjectFilePECOFF PLUGIN
+add_lldb_library(lldbPluginObjectFilePECOFF
   ObjectFilePECOFF.cpp
   WindowsMiniDump.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbSymbol
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/OperatingSystem/Go/CMakeLists.txt b/source/Plugins/OperatingSystem/Go/CMakeLists.txt
index 27e952a84..1ca82c462 100644
--- a/source/Plugins/OperatingSystem/Go/CMakeLists.txt
+++ b/source/Plugins/OperatingSystem/Go/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginOSGo PLUGIN
+add_lldb_library(lldbPluginOSGo
   OperatingSystemGo.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbPluginProcessUtility
   )
diff --git a/source/Plugins/OperatingSystem/Python/CMakeLists.txt b/source/Plugins/OperatingSystem/Python/CMakeLists.txt
index e8b0f31d3..7188e6f67 100644
--- a/source/Plugins/OperatingSystem/Python/CMakeLists.txt
+++ b/source/Plugins/OperatingSystem/Python/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginOSPython PLUGIN
+add_lldb_library(lldbPluginOSPython
   OperatingSystemPython.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbPluginProcessUtility
   )
diff --git a/source/Plugins/Platform/Android/CMakeLists.txt b/source/Plugins/Platform/Android/CMakeLists.txt
index 5abb51a0b..e831a33a4 100644
--- a/source/Plugins/Platform/Android/CMakeLists.txt
+++ b/source/Plugins/Platform/Android/CMakeLists.txt
@@ -1,13 +1,5 @@
-add_lldb_library(lldbPluginPlatformAndroid PLUGIN
+add_lldb_library(lldbPluginPlatformAndroid
   AdbClient.cpp
   PlatformAndroid.cpp
   PlatformAndroidRemoteGDBServer.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbPluginPlatformLinux
-    lldbPluginPlatformGDB
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/Platform/FreeBSD/CMakeLists.txt b/source/Plugins/Platform/FreeBSD/CMakeLists.txt
index 1c27e1b7a..57153969c 100644
--- a/source/Plugins/Platform/FreeBSD/CMakeLists.txt
+++ b/source/Plugins/Platform/FreeBSD/CMakeLists.txt
@@ -1,9 +1,3 @@
-add_lldb_library(lldbPluginPlatformFreeBSD PLUGIN
+add_lldb_library(lldbPluginPlatformFreeBSD
   PlatformFreeBSD.cpp
-
-   LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbHost
-    lldbTarget
   )
diff --git a/source/Plugins/Platform/Kalimba/CMakeLists.txt b/source/Plugins/Platform/Kalimba/CMakeLists.txt
index 02f1827f9..df0bf9761 100644
--- a/source/Plugins/Platform/Kalimba/CMakeLists.txt
+++ b/source/Plugins/Platform/Kalimba/CMakeLists.txt
@@ -1,8 +1,3 @@
-add_lldb_library(lldbPluginPlatformKalimba PLUGIN
+add_lldb_library(lldbPluginPlatformKalimba
   PlatformKalimba.cpp
-
-   LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbTarget
   )
diff --git a/source/Plugins/Platform/Linux/CMakeLists.txt b/source/Plugins/Platform/Linux/CMakeLists.txt
index bad039d0a..4a9eb1460 100644
--- a/source/Plugins/Platform/Linux/CMakeLists.txt
+++ b/source/Plugins/Platform/Linux/CMakeLists.txt
@@ -1,11 +1,3 @@
-add_lldb_library(lldbPluginPlatformLinux PLUGIN
+add_lldb_library(lldbPluginPlatformLinux
   PlatformLinux.cpp
-
-   LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbHost
-    lldbInterpreter
-    lldbTarget
-    lldbPluginPlatformPOSIX
   )
diff --git a/source/Plugins/Platform/MacOSX/CMakeLists.txt b/source/Plugins/Platform/MacOSX/CMakeLists.txt
index f8d911b32..2597d2bd7 100644
--- a/source/Plugins/Platform/MacOSX/CMakeLists.txt
+++ b/source/Plugins/Platform/MacOSX/CMakeLists.txt
@@ -25,19 +25,4 @@ else()
     ${PLUGIN_PLATFORM_MACOSX_DARWIN_ONLY_SOURCES})
 endif()
 
-add_lldb_library(lldbPluginPlatformMacOSX PLUGIN
-  ${PLUGIN_PLATFORM_MACOSX_SOURCES}
-  
-  LINK_LIBS
-    clangBasic
-    lldbBreakpoint
-    lldbCore
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginPlatformPOSIX
-  LINK_COMPONENTS
-    Support
-    )
+add_lldb_library(lldbPluginPlatformMacOSX ${PLUGIN_PLATFORM_MACOSX_SOURCES})
diff --git a/source/Plugins/Platform/NetBSD/CMakeLists.txt b/source/Plugins/Platform/NetBSD/CMakeLists.txt
index 5e63f1098..c70b419b9 100644
--- a/source/Plugins/Platform/NetBSD/CMakeLists.txt
+++ b/source/Plugins/Platform/NetBSD/CMakeLists.txt
@@ -1,9 +1,3 @@
-add_lldb_library(lldbPluginPlatformNetBSD PLUGIN
+add_lldb_library(lldbPluginPlatformNetBSD
   PlatformNetBSD.cpp
-
-   LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbHost
-    lldbTarget
   )
diff --git a/source/Plugins/Platform/POSIX/CMakeLists.txt b/source/Plugins/Platform/POSIX/CMakeLists.txt
index 749407d63..c23e68155 100644
--- a/source/Plugins/Platform/POSIX/CMakeLists.txt
+++ b/source/Plugins/Platform/POSIX/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginPlatformPOSIX PLUGIN
+add_lldb_library(lldbPluginPlatformPOSIX
   PlatformPOSIX.cpp
-
-   LINK_LIBS
-    lldbCore
-    lldbExpression
-    lldbHost
-    lldbInterpreter
-    lldbTarget
   )
diff --git a/source/Plugins/Platform/Windows/CMakeLists.txt b/source/Plugins/Platform/Windows/CMakeLists.txt
index 49a197cda..09fbc11d3 100644
--- a/source/Plugins/Platform/Windows/CMakeLists.txt
+++ b/source/Plugins/Platform/Windows/CMakeLists.txt
@@ -1,9 +1,3 @@
-add_lldb_library(lldbPluginPlatformWindows PLUGIN
+add_lldb_library(lldbPluginPlatformWindows
   PlatformWindows.cpp
-
-   LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbHost
-    lldbTarget
   )
diff --git a/source/Plugins/Platform/gdb-server/CMakeLists.txt b/source/Plugins/Platform/gdb-server/CMakeLists.txt
index 2e3302590..b0b669e5b 100644
--- a/source/Plugins/Platform/gdb-server/CMakeLists.txt
+++ b/source/Plugins/Platform/gdb-server/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_lldb_library(lldbPluginPlatformGDB PLUGIN
+add_lldb_library(lldbPluginPlatformGDB
   PlatformRemoteGDBServer.cpp
-
-   LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbHost
-    lldbTarget
-    lldbPluginProcessUtility
   )
diff --git a/source/Plugins/Process/FreeBSD/CMakeLists.txt b/source/Plugins/Process/FreeBSD/CMakeLists.txt
index 63855992d..c0e3374fe 100644
--- a/source/Plugins/Process/FreeBSD/CMakeLists.txt
+++ b/source/Plugins/Process/FreeBSD/CMakeLists.txt
@@ -2,7 +2,7 @@ include_directories(.)
 include_directories(../POSIX)
 include_directories(../Utility)
 
-add_lldb_library(lldbPluginProcessFreeBSD PLUGIN
+add_lldb_library(lldbPluginProcessFreeBSD
   ProcessFreeBSD.cpp
   FreeBSDThread.cpp
   ProcessMonitor.cpp
@@ -13,16 +13,4 @@ add_lldb_library(lldbPluginProcessFreeBSD PLUGIN
   RegisterContextPOSIXProcessMonitor_powerpc.cpp
   RegisterContextPOSIXProcessMonitor_x86.cpp
   RegisterContextPOSIXProcessMonitor_mips64.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbHost
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginProcessUtility
-    lldbPluginProcessPOSIX
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/Process/Linux/CMakeLists.txt b/source/Plugins/Process/Linux/CMakeLists.txt
index f49811074..8291fef46 100644
--- a/source/Plugins/Process/Linux/CMakeLists.txt
+++ b/source/Plugins/Process/Linux/CMakeLists.txt
@@ -2,7 +2,7 @@ include_directories(.)
 include_directories(../POSIX)
 include_directories(../Utility)
 
-add_lldb_library(lldbPluginProcessLinux PLUGIN
+add_lldb_library(lldbPluginProcessLinux
   NativeProcessLinux.cpp
   NativeRegisterContextLinux.cpp
   NativeRegisterContextLinux_arm.cpp
@@ -13,15 +13,4 @@ add_lldb_library(lldbPluginProcessLinux PLUGIN
   NativeThreadLinux.cpp
   ProcFileReader.cpp
   SingleStepCheck.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginProcessPOSIX
-    lldbPluginProcessUtility
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/Process/MacOSX-Kernel/CMakeLists.txt b/source/Plugins/Process/MacOSX-Kernel/CMakeLists.txt
index bed0e3b7a..681b7405e 100644
--- a/source/Plugins/Process/MacOSX-Kernel/CMakeLists.txt
+++ b/source/Plugins/Process/MacOSX-Kernel/CMakeLists.txt
@@ -1,4 +1,4 @@
-add_lldb_library(lldbPluginProcessMacOSXKernel PLUGIN
+add_lldb_library(lldbPluginProcessMacOSXKernel
   CommunicationKDP.cpp
   ProcessKDP.cpp
   ProcessKDPLog.cpp
@@ -7,16 +7,4 @@ add_lldb_library(lldbPluginProcessMacOSXKernel PLUGIN
   RegisterContextKDP_i386.cpp
   RegisterContextKDP_x86_64.cpp
   ThreadKDP.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginDynamicLoaderDarwinKernel
-    lldbPluginDynamicLoaderStatic
-    lldbPluginProcessUtility
   )
diff --git a/source/Plugins/Process/POSIX/CMakeLists.txt b/source/Plugins/Process/POSIX/CMakeLists.txt
index 66fb7aa15..2ed7326db 100644
--- a/source/Plugins/Process/POSIX/CMakeLists.txt
+++ b/source/Plugins/Process/POSIX/CMakeLists.txt
@@ -1,14 +1,8 @@
 include_directories(.)
 include_directories(../Utility)
 
-add_lldb_library(lldbPluginProcessPOSIX PLUGIN
+add_lldb_library(lldbPluginProcessPOSIX
   CrashReason.cpp
   ProcessMessage.cpp
   ProcessPOSIXLog.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbInterpreter
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/Process/Utility/CMakeLists.txt b/source/Plugins/Process/Utility/CMakeLists.txt
index c2b62f905..c557667e3 100644
--- a/source/Plugins/Process/Utility/CMakeLists.txt
+++ b/source/Plugins/Process/Utility/CMakeLists.txt
@@ -1,6 +1,6 @@
 include_directories(../../../Utility/)
 
-add_lldb_library(lldbPluginProcessUtility PLUGIN
+add_lldb_library(lldbPluginProcessUtility
   DynamicRegisterInfo.cpp
   FreeBSDSignals.cpp
   GDBRemoteSignals.cpp
@@ -46,17 +46,4 @@ add_lldb_library(lldbPluginProcessUtility PLUGIN
   ThreadMemory.cpp
   UnwindLLDB.cpp
   UnwindMacOSXFrameBackchain.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbDataFormatters
-    lldbExpression
-    lldbHost
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginProcessElfCore
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/Process/Windows/Common/CMakeLists.txt b/source/Plugins/Process/Windows/Common/CMakeLists.txt
index 6cf124a5f..af07b08c5 100644
--- a/source/Plugins/Process/Windows/Common/CMakeLists.txt
+++ b/source/Plugins/Process/Windows/Common/CMakeLists.txt
@@ -22,14 +22,4 @@ endif()
 
 add_lldb_library(lldbPluginProcessWindowsCommon PLUGIN
   ${PROC_WINDOWS_COMMON_SOURCES}
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbInterpreter
-    lldbTarget
-    ws2_32
-    rpcrt4
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/Process/elf-core/CMakeLists.txt b/source/Plugins/Process/elf-core/CMakeLists.txt
index b358697d2..b9f0b6cdf 100644
--- a/source/Plugins/Process/elf-core/CMakeLists.txt
+++ b/source/Plugins/Process/elf-core/CMakeLists.txt
@@ -1,6 +1,6 @@
 include_directories(../Utility)
 
-add_lldb_library(lldbPluginProcessElfCore PLUGIN
+add_lldb_library(lldbPluginProcessElfCore
   ProcessElfCore.cpp
   ThreadElfCore.cpp
   RegisterContextPOSIXCore_arm.cpp
@@ -9,13 +9,4 @@ add_lldb_library(lldbPluginProcessElfCore PLUGIN
   RegisterContextPOSIXCore_powerpc.cpp
   RegisterContextPOSIXCore_s390x.cpp
   RegisterContextPOSIXCore_x86_64.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbTarget
-    lldbPluginDynamicLoaderPosixDYLD
-    lldbPluginObjectFileELF
-    lldbPluginProcessUtility
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/Process/gdb-remote/CMakeLists.txt b/source/Plugins/Process/gdb-remote/CMakeLists.txt
index 7b373858b..68b89532f 100644
--- a/source/Plugins/Process/gdb-remote/CMakeLists.txt
+++ b/source/Plugins/Process/gdb-remote/CMakeLists.txt
@@ -4,7 +4,7 @@ elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
   list(APPEND LLDB_PLUGINS lldbPluginProcessLinux)
 endif()
 
-add_lldb_library(lldbPluginProcessGDBRemote PLUGIN
+add_lldb_library(lldbPluginProcessGDBRemote
   GDBRemoteClientBase.cpp
   GDBRemoteCommunication.cpp
   GDBRemoteCommunicationClient.cpp
@@ -16,19 +16,4 @@ add_lldb_library(lldbPluginProcessGDBRemote PLUGIN
   ProcessGDBRemote.cpp
   ProcessGDBRemoteLog.cpp
   ThreadGDBRemote.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbDataFormatters
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginProcessUtility
-    lldbPluginPlatformMacOSX
-    ${LLDB_PLUGINS}
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/Process/mach-core/CMakeLists.txt b/source/Plugins/Process/mach-core/CMakeLists.txt
index 18f6ff581..ac54658cf 100644
--- a/source/Plugins/Process/mach-core/CMakeLists.txt
+++ b/source/Plugins/Process/mach-core/CMakeLists.txt
@@ -1,19 +1,6 @@
 include_directories(../Utility)
 
-add_lldb_library(lldbPluginProcessMachCore PLUGIN
+add_lldb_library(lldbPluginProcessMachCore
   ProcessMachCore.cpp
   ThreadMachCore.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbHost
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginDynamicLoaderDarwinKernel
-    lldbPluginDynamicLoaderMacOSXDYLD
-    lldbPluginObjectFileMachO
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/Process/mach-core/ProcessMachCore.cpp b/source/Plugins/Process/mach-core/ProcessMachCore.cpp
index 089dd8840..7b10ff62b 100644
--- a/source/Plugins/Process/mach-core/ProcessMachCore.cpp
+++ b/source/Plugins/Process/mach-core/ProcessMachCore.cpp
@@ -291,26 +291,11 @@ Error ProcessMachCore::DoLoadCore() {
 
   bool found_main_binary_definitively = false;
 
-  addr_t objfile_binary_addr;
-  UUID objfile_binary_uuid;
-  if (core_objfile->GetCorefileMainBinaryInfo (objfile_binary_addr, objfile_binary_uuid))
-  {
-    if (objfile_binary_addr != LLDB_INVALID_ADDRESS)
-    {
-        m_mach_kernel_addr = objfile_binary_addr;
-        found_main_binary_definitively = true;
-        if (log)
-            log->Printf ("ProcessMachCore::DoLoadCore: using kernel address 0x%" PRIx64
-                         " from LC_NOTE 'main bin spec' load command.", m_mach_kernel_addr);
-    }
-  }
-  
   // This checks for the presence of an LC_IDENT string in a core file;
   // LC_IDENT is very obsolete and should not be used in new code, but
   // if the load command is present, let's use the contents.
   std::string corefile_identifier = core_objfile->GetIdentifierString();
-  if (found_main_binary_definitively == false 
-      && corefile_identifier.find("Darwin Kernel") != std::string::npos) {
+  if (corefile_identifier.find("Darwin Kernel") != std::string::npos) {
       UUID uuid;
       addr_t addr = LLDB_INVALID_ADDRESS;
       if (corefile_identifier.find("UUID=") != std::string::npos) {
@@ -332,13 +317,13 @@ Error ProcessMachCore::DoLoadCore() {
           found_main_binary_definitively = true;
           if (log)
             log->Printf("ProcessMachCore::DoLoadCore: Using the kernel address 0x%" PRIx64
-                        " from LC_IDENT/LC_NOTE 'kern ver str' string: '%s'", addr, corefile_identifier.c_str());
+                        "from LC_IDENT string '%s'", addr, corefile_identifier.c_str());
       }
   }
 
-  if (found_main_binary_definitively == false
-      && (m_dyld_addr == LLDB_INVALID_ADDRESS
-          || m_mach_kernel_addr == LLDB_INVALID_ADDRESS)) {
+  if (found_main_binary_definitively == false &&
+      (m_dyld_addr == LLDB_INVALID_ADDRESS ||
+      m_mach_kernel_addr == LLDB_INVALID_ADDRESS)) {
     // We need to locate the main executable in the memory ranges
     // we have in the core file.  We need to search for both a user-process dyld
     // binary
diff --git a/source/Plugins/Process/minidump/CMakeLists.txt b/source/Plugins/Process/minidump/CMakeLists.txt
index 61ce16830..ddc89cbd9 100644
--- a/source/Plugins/Process/minidump/CMakeLists.txt
+++ b/source/Plugins/Process/minidump/CMakeLists.txt
@@ -1,19 +1,10 @@
 include_directories(../Utility)
 
-add_lldb_library(lldbPluginProcessMinidump PLUGIN
+add_lldb_library(lldbPluginProcessMinidump
   MinidumpTypes.cpp
   MinidumpParser.cpp
   RegisterContextMinidump_x86_32.cpp
   RegisterContextMinidump_x86_64.cpp
   ProcessMinidump.cpp
   ThreadMinidump.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbTarget
-    lldbUtility
-    lldbPluginProcessUtility
-    lldbPluginProcessElfCore
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/ScriptInterpreter/None/CMakeLists.txt b/source/Plugins/ScriptInterpreter/None/CMakeLists.txt
index 7e7dd5896..5692d2f90 100644
--- a/source/Plugins/ScriptInterpreter/None/CMakeLists.txt
+++ b/source/Plugins/ScriptInterpreter/None/CMakeLists.txt
@@ -1,7 +1,3 @@
-add_lldb_library(lldbPluginScriptInterpreterNone PLUGIN
+add_lldb_library(lldbPluginScriptInterpreterNone
   ScriptInterpreterNone.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbInterpreter
   )
\ No newline at end of file
diff --git a/source/Plugins/ScriptInterpreter/Python/CMakeLists.txt b/source/Plugins/ScriptInterpreter/Python/CMakeLists.txt
index c337fc7b5..71f5807b6 100644
--- a/source/Plugins/ScriptInterpreter/Python/CMakeLists.txt
+++ b/source/Plugins/ScriptInterpreter/Python/CMakeLists.txt
@@ -1,15 +1,5 @@
-add_lldb_library(lldbPluginScriptInterpreterPython PLUGIN
+add_lldb_library(lldbPluginScriptInterpreterPython
   PythonDataObjects.cpp
   PythonExceptionState.cpp
   ScriptInterpreterPython.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbDataFormatters
-    lldbHost
-    lldbInterpreter
-    lldbTarget
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/StructuredData/DarwinLog/CMakeLists.txt b/source/Plugins/StructuredData/DarwinLog/CMakeLists.txt
index e4859f4f8..ce0e21b4e 100644
--- a/source/Plugins/StructuredData/DarwinLog/CMakeLists.txt
+++ b/source/Plugins/StructuredData/DarwinLog/CMakeLists.txt
@@ -1,9 +1,5 @@
-add_lldb_library(lldbPluginStructuredDataDarwinLog PLUGIN
+list(APPEND SOURCES
   StructuredDataDarwinLog.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbInterpreter
-    lldbTarget
   )
+
+add_lldb_library(lldbPluginStructuredDataDarwinLog ${SOURCES})
diff --git a/source/Plugins/SymbolFile/DWARF/CMakeLists.txt b/source/Plugins/SymbolFile/DWARF/CMakeLists.txt
index 05ddc639a..d79acde4c 100644
--- a/source/Plugins/SymbolFile/DWARF/CMakeLists.txt
+++ b/source/Plugins/SymbolFile/DWARF/CMakeLists.txt
@@ -1,4 +1,4 @@
-add_lldb_library(lldbPluginSymbolFileDWARF PLUGIN
+add_lldb_library(lldbPluginSymbolFileDWARF
   DIERef.cpp
   DWARFAbbreviationDeclaration.cpp
   DWARFASTParserClang.cpp
@@ -33,20 +33,4 @@ add_lldb_library(lldbPluginSymbolFileDWARF PLUGIN
   SymbolFileDWARFDwo.cpp
   SymbolFileDWARFDebugMap.cpp
   UniqueDWARFASTType.cpp
-
-  LINK_LIBS
-    clangAST
-    clangBasic
-    lldbCore
-    lldbExpression
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginObjCLanguage
-    lldbPluginCPlusPlusLanguage
-    lldbPluginExpressionParserClang
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Plugins/SymbolFile/PDB/CMakeLists.txt b/source/Plugins/SymbolFile/PDB/CMakeLists.txt
index eca610ce7..55aaadaf1 100644
--- a/source/Plugins/SymbolFile/PDB/CMakeLists.txt
+++ b/source/Plugins/SymbolFile/PDB/CMakeLists.txt
@@ -1,13 +1,7 @@
-add_lldb_library(lldbPluginSymbolFilePDB PLUGIN
+set(LLVM_LINK_COMPONENTS
+    DebugInfoPDB)
+
+add_lldb_library(lldbPluginSymbolFilePDB
   PDBASTParser.cpp
   SymbolFilePDB.cpp
-
-  LINK_LIBS
-    clangAST
-    clangLex
-    lldbCore
-    lldbSymbol
-  LINK_COMPONENTS
-    DebugInfoPDB
-    Support
   )
diff --git a/source/Plugins/SymbolFile/Symtab/CMakeLists.txt b/source/Plugins/SymbolFile/Symtab/CMakeLists.txt
index a2e19bd28..20e406b08 100644
--- a/source/Plugins/SymbolFile/Symtab/CMakeLists.txt
+++ b/source/Plugins/SymbolFile/Symtab/CMakeLists.txt
@@ -1,7 +1,3 @@
-add_lldb_library(lldbPluginSymbolFileSymtab PLUGIN
+add_lldb_library(lldbPluginSymbolFileSymtab
   SymbolFileSymtab.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
   )
diff --git a/source/Plugins/SymbolVendor/ELF/CMakeLists.txt b/source/Plugins/SymbolVendor/ELF/CMakeLists.txt
index e742fac93..cffc2ef74 100644
--- a/source/Plugins/SymbolVendor/ELF/CMakeLists.txt
+++ b/source/Plugins/SymbolVendor/ELF/CMakeLists.txt
@@ -1,8 +1,3 @@
-add_lldb_library(lldbPluginSymbolVendorELF PLUGIN
+add_lldb_library(lldbPluginSymbolVendorELF
   SymbolVendorELF.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbSymbol
   )
diff --git a/source/Plugins/SymbolVendor/MacOSX/CMakeLists.txt b/source/Plugins/SymbolVendor/MacOSX/CMakeLists.txt
index bbcdff970..093766ac0 100644
--- a/source/Plugins/SymbolVendor/MacOSX/CMakeLists.txt
+++ b/source/Plugins/SymbolVendor/MacOSX/CMakeLists.txt
@@ -1,10 +1,5 @@
 include_directories(${LIBXML2_INCLUDE_DIR})
 
-add_lldb_library(lldbPluginSymbolVendorMacOSX PLUGIN
+add_lldb_library(lldbPluginSymbolVendorMacOSX
   SymbolVendorMacOSX.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbSymbol
   )
diff --git a/source/Plugins/SystemRuntime/MacOSX/CMakeLists.txt b/source/Plugins/SystemRuntime/MacOSX/CMakeLists.txt
index ac5781b98..d1580cce2 100644
--- a/source/Plugins/SystemRuntime/MacOSX/CMakeLists.txt
+++ b/source/Plugins/SystemRuntime/MacOSX/CMakeLists.txt
@@ -1,17 +1,7 @@
-add_lldb_library(lldbPluginSystemRuntimeMacOSX PLUGIN
+add_lldb_library(lldbPluginSystemRuntimeMacOSX
   AppleGetItemInfoHandler.cpp
   AppleGetPendingItemsHandler.cpp
   AppleGetQueuesHandler.cpp
   AppleGetThreadItemInfoHandler.cpp
   SystemRuntimeMacOSX.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-    lldbExpression
-    lldbHost
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-    lldbPluginProcessUtility
   )
diff --git a/source/Plugins/UnwindAssembly/InstEmulation/CMakeLists.txt b/source/Plugins/UnwindAssembly/InstEmulation/CMakeLists.txt
index 7b7fd721f..21673160b 100644
--- a/source/Plugins/UnwindAssembly/InstEmulation/CMakeLists.txt
+++ b/source/Plugins/UnwindAssembly/InstEmulation/CMakeLists.txt
@@ -1,8 +1,3 @@
-add_lldb_library(lldbPluginUnwindAssemblyInstEmulation PLUGIN
+add_lldb_library(lldbPluginUnwindAssemblyInstEmulation
   UnwindAssemblyInstEmulation.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
   )
diff --git a/source/Plugins/UnwindAssembly/x86/CMakeLists.txt b/source/Plugins/UnwindAssembly/x86/CMakeLists.txt
index 8b05c5444..024b0dab2 100644
--- a/source/Plugins/UnwindAssembly/x86/CMakeLists.txt
+++ b/source/Plugins/UnwindAssembly/x86/CMakeLists.txt
@@ -1,12 +1,4 @@
-add_lldb_library(lldbPluginUnwindAssemblyX86 PLUGIN
+add_lldb_library(lldbPluginUnwindAssemblyX86
   UnwindAssembly-x86.cpp
   x86AssemblyInspectionEngine.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbSymbol
-    lldbTarget
-    lldbUtility
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Symbol/CMakeLists.txt b/source/Symbol/CMakeLists.txt
index a2533b34b..43cdfcb54 100644
--- a/source/Symbol/CMakeLists.txt
+++ b/source/Symbol/CMakeLists.txt
@@ -38,35 +38,4 @@ add_lldb_library(lldbSymbol
   Variable.cpp
   VariableList.cpp
   VerifyDecl.cpp
-
-  LINK_LIBS
-    swiftAST
-    swiftASTSectionImporter
-    swiftBasic
-    swiftClangImporter
-    swiftDriver
-    swiftFrontend
-    swiftIDE
-    swiftSIL
-    swiftSerialization
-    clangAST
-    clangBasic
-    clangFrontend
-    lldbCore
-    lldbDataFormatters
-    lldbExpression
-    lldbHost
-    lldbTarget
-    lldbUtility
-    lldbPluginExpressionParserClang
-    lldbPluginExpressionParserGo
-    lldbPluginExpressionParserSwift
-    lldbPluginSymbolFileDWARF
-    lldbPluginSymbolFilePDB
-    lldbPluginObjectContainerBSDArchive
-    lldbPluginCPlusPlusLanguage
-    lldbPluginObjCLanguage
-
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Target/CMakeLists.txt b/source/Target/CMakeLists.txt
index 97180b2cd..66a804c2f 100644
--- a/source/Target/CMakeLists.txt
+++ b/source/Target/CMakeLists.txt
@@ -59,26 +59,4 @@ add_lldb_library(lldbTarget
   ThreadSpec.cpp
   UnixSignals.cpp
   UnwindAssembly.cpp
-
-  LINK_LIBS
-    swiftAST
-    swiftBasic
-    swiftFrontend
-    swiftRemoteAST
-    lldbBreakpoint
-    lldbCore
-    lldbExpression
-    lldbHost
-    lldbInterpreter
-    lldbSymbol
-    lldbUtility
-    lldbPluginExpressionParserClang
-    lldbPluginExpressionParserSwift
-    lldbPluginCPlusPlusLanguage
-    lldbPluginObjCLanguage
-    lldbPluginSwiftLanguage
-    lldbPluginProcessUtility
-
-  LINK_COMPONENTS
-    Support
   )
diff --git a/source/Utility/CMakeLists.txt b/source/Utility/CMakeLists.txt
index 3ab732192..9cddcc02c 100644
--- a/source/Utility/CMakeLists.txt
+++ b/source/Utility/CMakeLists.txt
@@ -16,12 +16,4 @@ add_lldb_library(lldbUtility
   StringLexer.cpp
   TaskPool.cpp
   UriParser.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbTarget
-
-  LINK_COMPONENTS
-    Support
   )
diff --git a/tools/argdumper/CMakeLists.txt b/tools/argdumper/CMakeLists.txt
index 42f1dd515..9bf956396 100644
--- a/tools/argdumper/CMakeLists.txt
+++ b/tools/argdumper/CMakeLists.txt
@@ -2,9 +2,12 @@ include(${LLDB_PROJECT_ROOT}/cmake/LLDBDependencies.cmake)
 
 add_lldb_tool(lldb-argdumper INCLUDE_IN_FRAMEWORK
   argdumper.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbUtility
   )
 
+if (LLDB_LINKER_SUPPORTS_GROUPS)
+  target_link_libraries(lldb-argdumper -Wl,--start-group ${LLDB_USED_LIBS} -Wl,--end-group)
+else()
+  target_link_libraries(lldb-argdumper ${LLDB_USED_LIBS})
+endif()
+llvm_config(lldb-argdumper ${LLVM_LINK_COMPONENTS})
+
diff --git a/tools/debugserver/source/CMakeLists.txt b/tools/debugserver/source/CMakeLists.txt
index 43cab1ccd..43479bd36 100644
--- a/tools/debugserver/source/CMakeLists.txt
+++ b/tools/debugserver/source/CMakeLists.txt
@@ -33,12 +33,7 @@ if (NOT CMAKE_SYSTEM_NAME MATCHES "Darwin")
     )
 endif ()
 
-if (CMAKE_SYSTEM_NAME MATCHES "Darwin")
-  find_library(COCOA_LIBRARY Cocoa)
-  add_subdirectory(MacOSX)
-endif()
-
-add_lldb_library(lldbDebugserverCommon
+add_library(lldbDebugserverCommon
   debugserver.cpp
   DNBArch.cpp
   DNBBreakpoint.cpp
@@ -63,13 +58,11 @@ add_lldb_library(lldbDebugserverCommon
   RNBSocket.cpp
   SysSignal.cpp
   TTYState.cpp
-
-  LINK_LIBS
-    lldbHost
-    ${COCOA_LIBRARY}
   )
 
-
-
-
+if (CMAKE_SYSTEM_NAME MATCHES "Darwin")
+  find_library(COCOA_LIBRARY Cocoa)
+  target_link_libraries(lldbDebugserverCommon ${COCOA_LIBRARY})
+  add_subdirectory(MacOSX)
+endif()
 
diff --git a/tools/debugserver/source/MacOSX/CMakeLists.txt b/tools/debugserver/source/MacOSX/CMakeLists.txt
index 1725f2654..eae300d22 100644
--- a/tools/debugserver/source/MacOSX/CMakeLists.txt
+++ b/tools/debugserver/source/MacOSX/CMakeLists.txt
@@ -28,6 +28,14 @@ add_custom_command(OUTPUT ${DEBUGSERVER_VERS_GENERATED_FILE}
           ${LLDB_SOURCE_DIR}/lldb.xcodeproj/project.pbxproj
   )
 
+set(DEBUGSERVER_USED_LIBS
+  lldbDebugserverCommon
+  lldbUtility
+  lldbDebugserverMacOSX_I386
+  lldbDebugserverMacOSX_X86_64
+  lldbDebugserverMacOSX_DarwinLog
+  )
+
 add_lldb_tool(debugserver INCLUDE_IN_FRAMEWORK
   CFBundle.cpp
   CFString.cpp
@@ -42,12 +50,6 @@ add_lldb_tool(debugserver INCLUDE_IN_FRAMEWORK
   OsLogger.cpp
   ${generated_mach_interfaces}
   ${DEBUGSERVER_VERS_GENERATED_FILE}
-
-  LINK_LIBS
-    lldbDebugserverCommon
-    lldbDebugserverMacOSX_I386
-    lldbDebugserverMacOSX_X86_64
-    lldbDebugserverMacOSX_DarwinLog
   )
 
 set_source_files_properties(
@@ -56,6 +58,8 @@ set_source_files_properties(
   PROPERTIES LANGUAGE C COMPILE_FLAGS "-x assembler-with-cpp"
   )
 
+target_link_libraries(debugserver ${DEBUGSERVER_USED_LIBS})
+
 set(LLDB_CODESIGN_IDENTITY "lldb_codesign"
   CACHE STRING "Identity used for code signing. Set to empty string to skip the signing step.")
 if (NOT ("${LLDB_CODESIGN_IDENTITY}" STREQUAL ""))
diff --git a/tools/driver/CMakeLists.txt b/tools/driver/CMakeLists.txt
index fdaebdb68..73f065d43 100644
--- a/tools/driver/CMakeLists.txt
+++ b/tools/driver/CMakeLists.txt
@@ -1,25 +1,8 @@
 include(${LLDB_PROJECT_ROOT}/cmake/LLDBDependencies.cmake)
 
-if ((CMAKE_SYSTEM_NAME MATCHES "Windows") OR
-    (CMAKE_SYSTEM_NAME MATCHES "NetBSD" ))
-  # These targets do not have getopt support, so they rely on the one provided by
-  # liblldb. However, getopt is not a part of the liblldb interface, so we have
-  # to link against the constituent libraries manually. Note that this is
-  # extremely scary as it introduces ODR violations, and it should go away as
-  # soon as possible.
-  set(host_lib lldbHost)
-endif()
-
 add_lldb_tool(lldb
   Driver.cpp
   Platform.cpp
-
-  LINK_LIBS
-    liblldb
-    ${host_lib}
-
-  LINK_COMPONENTS
-    Support
   )
 
 if ( CMAKE_SYSTEM_NAME MATCHES "Windows" )
@@ -36,5 +19,16 @@ if ( LLDB_CAN_USE_DEBUGSERVER )
   add_dependencies(lldb debugserver)
 endif()
 
+target_link_libraries(lldb liblldb)
+if ((CMAKE_SYSTEM_NAME MATCHES "Windows") OR
+    (CMAKE_SYSTEM_NAME MATCHES "NetBSD" ))
+  # These targets do not have getopt support, so they rely on the one provided by
+  # liblldb. However, getopt is not a part of the liblldb interface, so we have
+  # to link against the constituent libraries manually. Note that this is
+  # extremely scary as it introduces ODR violations, and it should go away as
+  # soon as possible.
+  target_link_libraries(lldb ${LLDB_USED_LIBS})
+endif()
+
 set_target_properties(lldb PROPERTIES VERSION ${LLDB_VERSION})
 
diff --git a/tools/lldb-mi/CMakeLists.txt b/tools/lldb-mi/CMakeLists.txt
index 20401191e..f7e0581a4 100644
--- a/tools/lldb-mi/CMakeLists.txt
+++ b/tools/lldb-mi/CMakeLists.txt
@@ -1,16 +1,4 @@
-if ( CMAKE_SYSTEM_NAME MATCHES "Windows" OR CMAKE_SYSTEM_NAME MATCHES "NetBSD" )
-  add_definitions( -DIMPORT_LIBLLDB )
-  list(APPEND extra_libs lldbHost)
-endif ()
-
-if (HAVE_LIBPTHREAD)
-  list(APPEND extra_libs pthread)
-endif ()
-
-# We need to include the llvm components we depend on manually, as liblldb does
-# not re-export those.
-set(LLVM_LINK_COMPONENTS Support)
-add_lldb_tool(lldb-mi
+set(LLDB_MI_SOURCES
   MICmdArgContext.cpp
   MICmdArgSet.cpp
   MICmdArgValBase.cpp
@@ -84,14 +72,23 @@ add_lldb_tool(lldb-mi
   MIUtilString.cpp
   MIUtilThreadBaseStd.cpp
   MIUtilVariant.cpp
+  )
 
-  LINK_LIBS
-    liblldb
-    ${host_lib}
-    ${extra_libs}
+if ( CMAKE_SYSTEM_NAME MATCHES "Windows" OR CMAKE_SYSTEM_NAME MATCHES "NetBSD" )
+  add_definitions( -DIMPORT_LIBLLDB )
+  list(APPEND LLDB_MI_SOURCES
+    ${LLDB_SOURCE_ROOT}/Host/common/GetOptInc.cpp
+    )
+endif ()
 
-  LINK_COMPONENTS
-    Support
-  )
+# We need to include the llvm components we depend on manually, as liblldb does
+# not re-export those.
+set(LLVM_LINK_COMPONENTS Support)
+add_lldb_tool(lldb-mi ${LLDB_MI_SOURCES})
+
+target_link_libraries(lldb-mi liblldb)
+if (HAVE_LIBPTHREAD)
+  target_link_libraries(lldb-mi pthread)
+endif ()
 
 set_target_properties(lldb-mi PROPERTIES VERSION ${LLDB_VERSION})
diff --git a/tools/lldb-server/CMakeLists.txt b/tools/lldb-server/CMakeLists.txt
index 4a0960042..bf42e4580 100644
--- a/tools/lldb-server/CMakeLists.txt
+++ b/tools/lldb-server/CMakeLists.txt
@@ -23,6 +23,114 @@ endif ()
 
 include_directories(../../source)
 
+
+set( LLDB_USED_LIBS
+  lldbBase
+  lldbBreakpoint
+  lldbCommands
+  lldbDataFormatters
+  lldbHost
+  lldbCore
+  lldbExpression
+  lldbInitialization
+  lldbInterpreter
+  lldbSymbol
+  lldbTarget
+  lldbUtility
+
+  # Plugins
+  lldbPluginDisassemblerLLVM
+  lldbPluginSymbolFileDWARF
+  lldbPluginSymbolFilePDB
+  lldbPluginSymbolFileSymtab
+  lldbPluginDynamicLoaderPosixDYLD
+
+  lldbPluginCPlusPlusLanguage
+  lldbPluginGoLanguage
+  lldbPluginJavaLanguage
+  lldbPluginObjCLanguage
+  lldbPluginObjCPlusPlusLanguage
+  lldbPluginOCamlLanguage
+  lldbPluginSwiftLanguage
+
+  lldbPluginObjectFileELF
+  lldbPluginObjectFileJIT
+  lldbPluginSymbolVendorELF
+  lldbPluginPlatformPOSIX
+  lldbPluginObjectContainerBSDArchive
+  lldbPluginObjectContainerMachOArchive
+  lldbPluginProcessGDBRemote
+  lldbPluginProcessUtility
+  lldbPluginObjectContainerMachOArchive
+  lldbPluginObjectContainerBSDArchive
+  lldbPluginPlatformMacOSX
+  lldbPluginUnwindAssemblyInstEmulation
+  lldbPluginUnwindAssemblyX86
+  lldbPluginAppleObjCRuntime
+  lldbPluginCXXItaniumABI
+  lldbPluginInstructionARM
+  lldbPluginInstructionARM64
+  lldbPluginInstructionMIPS
+  lldbPluginInstructionMIPS64
+  lldbPluginObjectFilePECOFF
+  lldbPluginExpressionParserClang
+  lldbPluginExpressionParserGo
+  lldbPluginExpressionParserSwift
+  )
+
+# Linux-only libraries
+if ( CMAKE_SYSTEM_NAME MATCHES "Linux" )
+  list(APPEND LLDB_USED_LIBS
+    lldbPluginProcessLinux
+    lldbPluginProcessPOSIX
+   )
+endif ()
+
+# Darwin-only libraries
+if ( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
+  list(APPEND LLDB_USED_LIBS
+    lldbPluginObjectFileMachO
+    )
+endif()
+
+set( CLANG_USED_LIBS
+  clangAnalysis
+  clangAST
+  clangBasic
+  clangCodeGen
+  clangDriver
+  clangEdit
+  clangFrontend
+  clangIndex
+  clangLex
+  clangParse
+  clangRewrite
+  clangRewriteFrontend
+  clangSema
+  clangSerialization
+  )
+
+set( SWIFT_USED_LIBS
+  swiftBasic
+  swiftAST
+  swiftDemangling
+  swiftIDE
+  swiftIRGen
+  swiftFrontend
+  swiftLLVMPasses
+  swiftSerialization
+  swiftClangImporter
+  swiftMarkup
+  swiftOption
+  swiftParse
+  swiftSema
+  swiftSIL
+  swiftSILGen
+  swiftSILOptimizer
+  swiftASTSectionImporter
+  swiftRemoteAST
+  )
+
 set(LLDB_SYSTEM_LIBS)
 if (NOT LLDB_DISABLE_LIBEDIT)
   list(APPEND LLDB_SYSTEM_LIBS edit)
@@ -58,26 +166,75 @@ if (LLVM_BUILD_STATIC)
   endif()
 endif()
 
+# we should do this with a configuration script, but there is none for UUID
+if (NOT CMAKE_SYSTEM_NAME MATCHES "Darwin")
+list(APPEND LLDB_SYSTEM_LIBS uuid)
+endif()
+
+if(LLDB_BUILT_STANDALONE)
+  list(APPEND LLDB_SYSTEM_LIBS "-lcmark")
+else()
+  list(APPEND LLDB_SYSTEM_LIBS libcmark_static)
+endif()
+
+set(LLVM_LINK_COMPONENTS
+  ${LLVM_TARGETS_TO_BUILD}
+  interpreter
+  asmparser
+  bitreader
+  bitwriter
+  codegen
+  demangle
+  ipo
+  selectiondag
+  bitreader
+  mc
+  mcjit
+  core
+  mcdisassembler
+  executionengine
+  runtimedyld
+  option
+  support
+  coverage
+  target
+  analysis
+  profiledata
+  transformutils
+  objcarcopts
+  instrumentation
+  object
+  )
+
 add_lldb_tool(lldb-server INCLUDE_IN_FRAMEWORK
     Acceptor.cpp
     lldb-gdbserver.cpp
     lldb-platform.cpp
     lldb-server.cpp
     LLDBServerUtilities.cpp
-
-    LINK_LIBS
-      lldbBase
-      lldbCore
-      lldbHost
-      lldbInitialization
-      lldbInterpreter
-      ${EXTRA_LLDB_LIBS}
-      ${LLDB_SYSTEM_LIBS}
-
-    LINK_COMPONENTS
-      Support
 )
 
+# The Darwin linker doesn't understand --start-group/--end-group.
+if (LLDB_LINKER_SUPPORTS_GROUPS)
+  target_link_libraries(lldb-server
+                        -Wl,--start-group ${LLDB_USED_LIBS} -Wl,--end-group)
+  target_link_libraries(lldb-server
+                        -Wl,--start-group ${CLANG_USED_LIBS} -Wl,--end-group)
+  target_link_libraries(lldb-server
+                        -Wl,--start-group ${SWIFT_USED_LIBS} -Wl,--end-group)
+else()
+  target_link_libraries(lldb-server ${LLDB_USED_LIBS})
+  target_link_libraries(lldb-server ${CLANG_USED_LIBS})
+  target_link_libraries(lldb-server ${SWIFT_USED_LIBS})
+endif()
+if(NOT LLVM_LINK_LLVM_DYLIB)
+  # This is necessary in !LLVM_LINK_LLVM_DYLIB as LLDB's libs do not track their
+  # dependencies properly. It is conditional because in a LLVM_LINK_LLVM_DYLIB
+  # build it would introduce duplicate symbols (add_lldb_tool links to libLLVM,
+  # and this would add the individual .a files as well).
+  llvm_config(lldb-server ${LLVM_LINK_COMPONENTS})
+endif()
+
 target_link_libraries(lldb-server ${LLDB_SYSTEM_LIBS})
 
 set_target_properties(lldb-server PROPERTIES VERSION ${LLDB_VERSION})
diff --git a/tools/repl/swift/CMakeLists.txt b/tools/repl/swift/CMakeLists.txt
index 02c027c5f..723760995 100644
--- a/tools/repl/swift/CMakeLists.txt
+++ b/tools/repl/swift/CMakeLists.txt
@@ -14,11 +14,11 @@ if(NOT LLDB_SWIFTC)
   if(NOT LLDB_BUILT_STANDALONE)
     set(LLDB_SWIFTC $<TARGET_FILE:swift>c)
   else()
-    set(LLDB_SWIFTC ${LLDB_PATH_TO_SWIFT_BUILD}/bin/swiftc)
+    set(LLDB_SWIFTC /usr/bin/swiftc)
   endif()
 endif()
 
-set(swift_compile_cmd "${LLDB_SWIFTC}"
+set(swift_compile_cmd "${LLDB_SWIFTC}" -Xlinker -nostrip
                       -resource-dir "${LLDB_PATH_TO_SWIFT_BUILD}/lib/swift"
                       -module-cache-path "${module_cache_dir}")
 
diff --git a/unittests/CMakeLists.txt b/unittests/CMakeLists.txt
index 63be2ffa1..56c04200b 100644
--- a/unittests/CMakeLists.txt
+++ b/unittests/CMakeLists.txt
@@ -21,17 +21,9 @@ if (LLDB_BUILT_STANDALONE)
 endif()
 
 function(add_lldb_unittest test_name)
-  cmake_parse_arguments(ARG
-    ""
-    ""
-    "LINK_LIBS;LINK_COMPONENTS"
-    ${ARGN})
-
-  list(APPEND LLVM_LINK_COMPONENTS ${ARG_LINK_COMPONENTS})
-
   add_unittest(LLDBUnitTests
     ${test_name}
-    ${ARG_UNPARSED_ARGUMENTS}
+    ${ARGN}
     )
 
   add_custom_command(
diff --git a/unittests/Core/CMakeLists.txt b/unittests/Core/CMakeLists.txt
index 3bc0bf7e2..980bc5b9f 100644
--- a/unittests/Core/CMakeLists.txt
+++ b/unittests/Core/CMakeLists.txt
@@ -7,10 +7,4 @@ add_lldb_unittest(LLDBCoreTests
   ScalarTest.cpp
   StructuredDataTest.cpp
   TimerTest.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-  LINK_COMPONENTS
-    Support
   )
diff --git a/unittests/Editline/CMakeLists.txt b/unittests/Editline/CMakeLists.txt
index 4f656f6cc..eaa21c490 100644
--- a/unittests/Editline/CMakeLists.txt
+++ b/unittests/Editline/CMakeLists.txt
@@ -1,8 +1,3 @@
 add_lldb_unittest(EditlineTests
   EditlineTest.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbUtility
   )
diff --git a/unittests/Expression/CMakeLists.txt b/unittests/Expression/CMakeLists.txt
index c0a701da4..04bad1411 100644
--- a/unittests/Expression/CMakeLists.txt
+++ b/unittests/Expression/CMakeLists.txt
@@ -1,7 +1,3 @@
 add_lldb_unittest(ExpressionTests
   GoParserTest.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbPluginExpressionParserGo
   )
diff --git a/unittests/Host/CMakeLists.txt b/unittests/Host/CMakeLists.txt
index 4fd929cf3..4c20f820e 100644
--- a/unittests/Host/CMakeLists.txt
+++ b/unittests/Host/CMakeLists.txt
@@ -4,8 +4,4 @@ add_lldb_unittest(HostTests
   SocketAddressTest.cpp
   SocketTest.cpp
   SymbolsTest.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
   )
diff --git a/unittests/Interpreter/CMakeLists.txt b/unittests/Interpreter/CMakeLists.txt
index 33ab503af..4078476bc 100644
--- a/unittests/Interpreter/CMakeLists.txt
+++ b/unittests/Interpreter/CMakeLists.txt
@@ -1,8 +1,5 @@
 add_lldb_unittest(InterpreterTests
   TestArgs.cpp
-
-  LINK_LIBS
-    lldbInterpreter
   )
 
 target_link_libraries(InterpreterTests
diff --git a/unittests/Language/CPlusPlus/CMakeLists.txt b/unittests/Language/CPlusPlus/CMakeLists.txt
index 4882eafc8..6cad97cc6 100644
--- a/unittests/Language/CPlusPlus/CMakeLists.txt
+++ b/unittests/Language/CPlusPlus/CMakeLists.txt
@@ -1,6 +1,3 @@
 add_lldb_unittest(LanguageCPlusPlusTests
   CPlusPlusLanguageTest.cpp
-
-  LINK_LIBS
-    lldbPluginCPlusPlusLanguage
   )
diff --git a/unittests/Platform/CMakeLists.txt b/unittests/Platform/CMakeLists.txt
index 3362ca08d..af1121dac 100644
--- a/unittests/Platform/CMakeLists.txt
+++ b/unittests/Platform/CMakeLists.txt
@@ -1,8 +1,3 @@
 add_lldb_unittest(LLDBPlatformTests
   PlatformDarwinTest.cpp
-
-  LINK_LIBS
-    lldbPluginPlatformMacOSX
-  LINK_COMPONENTS
-    Support
   )
diff --git a/unittests/Process/gdb-remote/CMakeLists.txt b/unittests/Process/gdb-remote/CMakeLists.txt
index 694ba182d..de4cac11b 100644
--- a/unittests/Process/gdb-remote/CMakeLists.txt
+++ b/unittests/Process/gdb-remote/CMakeLists.txt
@@ -2,13 +2,4 @@ add_lldb_unittest(ProcessGdbRemoteTests
   GDBRemoteClientBaseTest.cpp
   GDBRemoteCommunicationClientTest.cpp
   GDBRemoteTestUtils.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbPluginPlatformMacOSX
-    lldbPluginProcessUtility
-    lldbPluginProcessGDBRemote
-  LINK_COMPONENTS
-    Support
   )
diff --git a/unittests/Process/minidump/CMakeLists.txt b/unittests/Process/minidump/CMakeLists.txt
index 2b2df6327..10cb8c34f 100644
--- a/unittests/Process/minidump/CMakeLists.txt
+++ b/unittests/Process/minidump/CMakeLists.txt
@@ -1,14 +1,5 @@
 add_lldb_unittest(LLDBMinidumpTests
   MinidumpParserTest.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbTarget
-    lldbPluginProcessUtility
-    lldbPluginProcessMinidump
-  LINK_COMPONENTS
-    Support
   )
 
 set(test_inputs
diff --git a/unittests/ScriptInterpreter/Python/CMakeLists.txt b/unittests/ScriptInterpreter/Python/CMakeLists.txt
index 891ade25b..f011200e6 100644
--- a/unittests/ScriptInterpreter/Python/CMakeLists.txt
+++ b/unittests/ScriptInterpreter/Python/CMakeLists.txt
@@ -2,12 +2,7 @@ add_lldb_unittest(ScriptInterpreterPythonTests
   PythonDataObjectsTests.cpp
   PythonExceptionStateTests.cpp
   PythonTestSuite.cpp
-
-  LINK_LIBS
-    lldbHost
-    lldbPluginScriptInterpreterPython
-    ${PYTHON_LIBRARY}
-  LINK_COMPONENTS
-    Support
   )
+
+  target_link_libraries(ScriptInterpreterPythonTests lldbPluginScriptInterpreterPython ${PYTHON_LIBRARY})
   
\ No newline at end of file
diff --git a/unittests/Symbol/CMakeLists.txt b/unittests/Symbol/CMakeLists.txt
index dca5f17b1..75cabddba 100644
--- a/unittests/Symbol/CMakeLists.txt
+++ b/unittests/Symbol/CMakeLists.txt
@@ -1,8 +1,4 @@
 add_lldb_unittest(SymbolTests
   TestClangASTContext.cpp
   TestType.cpp
-
-  LINK_LIBS
-    lldbHost
-    lldbSymbol
   )
diff --git a/unittests/SymbolFile/DWARF/CMakeLists.txt b/unittests/SymbolFile/DWARF/CMakeLists.txt
index c764bd477..c0e4300da 100644
--- a/unittests/SymbolFile/DWARF/CMakeLists.txt
+++ b/unittests/SymbolFile/DWARF/CMakeLists.txt
@@ -1,16 +1,5 @@
 add_lldb_unittest(SymbolFileDWARFTests
   SymbolFileDWARFTests.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbSymbol
-    lldbPluginObjectFilePECOFF
-    lldbPluginSymbolFileDWARF
-    lldbPluginSymbolFilePDB
-  LINK_COMPONENTS
-    Support
-    DebugInfoPDB
   )
 
 set(test_inputs
diff --git a/unittests/SymbolFile/PDB/CMakeLists.txt b/unittests/SymbolFile/PDB/CMakeLists.txt
index d9aff4e2e..37adf3946 100644
--- a/unittests/SymbolFile/PDB/CMakeLists.txt
+++ b/unittests/SymbolFile/PDB/CMakeLists.txt
@@ -1,16 +1,5 @@
 add_lldb_unittest(SymbolFilePDBTests
   SymbolFilePDBTests.cpp
-
-  LINK_LIBS
-    lldbCore
-    lldbHost
-    lldbSymbol
-    lldbPluginObjectFilePECOFF
-    lldbPluginSymbolFileDWARF
-    lldbPluginSymbolFilePDB
-  LINK_COMPONENTS
-    Support
-    DebugInfoPDB
   )
 
 set(test_inputs
diff --git a/unittests/UnwindAssembly/InstEmulation/CMakeLists.txt b/unittests/UnwindAssembly/InstEmulation/CMakeLists.txt
index 7cc0befa3..5e274a229 100644
--- a/unittests/UnwindAssembly/InstEmulation/CMakeLists.txt
+++ b/unittests/UnwindAssembly/InstEmulation/CMakeLists.txt
@@ -1,15 +1,3 @@
 if ("AArch64" IN_LIST LLVM_TARGETS_TO_BUILD)
-  add_lldb_unittest(InstEmulationTests
-    TestArm64InstEmulation.cpp
-    LINK_LIBS
-      lldbCore
-      lldbSymbol
-      lldbTarget
-      lldbPluginUnwindAssemblyInstEmulation
-      lldbPluginDisassemblerLLVM
-      lldbPluginInstructionARM64
-      lldbPluginProcessUtility
-    LINK_COMPONENTS
-      Support
-      ${LLVM_TARGETS_TO_BUILD})
+  add_lldb_unittest(InstEmulationTests TestArm64InstEmulation.cpp)
 endif()
diff --git a/unittests/UnwindAssembly/x86/CMakeLists.txt b/unittests/UnwindAssembly/x86/CMakeLists.txt
index 2b5b31f79..7112467b3 100644
--- a/unittests/UnwindAssembly/x86/CMakeLists.txt
+++ b/unittests/UnwindAssembly/x86/CMakeLists.txt
@@ -1,10 +1,3 @@
 add_lldb_unittest(UnwindAssemblyx86Tests
     Testx86AssemblyInspectionEngine.cpp
-    LINK_LIBS
-      lldbCore
-      lldbSymbol
-      lldbPluginUnwindAssemblyX86
-    LINK_COMPONENTS
-      Support
-      ${LLVM_TARGETS_TO_BUILD}
   )
diff --git a/unittests/Utility/CMakeLists.txt b/unittests/Utility/CMakeLists.txt
index 0594434fb..15a29825f 100644
--- a/unittests/Utility/CMakeLists.txt
+++ b/unittests/Utility/CMakeLists.txt
@@ -4,15 +4,6 @@ add_lldb_unittest(UtilityTests
   TaskPoolTest.cpp
   TimeoutTest.cpp
   UriParserTest.cpp
-
-  LINK_LIBS
-      lldbCore
-      lldbHost
-      lldbSymbol
-      lldbUtility
-      lldbPluginObjectFileELF
-    LINK_COMPONENTS
-      Support
   )
 
 add_unittest_inputs(UtilityTests TestModule.so)
diff --git a/source/API/CMakeLists.txt b/source/API/CMakeLists.txt
index e66cad635..ac0d35a85 100644
--- a/source/API/CMakeLists.txt
+++ b/source/API/CMakeLists.txt
@@ -158,21 +158,6 @@ if (LLDB_WRAP_PYTHON)
 endif()
 target_link_libraries(liblldb PRIVATE ${LLDB_SYSTEM_LIBS})
 
-set(lib_dir "${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX}")
-set(CLANG_RESOURCE_PATH "${LLDB_PATH_TO_SWIFT_BUILD}/lib${LLVM_LIBDIR_SUFFIX}/swift/clang")
-set(clang_headers_target ${CLANG_RESOURCE_PATH}/include)
-if(NOT LLDB_BUILT_STANDALONE)
-  set(clang_headers_target symlink_clang_headers)
-endif()
-
-add_custom_command_target(
-    unused_var
-    COMMAND "${CMAKE_COMMAND}" "-E" "copy_directory" "${CLANG_RESOURCE_PATH}" "${lib_dir}/lldb/clang"
-    OUTPUT "${lib_dir}/lldb/clang"
-    VERBATIM
-    ALL
-    DEPENDS ${clang_headers_target})
-
 if(LLDB_BUILD_FRAMEWORK)
   file(GLOB public_headers ${LLDB_SOURCE_DIR}/include/lldb/API/*.h)
   set_target_properties(liblldb PROPERTIES
@@ -189,10 +174,3 @@ if(LLDB_BUILD_FRAMEWORK)
     COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX}/clang/${LLDB_VERSION} $<TARGET_FILE_DIR:liblldb>/Resources/Clang
     )
 endif()
-
-install(
-  CODE "file(MAKE_DIRECTORY ${lib_dir}/lldb)")
-
-install(
-  DIRECTORY "${lib_dir}/lldb/clang"
-  DESTINATION lib${LLVM_LIBDIR_SUFFIX}/lldb/)
diff --git a/unittests/Breakpoint/CMakeLists.txt b/unittests/Breakpoint/CMakeLists.txt
index 3164af237..5adaf9e78 100644
--- a/unittests/Breakpoint/CMakeLists.txt
+++ b/unittests/Breakpoint/CMakeLists.txt
@@ -1,9 +1,3 @@
 add_lldb_unittest(LLDBBreakpointTests
   BreakpointIDTest.cpp
-
-  LINK_LIBS
-    lldbBreakpoint
-    lldbCore
-  LINK_COMPONENTS
-    Support
   )
