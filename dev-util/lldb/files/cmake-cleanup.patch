diff --git a/CMakeLists.txt b/CMakeLists.txt
index ccfe522..9a45aad 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,6 +8,9 @@ if(NOT LLDB_BUILT_STANDALONE AND EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../swift)
    list(APPEND CMAKE_MODULE_PATH
         "${CMAKE_CURRENT_SOURCE_DIR}/../swift/cmake"
         "${CMAKE_CURRENT_SOURCE_DIR}/../swift/cmake/modules")
+else()
+   list(APPEND CMAKE_MODULE_PATH
+        "/usr/lib/cmake/swift")
 endif()
 
 if (__ANDROID_NDK__ OR (CMAKE_SYSTEM_NAME MATCHES "Windows"))
diff --git a/cmake/modules/AddLLDB.cmake b/cmake/modules/AddLLDB.cmake
index a8e9774..316653a 100644
--- a/cmake/modules/AddLLDB.cmake
+++ b/cmake/modules/AddLLDB.cmake
@@ -60,19 +60,19 @@ macro(add_lldb_library name)
       if (LLDB_LINKER_SUPPORTS_GROUPS)
         llvm_add_library(${name} ${libkind} ${srcs} LINK_LIBS
                                 -Wl,--start-group ${LLDB_USED_LIBS} -Wl,--end-group
-                                -Wl,--start-group ${SWIFT_ALL_LIBS} -Wl,--end-group
-                                -Wl,--start-group ${CLANG_ALL_LIBS} -Wl,--end-group
+                                -Wl,--start-group ${CLANG_USED_LIBS} -Wl,--end-group
+                                -Wl,--start-group ${SWIFT_USED_LIBS} -Wl,--end-group
           )
       else()
         llvm_add_library(${name} ${libkind} ${srcs} LINK_LIBS
-                                ${LLDB_USED_LIBS} ${SWIFT_ALL_LIBS} ${CLANG_ALL_LIBS}
+                                ${LLDB_USED_LIBS} ${CLANG_USED_LIBS} ${SWIFT_USED_LIBS}
           )
       endif()
     else()
         llvm_add_library(${name} ${libkind} ${srcs})
     endif()
 
-    if (${name} STREQUAL "liblldb")
+    if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY OR ${name} STREQUAL "liblldb")
       if (PARAM_SHARED)
         set(out_dir lib${LLVM_LIBDIR_SUFFIX})
         if(${name} STREQUAL "liblldb" AND LLDB_BUILD_FRAMEWORK)
@@ -103,7 +103,7 @@ endmacro(add_lldb_library)
 
 macro(add_lldb_executable name)
   cmake_parse_arguments(ARG "INCLUDE_IN_FRAMEWORK" "" "" ${ARGN})
-  add_llvm_executable(${name} DISABLE_LLVM_LINK_LLVM_DYLIB ${ARG_UNPARSED_ARGUMENTS})
+  add_llvm_executable(${name} ${ARG_UNPARSED_ARGUMENTS})
   set_target_properties(${name} PROPERTIES
     FOLDER "lldb executables")
 
@@ -122,10 +122,6 @@ macro(add_lldb_executable name)
             INSTALL_RPATH "@loader_path/../${LLDB_FRAMEWORK_INSTALL_DIR}")
     endif()
   endif()
-
-  # Might need the following in an else clause for above to cover non-Apple
-  # set(rpath_prefix "$ORIGIN")
-  # set_target_properties(${name} PROPERTIES INSTALL_RPATH "${rpath_prefix}/../lib")
 endmacro(add_lldb_executable)
 
 # Support appending linker flags to an existing target.
diff --git a/cmake/modules/LLDBConfig.cmake b/cmake/modules/LLDBConfig.cmake
index 18da877..eb248b8 100644
--- a/cmake/modules/LLDBConfig.cmake
+++ b/cmake/modules/LLDBConfig.cmake
@@ -25,8 +25,6 @@ endif()
 
 set(LLDB_DISABLE_PYTHON ${LLDB_DEFAULT_DISABLE_PYTHON} CACHE BOOL
   "Disables the Python scripting integration.")
-set(LLDB_ALLOW_STATIC_BINDINGS FALSE CACHE BOOL
-  "Enable using static/baked language bindings if swig is not present.")
 set(LLDB_DISABLE_CURSES ${LLDB_DEFAULT_DISABLE_CURSES} CACHE BOOL
   "Disables the Curses integration.")
 
diff --git a/cmake/modules/LLDBStandalone.cmake b/cmake/modules/LLDBStandalone.cmake
index 70974f0..f0af5f7 100644
--- a/cmake/modules/LLDBStandalone.cmake
+++ b/cmake/modules/LLDBStandalone.cmake
@@ -12,12 +12,7 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
 
   # Rely on llvm-config.
   set(CONFIG_OUTPUT)
-  set(FIND_PATHS "")
-  if (LLDB_PATH_TO_LLVM_BUILD)
-    set(FIND_PATHS "${LLDB_PATH_TO_LLVM_BUILD}/bin")
-  endif()
-  find_program(LLVM_CONFIG "llvm-config"
-    HINTS ${FIND_PATHS})
+  find_program(LLVM_CONFIG "llvm-config")
 
   if(LLVM_CONFIG)
     message(STATUS "Found LLVM_CONFIG as ${LLVM_CONFIG}")
@@ -61,18 +56,6 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
     mark_as_advanced(LLVM_ENABLE_ASSERTIONS)
   endif()
 
-  if (LLDB_PATH_TO_CLANG_SOURCE)
-    get_filename_component(CLANG_MAIN_SRC_DIR ${LLDB_PATH_TO_CLANG_SOURCE} ABSOLUTE)
-    set(CLANG_MAIN_INCLUDE_DIR "${CLANG_MAIN_SRC_DIR}/include")
-  endif()
-
-  if (LLDB_PATH_TO_SWIFT_SOURCE)
-      get_filename_component(SWIFT_MAIN_SRC_DIR ${LLDB_PATH_TO_SWIFT_SOURCE}
-                             ABSOLUTE)
-  endif()
-
-  list(APPEND CMAKE_MODULE_PATH "${LLDB_PATH_TO_LLVM_BUILD}/share/llvm/cmake")
-  list(APPEND CMAKE_MODULE_PATH "${LLDB_PATH_TO_SWIFT_SOURCE}/cmake/modules")
   set(LLVM_TOOLS_BINARY_DIR ${TOOLS_BINARY_DIR} CACHE PATH "Path to llvm/bin")
   set(LLVM_LIBRARY_DIR ${LIBRARY_DIR} CACHE PATH "Path to llvm/lib")
   set(LLVM_MAIN_INCLUDE_DIR ${INCLUDE_DIR} CACHE PATH "Path to llvm/include")
@@ -93,13 +76,6 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
   endif()
 
 
-  get_filename_component(PATH_TO_SWIFT_BUILD ${LLDB_PATH_TO_SWIFT_BUILD}
-                         ABSOLUTE)
-
-  get_filename_component(PATH_TO_CMARK_BUILD ${LLDB_PATH_TO_CMARK_BUILD}
-                         ABSOLUTE)
-
-  # These variables are used by add_llvm_library.
   # They are used as destination of target generators.
   set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin)
   set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX})
@@ -128,38 +104,38 @@ if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
   endif()
 
   # Import CMake library targets from LLVM and Clang.
-  if (EXISTS "${LLDB_PATH_TO_CLANG_BUILD}/lib/cmake/clang/ClangConfig.cmake")
-      include("${LLDB_PATH_TO_CLANG_BUILD}/lib/cmake/clang/ClangConfig.cmake")
+  include("${LLVM_OBJ_ROOT}/lib${LLVM_LIBDIR_SUFFIX}/cmake/llvm/LLVMConfig.cmake")
+  # cmake/clang/ClangConfig.cmake is not created when LLVM and Cland are built together.
+  if (EXISTS "${LLVM_OBJ_ROOT}/lib${LLVM_LIBDIR_SUFFIX}/cmake/clang/ClangConfig.cmake")
+    include("${LLVM_OBJ_ROOT}/lib${LLVM_LIBDIR_SUFFIX}/cmake/clang/ClangConfig.cmake")
   endif()
 
   set(PACKAGE_VERSION "${LLVM_PACKAGE_VERSION}")
 
-  # Why are we doing this?
-  # set(LLVM_BINARY_DIR ${CMAKE_BINARY_DIR})
+  set(LLVM_BINARY_DIR ${CMAKE_BINARY_DIR})
 
   set(CLANG_MAIN_INCLUDE_DIR "${CLANG_MAIN_SRC_DIR}/include")
 
   set(SWIFT_MAIN_INCLUDE_DIR "${SWIFT_MAIN_SRC_DIR}/include")
 
   set(CMAKE_INCLUDE_CURRENT_DIR ON)
-  include_directories("${LLVM_BINARY_DIR}/include"
-                      "${LLVM_BINARY_DIR}/tools/clang/include"
-                      "${LLVM_MAIN_INCLUDE_DIR}"
-                      "${PATH_TO_CLANG_BUILD}/include"
-                      "${CLANG_MAIN_INCLUDE_DIR}"
-                      "${PATH_TO_SWIFT_BUILD}/include"
-                      "${SWIFT_MAIN_INCLUDE_DIR}"
-                      "${CMAKE_CURRENT_SOURCE_DIR}/source")
-  link_directories("${LLVM_LIBRARY_DIR}"
-                   "${PATH_TO_CLANG_BUILD}/lib${LLVM_LIBDIR_SUFFIX}"
-                   "${PATH_TO_SWIFT_BUILD}/lib${LLVM_LIBDIR_SUFFIX}"
-                   "${PATH_TO_CMARK_BUILD}/src")
+  include_directories("${LLVM_BINARY_DIR}/include" "${LLVM_MAIN_INCLUDE_DIR}")
+  # Next three include directories are needed when llvm-config is located in build directory.
+  # LLVM and Cland are assumed to be built together
+  if (EXISTS "${LLVM_OBJ_ROOT}/include")
+    include_directories("${LLVM_OBJ_ROOT}/include")
+  endif()
+  if (EXISTS "${LLVM_MAIN_SRC_DIR}/tools/clang/include")
+    include_directories("${LLVM_MAIN_SRC_DIR}/tools/clang/include")
+  endif()
+  if (EXISTS "${LLVM_OBJ_ROOT}/tools/clang/include")
+    include_directories("${LLVM_OBJ_ROOT}/tools/clang/include")
+  endif()
+  link_directories("${LLVM_LIBRARY_DIR}")
 
   set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
   set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX})
   set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX})
 
   set(LLDB_BUILT_STANDALONE 1)
-else()
-  set(LLDB_PATH_TO_SWIFT_BUILD ${CMAKE_BINARY_DIR})
 endif()
diff --git a/scripts/CMakeLists.txt b/scripts/CMakeLists.txt
index c62ef1c..a31cd12 100644
--- a/scripts/CMakeLists.txt
+++ b/scripts/CMakeLists.txt
@@ -25,25 +25,7 @@ if(LLDB_BUILD_FRAMEWORK)
     ${LLDB_FRAMEWORK_INSTALL_DIR}/${LLDB_FRAMEWORK_RESOURCE_DIR})
 endif()
 
-set(PREPARE_BINDINGS_ARGS
-  "--src-root=${LLDB_SOURCE_DIR}"
-  "--target-dir=${LLDB_PYTHON_TARGET_DIR}"
-  "--config-build-dir=${CMAKE_CURRENT_BINARY_DIR}"
-  "--prefix=${CMAKE_BINARY_DIR}")
-
 find_package(SWIG)
-if( ${SWIG_FOUND} )
-  set(PREPARE_BINDINGS_ARGS
-    ${PREPARE_BINDINGS_ARGS}
-    "--swig-executable=${SWIG_EXECUTABLE}")
-elseif( ${LLDB_ALLOW_STATIC_BINDINGS} )
-  set(PREPARE_BINDINGS_ARGS
-    ${PREPARE_BINDINGS_ARGS}
-    --find-swig
-    --allow-static-binding)
-else()
-    message( FATAL_ERROR "swig not found and static bindings not permitted - install swig or specify -DLLDB_ALLOW_STATIC_BINDINGS=1")
-endif()
 
 add_custom_command(
   OUTPUT ${LLDB_WRAP_PYTHON}
@@ -53,7 +35,13 @@ add_custom_command(
   DEPENDS ${SWIG_HEADERS}
   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Python/prepare_binding_Python.py
   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Python/modify-python-lldb.py
-  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/prepare_bindings.py ${PREPARE_BINDINGS_ARGS}
+  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/prepare_bindings.py
+          ${framework_arg}
+          "--srcRoot=${LLDB_SOURCE_DIR}"
+          "--targetDir=${LLDB_PYTHON_TARGET_DIR}"
+          "--cfgBldDir=${CMAKE_CURRENT_BINARY_DIR}"
+          "--prefix=${CMAKE_BINARY_DIR}"
+          "--swigExecutable=${SWIG_EXECUTABLE}"
   COMMENT "Python script building LLDB Python wrapper")
 set_source_files_properties(${LLDB_WRAP_PYTHON} PROPERTIES GENERATED 1)
 set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/lldb.py PROPERTIES GENERATED 1)
diff --git a/scripts/Python/modules/readline/CMakeLists.txt b/scripts/Python/modules/readline/CMakeLists.txt
index 77787a8..0a4376c 100644
--- a/scripts/Python/modules/readline/CMakeLists.txt
+++ b/scripts/Python/modules/readline/CMakeLists.txt
@@ -1,7 +1,7 @@
 # FIXME: if a non-standard version of python is requested, the cmake macro
 # below will need Python_ADDITIONAL_VERSIONS set in order to find it.
 include(FindPythonInterp)
-SET(PYTHON_DIRECTORY python2.7/site-packages)
+SET(PYTHON_DIRECTORY python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/site-packages)
 
 # Build the readline python module
 include_directories(${PYTHON_INCLUDE_DIR})
diff --git a/source/API/CMakeLists.txt b/source/API/CMakeLists.txt
index 655969c..338908f 100644
--- a/source/API/CMakeLists.txt
+++ b/source/API/CMakeLists.txt
@@ -108,13 +108,16 @@ if (NOT CMAKE_SYSTEM_NAME MATCHES "Windows")
     # If we're not exporting all symbols, we'll want to explicitly set
     # the exported symbols here.  This prevents 'log enable --stack ...'
     # from working on some systems but limits the liblldb size.
-    MESSAGE("-- Symbols (liblldb): only exporting symbols in lldb namespace")
+    MESSAGE("-- Symbols (liblldb): only exporting liblldb.exports symbols")
     add_llvm_symbol_exports(liblldb ${CMAKE_CURRENT_SOURCE_DIR}/liblldb.exports)
   else()
     # Don't use an explicit export.  Instead, tell the linker to
     # export all symbols.
-    MESSAGE("-- Symbols (liblldb): exporting symbols from lldb and lldb_private namespace")
-    add_llvm_symbol_exports(liblldb ${CMAKE_CURRENT_SOURCE_DIR}/liblldb-private.exports)
+    MESSAGE("-- Symbols (liblldb): exporting all symbols")
+    # Darwin linker doesn't need this extra step.
+    if (NOT CMAKE_SYSTEM_NAME MATCHES "Darwin")
+      lldb_append_link_flags(liblldb "-Wl,--export-dynamic")
+    endif()
   endif()
 endif()
 
@@ -136,21 +139,6 @@ if (LLDB_WRAP_PYTHON)
 endif()
 target_link_libraries(liblldb PRIVATE ${LLDB_SYSTEM_LIBS})
 
-set(lib_dir "${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX}")
-set(CLANG_RESOURCE_PATH "${LLDB_PATH_TO_SWIFT_BUILD}/lib${LLVM_LIBDIR_SUFFIX}/swift/clang")
-set(clang_headers_target ${CLANG_RESOURCE_PATH}/include)
-if(NOT LLDB_BUILT_STANDALONE)
-  set(clang_headers_target symlink_clang_headers)
-endif()
-
-add_custom_command_target(
-    unused_var
-    COMMAND "${CMAKE_COMMAND}" "-E" "copy_directory" "${CLANG_RESOURCE_PATH}" "${lib_dir}/lldb/clang"
-    OUTPUT "${lib_dir}/lldb/clang"
-    VERBATIM
-    ALL
-    DEPENDS ${clang_headers_target})
-
 if(LLDB_BUILD_FRAMEWORK)
   file(GLOB public_headers ${LLDB_SOURCE_DIR}/include/lldb/API/*.h)
   set_target_properties(liblldb PROPERTIES
@@ -174,10 +162,3 @@ if(LLDB_BUILD_FRAMEWORK)
       DEPENDS ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/${LLDB_FRAMEWORK_INSTALL_DIR}/LLDB.framework/Versions/${LLDB_FRAMEWORK_VERSION}/Headers)
   endif()
 endif()
-
-install(
-  CODE "file(MAKE_DIRECTORY ${lib_dir}/lldb)")
-
-install(
-  DIRECTORY "${lib_dir}/lldb/clang"
-  DESTINATION lib${LLVM_LIBDIR_SUFFIX}/lldb/)
diff --git a/tools/lldb-server/CMakeLists.txt b/tools/lldb-server/CMakeLists.txt
index 5d1e8ef..ce7f686 100644
--- a/tools/lldb-server/CMakeLists.txt
+++ b/tools/lldb-server/CMakeLists.txt
@@ -33,30 +33,21 @@ add_lldb_executable(lldb-server INCLUDE_IN_FRAMEWORK
     LLDBServerUtilities.cpp
 )
 
-if (BUILD_SHARED_LIBS )
-  target_link_libraries(lldb-server liblldb)
-  target_link_libraries(lldb-server ${LLDB_SYSTEM_LIBS})
+# The Darwin linker doesn't understand --start-group/--end-group.
+if (LLDB_LINKER_SUPPORTS_GROUPS)
+  target_link_libraries(lldb-server
+                        -Wl,--start-group ${LLDB_USED_LIBS} -Wl,--end-group)
+  target_link_libraries(lldb-server
+                        -Wl,--start-group ${CLANG_USED_LIBS} -Wl,--end-group)
+  target_link_libraries(lldb-server
+                        -Wl,--start-group ${SWIFT_USED_LIBS} -Wl,--end-group)
 else()
-  # The Darwin linker doesn't understand --start-group/--end-group.
-  if (LLDB_LINKER_SUPPORTS_GROUPS)
-    target_link_libraries(lldb-server
-                          -Wl,--start-group ${LLDB_USED_LIBS} -Wl,--end-group)
-    target_link_libraries(lldb-server
-                          -Wl,--start-group ${SWIFT_ALL_LIBS} -Wl,--end-group)
-    target_link_libraries(lldb-server
-                          -Wl,--start-group ${CLANG_ALL_LIBS} -Wl,--end-group)
-    target_link_libraries(lldb-server
-                          -Wl,--start-group ${LLVM_ALL_LIBS} -Wl,--end-group)
-  else()
-    target_link_libraries(lldb-server ${LLDB_USED_LIBS})
-    target_link_libraries(lldb-server ${SWIFT_ALL_LIBS})
-    target_link_libraries(lldb-server ${CLANG_ALL_LIBS})
-    target_link_libraries(lldb-server ${LLVM_ALL_LIBS})
-  endif()
-  llvm_config(lldb-server ${LLVM_LINK_COMPONENTS})
-
-  target_link_libraries(lldb-server ${LLDB_SYSTEM_LIBS})
+  target_link_libraries(lldb-server ${LLDB_USED_LIBS})
+  target_link_libraries(lldb-server ${CLANG_USED_LIBS})
+  target_link_libraries(lldb-server ${SWIFT_USED_LIBS})
 endif()
+llvm_config(lldb-server ${LLVM_LINK_COMPONENTS})
+target_link_libraries(lldb-server ${LLDB_SYSTEM_LIBS})
 
 set_target_properties(lldb-server PROPERTIES VERSION ${LLDB_VERSION})
 
diff --git a/unittests/CMakeLists.txt b/unittests/CMakeLists.txt
index 3f0e214..570025d 100644
--- a/unittests/CMakeLists.txt
+++ b/unittests/CMakeLists.txt
@@ -24,7 +24,7 @@ function(add_lldb_unittest test_name)
     COMMAND "${CMAKE_COMMAND}" -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/Inputs)
 
   lldb_link_common_libs(${test_name} EXE)
-  target_link_libraries(${test_name} ${SWIFT_ALL_LIBS} ${CLANG_ALL_LIBS} ${LLDB_SYSTEM_LIBS})
+  target_link_libraries(${test_name} ${SWIFT_USED_LIBS} ${CLANG_USED_LIBS} ${LLDB_SYSTEM_LIBS})
   llvm_config(${test_name} ${LLVM_LINK_COMPONENTS})
 endfunction()
 
diff --git a/cmake/LLDBDependencies.cmake b/cmake/LLDBDependencies.cmake
index ecb2b15a8..60af1a8f9 100644
--- a/cmake/LLDBDependencies.cmake
+++ b/cmake/LLDBDependencies.cmake
@@ -134,54 +134,42 @@ if ( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
     )
 endif()
 
-macro(add_libs_from_path build_dir lib_prefix lib_list)
-  file(TO_CMAKE_PATH ${build_dir} build_dir_cmake)
-  
-  file(GLOB built_libs
-    RELATIVE "${build_dir_cmake}/lib${LLVM_LIBDIR_SUFFIX}"
-    ${build_dir_cmake}/lib/lib${lib_prefix}*.a)
-
-  set(${lib_list})
-  
-  foreach(built_lib ${built_libs})
-    string(REGEX REPLACE ".*lib(${lib_prefix}[^.]+)\\..*" "\\1" built_lib_no_extension ${built_lib})
-    list(APPEND ${lib_list} ${built_lib_no_extension})
-  endforeach()
-endmacro(add_libs_from_path)
+set(CLANG_USED_LIBS
+  clangAnalysis
+  clangAST
+  clangBasic
+  clangCodeGen
+  clangDriver
+  clangEdit
+  clangFrontend
+  clangIndex
+  clangLex
+  clangParse
+  clangRewrite
+  clangRewriteFrontend
+  clangSema
+  clangSerialization)
+set(SWIFT_USED_LIBS
+  swiftBasic
+  swiftAST
+  swiftIDE
+  swiftIRGen
+  swiftFrontend
+  swiftLLVMPasses
+  swiftSerialization
+  swiftClangImporter
+  swiftMarkup
+  swiftOption
+  swiftParse
+  swiftSema
+  swiftSIL
+  swiftSILGen
+  swiftSILOptimizer
+  swiftASTSectionImporter
+  swiftRemoteAST
+  swiftSyntax
+  )
 
-if (LLDB_BUILT_STANDALONE)
-  add_libs_from_path(${LLDB_PATH_TO_SWIFT_BUILD} "swift" SWIFT_ALL_LIBS)
-  add_libs_from_path(${LLDB_PATH_TO_CLANG_BUILD} "clang" CLANG_ALL_LIBS)
-  add_libs_from_path(${LLDB_PATH_TO_LLVM_BUILD} "LLVM" LLVM_ALL_LIBS)
-else()
-  set(CLANG_ALL_LIBS
-    clangAnalysis
-    clangAST
-    clangBasic
-    clangCodeGen
-    clangDriver
-    clangEdit
-    clangFrontend
-    clangLex
-    clangParse
-    clangRewrite
-    clangRewriteFrontend
-    clangSema
-    clangSerialization)
-  set(SWIFT_ALL_LIBS
-    swiftBasic
-    swiftAST
-    swiftIDE
-    swiftFrontend
-    swiftSerialization
-    swiftClangImporter
-    swiftParse
-    swiftSIL
-    swiftSILOptimizer
-    swiftASTSectionImporter
-    swiftRemoteAST
-    )
-endif()
 
 set(LLDB_SYSTEM_LIBS)
 if (NOT CMAKE_SYSTEM_NAME MATCHES "Windows" AND NOT __ANDROID_NDK__)
@@ -227,7 +215,7 @@ endif()
 
 if(LLDB_BUILT_STANDALONE)
   # this needs to be linked statially
-  list(APPEND LLDB_SYSTEM_LIBS ${PATH_TO_CMARK_BUILD}/src/libcmark.a)
+  list(APPEND LLDB_SYSTEM_LIBS /usr/lib/libcmark.a)
 else()
   list(APPEND LLDB_SYSTEM_LIBS libcmark_static)
 endif()
@@ -245,6 +233,13 @@ set(LLVM_LINK_COMPONENTS
   mc
   mcjit
   core
+  analysis
+  profiledata
+  transformutils
+  objcarcopts
+  instrumentation
+  object
+  demangle
   mcdisassembler
   executionengine
   runtimedyld
