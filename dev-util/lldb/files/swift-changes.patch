diff --git a/source/Plugins/ExpressionParser/Swift/SwiftExpressionParser.cpp b/source/Plugins/ExpressionParser/Swift/SwiftExpressionParser.cpp
index 8410fa828..9109fa22d 100644
--- a/source/Plugins/ExpressionParser/Swift/SwiftExpressionParser.cpp
+++ b/source/Plugins/ExpressionParser/Swift/SwiftExpressionParser.cpp
@@ -1770,7 +1770,7 @@ unsigned SwiftExpressionParser::Parse(DiagnosticManager &diagnostic_manager,
         IRExecutionUnit::GetLLVMGlobalContextMutex());
 
     m_module = swift::performIRGeneration(
-        m_swift_ast_context->GetIRGenOptions(), module, sil_module.get(),
+        m_swift_ast_context->GetIRGenOptions(), module, std::move(sil_module),
         "lldb_module", SwiftASTContext::GetGlobalLLVMContext());
   }
 
diff --git a/source/Plugins/ExpressionParser/Swift/SwiftPersistentExpressionState.cpp b/source/Plugins/ExpressionParser/Swift/SwiftPersistentExpressionState.cpp
index a92f30417..45482b285 100644
--- a/source/Plugins/ExpressionParser/Swift/SwiftPersistentExpressionState.cpp
+++ b/source/Plugins/ExpressionParser/Swift/SwiftPersistentExpressionState.cpp
@@ -149,9 +149,9 @@ bool SwiftPersistentExpressionState::SwiftDeclMap::DeclsAreEquivalent(
       if (body_params_equal) {
         // The bodies look the same, now try the return values:
         swift::CanType lhs_result_type =
-            lhs_func_decl->getBodyResultType().getCanonicalTypeOrNull();
+            lhs_func_decl->getResultInterfaceType().getCanonicalTypeOrNull();
         swift::CanType rhs_result_type =
-            rhs_func_decl->getBodyResultType().getCanonicalTypeOrNull();
+            rhs_func_decl->getResultInterfaceType().getCanonicalTypeOrNull();
 
         if (lhs_result_type == rhs_result_type) {
           equivalent = true;
diff --git a/source/Plugins/ExpressionParser/Swift/SwiftSILManipulator.cpp b/source/Plugins/ExpressionParser/Swift/SwiftSILManipulator.cpp
index 0e53cce00..92d6261b0 100644
--- a/source/Plugins/ExpressionParser/Swift/SwiftSILManipulator.cpp
+++ b/source/Plugins/ExpressionParser/Swift/SwiftSILManipulator.cpp
@@ -41,7 +41,7 @@ swift::SILValue SwiftSILManipulator::emitLValueForVariable(
 
   swift::SILArgument *struct_argument = nullptr;
 
-  for (swift::SILArgument *argument : entry_block.getBBArgs()) {
+  for (swift::SILArgument *argument : entry_block.getArguments()) {
     swift::Identifier argument_name = argument->getDecl()->getName();
 
     if (!strcmp(argument_name.get(), SwiftASTManipulator::GetArgumentName())) {
diff --git a/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.cpp b/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.cpp
index 3ed81e6ff..b5ab04c96 100644
--- a/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.cpp
+++ b/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.cpp
@@ -150,7 +150,7 @@ const char *PlatformAppleTVSimulator::GetDescriptionStatic() {
 /// Default Constructor
 //------------------------------------------------------------------
 PlatformAppleTVSimulator::PlatformAppleTVSimulator()
-    : PlatformDarwin(true), m_sdk_directory() {}
+    : PlatformDarwin(true), m_sdk_dir_mutex(), m_sdk_directory() {}
 
 //------------------------------------------------------------------
 /// Destructor.
@@ -261,7 +261,7 @@ EnumerateDirectoryCallback(void *baton, FileSpec::FileType file_type,
 }
 
 const char *PlatformAppleTVSimulator::GetSDKDirectoryAsCString() {
-  std::lock_guard<std::mutex> guard(m_mutex);
+  std::lock_guard<std::mutex> guard(m_sdk_dir_mutex);
   if (m_sdk_directory.empty()) {
     const char *developer_dir = GetDeveloperDirectory();
     if (developer_dir) {
diff --git a/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.h b/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.h
index 887a98fea..311ba05d7 100644
--- a/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.h
+++ b/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.h
@@ -86,6 +86,7 @@ public:
   }
 
 protected:
+  std::mutex m_sdk_dir_mutex;
   std::string m_sdk_directory;
   std::string m_build_update;
 
diff --git a/source/Symbol/SwiftASTContext.cpp b/source/Symbol/SwiftASTContext.cpp
index e8a41dc8b..e5733be96 100644
--- a/source/Symbol/SwiftASTContext.cpp
+++ b/source/Symbol/SwiftASTContext.cpp
@@ -152,8 +152,7 @@ static inline swift::Type GetSwiftType(void *opaque_ptr) {
 }
 
 static inline swift::CanType GetCanonicalSwiftType(void *opaque_ptr) {
-  return swift::Type(((swift::TypeBase *)opaque_ptr)->getDesugaredType())
-      ->getCanonicalType();
+  return ((swift::TypeBase *)opaque_ptr)->getCanonicalType();
 }
 
 static inline swift::Type GetSwiftType(CompilerType type) {
@@ -161,9 +160,7 @@ static inline swift::Type GetSwiftType(CompilerType type) {
 }
 
 static inline swift::CanType GetCanonicalSwiftType(CompilerType type) {
-  return swift::Type(
-             ((swift::TypeBase *)type.GetOpaqueQualType())->getDesugaredType())
-      ->getCanonicalType();
+  return ((swift::TypeBase *)type.GetOpaqueQualType())->getCanonicalType();
 }
 
 enum class MemberType : uint32_t { Invalid, BaseClass, Field };
@@ -319,7 +316,6 @@ CachedMemberInfo *SwiftASTContext::GetCachedMemberInfo(void *type) {
     case swift::TypeKind::WeakStorage:
     case swift::TypeKind::UnmanagedStorage:
     case swift::TypeKind::GenericTypeParam:
-    case swift::TypeKind::AssociatedType:
     case swift::TypeKind::DependentMember:
     case swift::TypeKind::Optional:
     case swift::TypeKind::ImplicitlyUnwrappedOptional:
@@ -328,7 +324,6 @@ CachedMemberInfo *SwiftASTContext::GetCachedMemberInfo(void *type) {
     case swift::TypeKind::Substituted:
     case swift::TypeKind::Function:
     case swift::TypeKind::GenericFunction:
-    case swift::TypeKind::PolymorphicFunction:
     case swift::TypeKind::ArraySlice:
     case swift::TypeKind::LValue:
     case swift::TypeKind::UnboundGeneric:
@@ -4178,6 +4166,37 @@ CompilerType SwiftASTContext::GetVoidFunctionType() {
   return m_void_function_type;
 }
 
+static CompilerType ValueDeclToType(swift::ValueDecl *decl,
+                                    swift::ASTContext *ast) {
+  if (decl) {
+    switch (decl->getKind()) {
+    case swift::DeclKind::TypeAlias: {
+      swift::TypeAliasDecl *alias_decl = llvm::cast<swift::TypeAliasDecl>(decl);
+      if (alias_decl->getAliasType()) {
+        swift::Type swift_type = alias_decl->getAliasType();
+        return CompilerType(ast, swift_type.getPointer());
+      }
+      break;
+    }
+
+    case swift::DeclKind::Enum:
+    case swift::DeclKind::Struct:
+    case swift::DeclKind::Protocol:
+    case swift::DeclKind::Class: {
+      swift::NominalTypeDecl *nominal_decl = llvm::cast<swift::NominalTypeDecl>(decl);
+      if (nominal_decl->hasInterfaceType()) {
+        swift::Type swift_type = nominal_decl->getDeclaredType();
+        return CompilerType(ast, swift_type.getPointer());
+      }
+    } break;
+
+    default:
+      break;
+    }
+  }
+  return CompilerType();
+}
+
 CompilerType SwiftASTContext::FindQualifiedType(const char *qualified_name) {
   VALID_OR_RETURN(CompilerType());
 
@@ -4192,51 +4211,10 @@ CompilerType SwiftASTContext::FindQualifiedType(const char *qualified_name) {
         const char *module_type_name = dot_pos + 1;
         swift_module->lookupValue(access_path, GetIdentifier(module_type_name),
                                   swift::NLKind::UnqualifiedLookup, decls);
-        if (!decls.empty()) {
-          for (auto decl : decls) {
-            switch (decl->getKind()) {
-            case swift::DeclKind::Import:
-            case swift::DeclKind::Extension:
-            case swift::DeclKind::PatternBinding:
-            case swift::DeclKind::TopLevelCode:
-            case swift::DeclKind::InfixOperator:
-            case swift::DeclKind::PrefixOperator:
-            case swift::DeclKind::PostfixOperator:
-            case swift::DeclKind::GenericTypeParam:
-            case swift::DeclKind::AssociatedType:
-            case swift::DeclKind::EnumElement:
-            case swift::DeclKind::EnumCase:
-            case swift::DeclKind::IfConfig:
-            case swift::DeclKind::Param:
-            case swift::DeclKind::Module:
-            case swift::DeclKind::PrecedenceGroup:
-              break;
-
-            case swift::DeclKind::TypeAlias:
-            case swift::DeclKind::Enum:
-            case swift::DeclKind::Struct:
-            case swift::DeclKind::Class:
-              if (decl->hasType()) {
-                swift::Type swift_type = decl->getType();
-                swift::MetatypeType *meta_type =
-                    swift_type->getAs<swift::MetatypeType>();
-                swift::ASTContext *ast = GetASTContext();
-                if (meta_type)
-                  return CompilerType(
-                      ast, meta_type->getInstanceType().getPointer());
-                else
-                  return CompilerType(ast, swift_type.getPointer());
-              }
-              break;
-            case swift::DeclKind::Protocol:
-            case swift::DeclKind::Var:
-            case swift::DeclKind::Func:
-            case swift::DeclKind::Subscript:
-            case swift::DeclKind::Constructor:
-            case swift::DeclKind::Destructor:
-              break;
-            }
-          }
+        for (auto decl : decls) {
+          CompilerType type = ValueDeclToType(decl, GetASTContext());
+          if (type)
+            return type;
         }
       }
     }
@@ -4244,41 +4222,10 @@ CompilerType SwiftASTContext::FindQualifiedType(const char *qualified_name) {
   return CompilerType();
 }
 
-// FIXME: other guys try to do similar stuff - can we grand-unify all of them?
-static CompilerType ValueDeclToType(swift::ValueDecl *decl,
-                                    swift::ASTContext *ast,
-                                    bool metatype_is_instance = true) {
-  if (decl) {
-    switch (decl->getKind()) {
-    case swift::DeclKind::TypeAlias:
-    case swift::DeclKind::Enum:
-    case swift::DeclKind::Struct:
-    case swift::DeclKind::Class:
-    case swift::DeclKind::Protocol:
-    case swift::DeclKind::Func:
-      if (decl->hasType()) {
-        swift::Type swift_type = decl->getType();
-        swift::MetatypeType *meta_type =
-            swift_type->getAs<swift::MetatypeType>();
-        if (meta_type && metatype_is_instance)
-          return CompilerType(ast, meta_type->getInstanceType().getPointer());
-        else
-          return CompilerType(ast, swift_type.getPointer());
-      }
-      break;
-
-    default:
-      break;
-    }
-  }
-  return CompilerType();
-}
-
-static CompilerType DeclToType(swift::Decl *decl, swift::ASTContext *ast,
-                               bool metatype_is_instance = true) {
+static CompilerType DeclToType(swift::Decl *decl, swift::ASTContext *ast) {
   if (swift::ValueDecl *value_decl =
           llvm::dyn_cast_or_null<swift::ValueDecl>(decl))
-    return ValueDeclToType(value_decl, ast, metatype_is_instance);
+    return ValueDeclToType(value_decl, ast);
   return CompilerType();
 }
 
@@ -4305,21 +4252,23 @@ static SwiftASTContext::TypeOrDecl DeclToTypeOrDecl(swift::ASTContext *ast,
     case swift::DeclKind::PrecedenceGroup:
       return decl;
 
-    case swift::DeclKind::TypeAlias:
+    case swift::DeclKind::TypeAlias: {
+      swift::TypeAliasDecl *alias_decl =
+          llvm::dyn_cast_or_null<swift::TypeAliasDecl>(decl);
+      if (alias_decl->getAliasType()) {
+        swift::Type swift_type = alias_decl->getAliasType();
+        return CompilerType(ast, swift_type.getPointer());
+      }
+    } break;
     case swift::DeclKind::Enum:
     case swift::DeclKind::Struct:
     case swift::DeclKind::Class:
     case swift::DeclKind::Protocol: {
-      swift::ValueDecl *value_decl =
-          llvm::dyn_cast_or_null<swift::ValueDecl>(decl);
-      if (value_decl->hasType()) {
-        swift::Type swift_type = value_decl->getType();
-        swift::MetatypeType *meta_type =
-            swift_type->getAs<swift::MetatypeType>();
-        if (meta_type)
-          return CompilerType(ast, meta_type->getInstanceType().getPointer());
-        else
-          return CompilerType(ast, swift_type.getPointer());
+      swift::NominalTypeDecl *nominal_decl =
+          llvm::dyn_cast_or_null<swift::NominalTypeDecl>(decl);
+      if (nominal_decl->hasInterfaceType()) {
+        swift::Type swift_type = nominal_decl->getDeclaredType();
+        return CompilerType(ast, swift_type.getPointer());
       }
     } break;
 
@@ -4451,8 +4400,8 @@ size_t SwiftASTContext::FindTypes(const char *name,
         [this](swift::Decl *decl) -> CompilerType {
           if (swift::ValueDecl *value_decl =
                   llvm::dyn_cast_or_null<swift::ValueDecl>(decl)) {
-            if (value_decl->hasType()) {
-              swift::Type swift_type = value_decl->getType();
+            if (value_decl->hasInterfaceType()) {
+              swift::Type swift_type = value_decl->getInterfaceType();
               swift::MetatypeType *meta_type =
                   swift_type->getAs<swift::MetatypeType>();
               swift::ASTContext *ast = GetASTContext();
@@ -4782,10 +4731,7 @@ CompilerType SwiftASTContext::GetErrorType() {
     swift_ctx->getStdlibModule(true);
     swift::NominalTypeDecl *error_type_decl = GetASTContext()->getErrorDecl();
     if (error_type_decl) {
-      auto error_type = error_type_decl->getType().getPointer();
-      if (swift::MetatypeType *error_metatype =
-              error_type->getAs<swift::MetatypeType>())
-        error_type = error_metatype->getInstanceType().getPointer();
+      auto error_type = error_type_decl->getDeclaredType().getPointer();
       return CompilerType(GetASTContext(), error_type);
     }
   }
@@ -4931,7 +4877,21 @@ void SwiftASTContext::PrintDiagnostics(DiagnosticManager &diagnostic_manager,
   // and then put it to the stream, otherwise just dump the diagnostics to the
   // stream.
 
-  VALID_OR_RETURN_VOID();
+
+   // N.B. you cannot use VALID_OR_RETURN_VOID here since that exits if you have
+   // fatal errors, which are what we are trying to print here.
+  if (!m_ast_context_ap.get()) {
+    SymbolFile *sym_file = GetSymbolFile();
+    if (sym_file) {
+      ConstString name 
+              = sym_file->GetObjectFile()->GetModule()->GetObjectName();
+      m_fatal_errors.SetErrorStringWithFormat(
+                  "Null context for %s.", name.AsCString());
+    } else {
+      m_fatal_errors.SetErrorString("Unknown fatal error occurred.");
+    }
+    return;
+  }
 
   if (m_ast_context_ap->Diags.hasFatalErrorOccurred() &&
       !m_reported_fatal_error) {
@@ -5239,7 +5199,6 @@ bool SwiftASTContext::IsAggregateType(void *type) {
     case swift::TypeKind::Optional:
     case swift::TypeKind::ImplicitlyUnwrappedOptional:
     case swift::TypeKind::GenericTypeParam:
-    case swift::TypeKind::AssociatedType:
     case swift::TypeKind::DependentMember:
     case swift::TypeKind::NameAlias:
       break;
@@ -5262,7 +5221,6 @@ bool SwiftASTContext::IsAggregateType(void *type) {
     case swift::TypeKind::Substituted:
     case swift::TypeKind::Function:
     case swift::TypeKind::GenericFunction:
-    case swift::TypeKind::PolymorphicFunction:
     case swift::TypeKind::ProtocolComposition:
       break;
     case swift::TypeKind::LValue:
@@ -5317,7 +5275,6 @@ bool SwiftASTContext::IsFunctionType(void *type, bool *is_variadic_ptr) {
     const swift::TypeKind type_kind = swift_can_type->getKind();
     switch (type_kind) {
     case swift::TypeKind::Function:
-    case swift::TypeKind::PolymorphicFunction:
     case swift::TypeKind::GenericFunction:
       return true;
     case swift::TypeKind::SILFunction:
@@ -5442,7 +5399,6 @@ bool SwiftASTContext::IsPointerType(void *type, CompilerType *pointee_type) {
     case swift::TypeKind::Optional:
     case swift::TypeKind::ImplicitlyUnwrappedOptional:
     case swift::TypeKind::GenericTypeParam:
-    case swift::TypeKind::AssociatedType:
     case swift::TypeKind::DependentMember:
     case swift::TypeKind::Enum:
     case swift::TypeKind::Struct:
@@ -5464,7 +5420,6 @@ bool SwiftASTContext::IsPointerType(void *type, CompilerType *pointee_type) {
     case swift::TypeKind::Substituted:
     case swift::TypeKind::Function:
     case swift::TypeKind::GenericFunction:
-    case swift::TypeKind::PolymorphicFunction:
     case swift::TypeKind::ArraySlice:
     case swift::TypeKind::ProtocolComposition:
     case swift::TypeKind::DynamicSelf:
@@ -5698,7 +5653,7 @@ SwiftASTContext::GetReferentType(const CompilerType &compiler_type) {
       swift::TypeBase *referent_type = ref_type->getReferentType().getPointer();
       if (referent_type) {
         swift::CanType referent_can_type(
-            referent_type->getDesugaredType()->getCanonicalType());
+            referent_type->getCanonicalType());
         return CompilerType(GetASTContext(), referent_can_type.getPointer());
       }
     } else
@@ -5739,7 +5694,6 @@ bool SwiftASTContext::IsFullyRealized(const CompilerType &compiler_type) {
       }
       return true;
     } break;
-    case swift::TypeKind::PolymorphicFunction:
     case swift::TypeKind::BoundGenericClass:
     case swift::TypeKind::BoundGenericStruct:
     case swift::TypeKind::BoundGenericEnum: {
@@ -5990,7 +5944,6 @@ SwiftASTContext::GetTypeInfo(void *type,
   const swift::TypeKind type_kind = swift_can_type->getKind();
   uint32_t swift_flags = eTypeIsSwift;
   switch (type_kind) {
-  case swift::TypeKind::AssociatedType:
   case swift::TypeKind::DependentMember:
   case swift::TypeKind::Error:
   case swift::TypeKind::GenericTypeParam:
@@ -6004,7 +5957,6 @@ SwiftASTContext::GetTypeInfo(void *type,
 
   case swift::TypeKind::GenericFunction:
     swift_flags |= eTypeIsGeneric;
-  case swift::TypeKind::PolymorphicFunction:
   case swift::TypeKind::Function:
     swift_flags |=
         eTypeIsBuiltIn | eTypeHasValue | eTypeIsScalar | eTypeInstanceIsPointer;
@@ -6195,8 +6147,6 @@ lldb::TypeClass SwiftASTContext::GetTypeClass(void *type) {
     return lldb::eTypeClassEnumeration;
   case swift::TypeKind::GenericTypeParam:
     return lldb::eTypeClassOther;
-  case swift::TypeKind::AssociatedType:
-    return lldb::eTypeClassOther;
   case swift::TypeKind::DependentMember:
     return lldb::eTypeClassOther;
   case swift::TypeKind::Enum:
@@ -6219,8 +6169,6 @@ lldb::TypeClass SwiftASTContext::GetTypeClass(void *type) {
     return lldb::eTypeClassFunction;
   case swift::TypeKind::GenericFunction:
     return lldb::eTypeClassFunction;
-  case swift::TypeKind::PolymorphicFunction:
-    return lldb::eTypeClassFunction;
   case swift::TypeKind::ArraySlice:
     return lldb::eTypeClassArray;
   case swift::TypeKind::ProtocolComposition:
@@ -6543,7 +6491,7 @@ TypeMemberFunctionImpl SwiftASTContext::GetMemberFunctionAtIndex(void *type,
                   }
                   result_type =
                       CompilerType(GetASTContext(),
-                                   abstract_func_decl->getType().getPointer());
+                                   abstract_func_decl->getInterfaceType().getPointer());
                 }
               } else
                 --idx;
@@ -6608,7 +6556,7 @@ TypeMemberFunctionImpl SwiftASTContext::GetMemberFunctionAtIndex(void *type,
                   }
                   result_type =
                       CompilerType(GetASTContext(),
-                                   abstract_func_decl->getType().getPointer());
+                                   abstract_func_decl->getInterfaceType().getPointer());
                 }
               } else
                 --idx;
@@ -6878,7 +6826,6 @@ uint64_t SwiftASTContext::GetBitSize(lldb::opaque_compiler_type_t type,
     case swift::TypeKind::Archetype:
     case swift::TypeKind::LValue:
     case swift::TypeKind::UnboundGeneric:
-    case swift::TypeKind::PolymorphicFunction:
     case swift::TypeKind::GenericFunction:
     case swift::TypeKind::Function:
       return GetPointerByteSize() * 8;
@@ -6963,7 +6910,6 @@ lldb::Encoding SwiftASTContext::GetEncoding(void *type, uint64_t &count) {
   case swift::TypeKind::Optional:
   case swift::TypeKind::ImplicitlyUnwrappedOptional:
   case swift::TypeKind::GenericTypeParam:
-  case swift::TypeKind::AssociatedType:
   case swift::TypeKind::DependentMember:
     break;
 
@@ -6971,7 +6917,6 @@ lldb::Encoding SwiftASTContext::GetEncoding(void *type, uint64_t &count) {
   case swift::TypeKind::Metatype:
     return lldb::eEncodingUint;
 
-  case swift::TypeKind::PolymorphicFunction:
   case swift::TypeKind::GenericFunction:
   case swift::TypeKind::Function:
     return lldb::eEncodingUint;
@@ -7057,7 +7002,6 @@ lldb::Format SwiftASTContext::GetFormat(void *type) {
   case swift::TypeKind::Optional:
   case swift::TypeKind::ImplicitlyUnwrappedOptional:
   case swift::TypeKind::GenericTypeParam:
-  case swift::TypeKind::AssociatedType:
   case swift::TypeKind::DependentMember:
     break;
 
@@ -7065,7 +7009,6 @@ lldb::Format SwiftASTContext::GetFormat(void *type) {
   case swift::TypeKind::BoundGenericEnum:
     return eFormatUnsigned;
 
-  case swift::TypeKind::PolymorphicFunction:
   case swift::TypeKind::GenericFunction:
   case swift::TypeKind::Function:
     return lldb::eFormatAddressInfo;
@@ -7124,7 +7067,6 @@ uint32_t SwiftASTContext::GetNumChildren(void *type,
   case swift::TypeKind::Substituted:
   case swift::TypeKind::Function:
   case swift::TypeKind::GenericFunction:
-  case swift::TypeKind::PolymorphicFunction:
   case swift::TypeKind::DynamicSelf:
   case swift::TypeKind::SILBox:
   case swift::TypeKind::SILFunction:
@@ -7147,7 +7089,6 @@ uint32_t SwiftASTContext::GetNumChildren(void *type,
   case swift::TypeKind::Optional:
   case swift::TypeKind::ImplicitlyUnwrappedOptional:
   case swift::TypeKind::GenericTypeParam:
-  case swift::TypeKind::AssociatedType:
   case swift::TypeKind::DependentMember:
     break;
 
@@ -7287,7 +7228,6 @@ uint32_t SwiftASTContext::GetNumFields(void *type) {
                             .getPointer())
         .GetNumFields();
   case swift::TypeKind::GenericTypeParam:
-  case swift::TypeKind::AssociatedType:
   case swift::TypeKind::DependentMember:
   case swift::TypeKind::Optional:
   case swift::TypeKind::ImplicitlyUnwrappedOptional:
@@ -7337,7 +7277,6 @@ uint32_t SwiftASTContext::GetNumFields(void *type) {
   case swift::TypeKind::Substituted:
   case swift::TypeKind::Function:
   case swift::TypeKind::GenericFunction:
-  case swift::TypeKind::PolymorphicFunction:
   case swift::TypeKind::ArraySlice:
   case swift::TypeKind::LValue:
   case swift::TypeKind::UnboundGeneric:
@@ -7420,7 +7359,6 @@ CompilerType SwiftASTContext::GetFieldAtIndex(void *type, size_t idx,
         .GetFieldAtIndex(idx, name, bit_offset_ptr, bitfield_bit_size_ptr,
                          is_bitfield_ptr);
   case swift::TypeKind::GenericTypeParam:
-  case swift::TypeKind::AssociatedType:
   case swift::TypeKind::DependentMember:
   case swift::TypeKind::Optional:
   case swift::TypeKind::ImplicitlyUnwrappedOptional:
@@ -7493,7 +7431,6 @@ CompilerType SwiftASTContext::GetFieldAtIndex(void *type, size_t idx,
   case swift::TypeKind::Substituted:
   case swift::TypeKind::Function:
   case swift::TypeKind::GenericFunction:
-  case swift::TypeKind::PolymorphicFunction:
   case swift::TypeKind::ArraySlice:
   case swift::TypeKind::LValue:
   case swift::TypeKind::UnboundGeneric:
@@ -7560,8 +7497,6 @@ uint32_t SwiftASTContext::GetNumPointeeChildren(void *type) {
     return 0;
   case swift::TypeKind::GenericTypeParam:
     return 0;
-  case swift::TypeKind::AssociatedType:
-    return 0;
   case swift::TypeKind::DependentMember:
     return 0;
   case swift::TypeKind::Optional:
@@ -7590,8 +7525,6 @@ uint32_t SwiftASTContext::GetNumPointeeChildren(void *type) {
     return 0;
   case swift::TypeKind::GenericFunction:
     return 0;
-  case swift::TypeKind::PolymorphicFunction:
-    return 0;
   case swift::TypeKind::ArraySlice:
     return 0;
   case swift::TypeKind::ProtocolComposition:
@@ -7927,7 +7860,6 @@ CompilerType SwiftASTContext::GetChildCompilerTypeAtIndex(
             child_is_base_class, child_is_deref_of_parent, valobj,
             language_flags);
   case swift::TypeKind::GenericTypeParam:
-  case swift::TypeKind::AssociatedType:
   case swift::TypeKind::DependentMember:
   case swift::TypeKind::Optional:
   case swift::TypeKind::ImplicitlyUnwrappedOptional:
@@ -8022,7 +7954,6 @@ CompilerType SwiftASTContext::GetChildCompilerTypeAtIndex(
   case swift::TypeKind::Substituted:
   case swift::TypeKind::Function:
   case swift::TypeKind::GenericFunction:
-  case swift::TypeKind::PolymorphicFunction:
   case swift::TypeKind::ArraySlice:
     break;
   case swift::TypeKind::LValue:
@@ -8134,7 +8065,6 @@ size_t SwiftASTContext::GetIndexOfChildMemberWithName(
           .GetIndexOfChildMemberWithName(name, omit_empty_base_classes,
                                          child_indexes);
     case swift::TypeKind::GenericTypeParam:
-    case swift::TypeKind::AssociatedType:
     case swift::TypeKind::DependentMember:
     case swift::TypeKind::Optional:
     case swift::TypeKind::ImplicitlyUnwrappedOptional:
@@ -8236,7 +8166,6 @@ size_t SwiftASTContext::GetIndexOfChildMemberWithName(
     case swift::TypeKind::Substituted:
     case swift::TypeKind::Function:
     case swift::TypeKind::GenericFunction:
-    case swift::TypeKind::PolymorphicFunction:
     case swift::TypeKind::ArraySlice:
       break;
     case swift::TypeKind::LValue: {
@@ -8304,7 +8233,6 @@ SwiftASTContext::GetIndexOfChildWithName(void *type, const char *name,
                               .getPointer())
           .GetIndexOfChildWithName(name, omit_empty_base_classes);
     case swift::TypeKind::GenericTypeParam:
-    case swift::TypeKind::AssociatedType:
     case swift::TypeKind::DependentMember:
     case swift::TypeKind::Optional:
     case swift::TypeKind::ImplicitlyUnwrappedOptional:
@@ -8386,7 +8314,6 @@ SwiftASTContext::GetIndexOfChildWithName(void *type, const char *name,
     case swift::TypeKind::Substituted:
     case swift::TypeKind::Function:
     case swift::TypeKind::GenericFunction:
-    case swift::TypeKind::PolymorphicFunction:
     case swift::TypeKind::ArraySlice:
       break;
     case swift::TypeKind::LValue: {
@@ -8445,13 +8372,6 @@ size_t SwiftASTContext::GetNumTemplateArguments(void *type) {
       break;
     return bound_generic_type->getGenericArgs().size();
   }
-  case swift::TypeKind::PolymorphicFunction: {
-    swift::PolymorphicFunctionType *polymorhpic_func_type =
-        swift_can_type->getAs<swift::PolymorphicFunctionType>();
-    if (!polymorhpic_func_type)
-      break;
-    return polymorhpic_func_type->getGenericParameters().size();
-  } break;
   default:
     break;
   }
@@ -8592,30 +8512,12 @@ SwiftASTContext::GetTemplateArgument(void *type, size_t arg_idx,
           swift_can_type->getAs<swift::BoundGenericType>();
       if (!bound_generic_type)
         break;
-      const llvm::ArrayRef<swift::Substitution> &substitutions =
-          bound_generic_type->gatherAllSubstitutions(nullptr, nullptr);
-      if (arg_idx >= substitutions.size())
+      if (arg_idx >= bound_generic_type->getGenericArgs().size())
         break;
       kind = eTemplateArgumentKindType;
-      const swift::Substitution &substitution = substitutions[arg_idx];
       return CompilerType(GetASTContext(),
-                          substitution.getReplacement().getPointer());
+                          bound_generic_type->getGenericArgs()[arg_idx].getPointer());
     }
-    case swift::TypeKind::PolymorphicFunction: {
-      swift::PolymorphicFunctionType *polymorphic_func_type =
-          swift_can_type->getAs<swift::PolymorphicFunctionType>();
-      if (!polymorphic_func_type)
-        break;
-      if (arg_idx >= polymorphic_func_type->getGenericParameters().size())
-        break;
-      auto paramDecl = polymorphic_func_type->getGenericParameters()[arg_idx];
-      auto paramType = paramDecl->getDeclaredInterfaceType()
-          ->castTo<swift::GenericTypeParamType>();
-      return CompilerType(
-          GetASTContext(),
-          swift::ArchetypeBuilder::mapTypeIntoContext(
-              paramDecl->getDeclContext(), paramType).getPointer());
-    } break;
     default:
       break;
     }
@@ -8711,7 +8613,6 @@ bool SwiftASTContext::DumpTypeValue(
   case swift::TypeKind::Archetype:
   case swift::TypeKind::Function:
   case swift::TypeKind::GenericFunction:
-  case swift::TypeKind::PolymorphicFunction:
   case swift::TypeKind::LValue: {
     uint32_t item_count = 1;
     // A few formats, we might need to modify our size and count for depending
@@ -8841,7 +8742,6 @@ bool SwiftASTContext::DumpTypeValue(
   case swift::TypeKind::Struct:
   case swift::TypeKind::Protocol:
   case swift::TypeKind::GenericTypeParam:
-  case swift::TypeKind::AssociatedType:
   case swift::TypeKind::DependentMember:
     return false;
 
@@ -9021,11 +8921,9 @@ void SwiftASTContext::DumpTypeDescription(void *type, Stream *s,
                   llvm::dyn_cast_or_null<swift::TypeDecl>(decl);
               if (type_decl) {
                 CompilerType clang_type(&module->getASTContext(),
-                                        type_decl->getType().getPointer());
+                                        type_decl->getDeclaredInterfaceType().getPointer());
                 if (clang_type) {
                   Flags clang_type_flags(clang_type.GetTypeInfo());
-                  if (clang_type_flags.AllSet(eTypeIsSwift | eTypeIsMetatype))
-                    clang_type = clang_type.GetInstanceType();
                   DumpTypeDescription(clang_type.GetOpaqueQualType(), s,
                                       print_help_if_available,
                                       print_extensions_if_available);
@@ -9059,7 +8957,7 @@ void SwiftASTContext::DumpTypeDescription(void *type, Stream *s,
                             llvm::dyn_cast_or_null<swift::ValueDecl>(
                                 imported_decl)) {
                       if (swift::TypeBase *decl_type =
-                              imported_value_decl->getType().getPointer()) {
+                              imported_value_decl->getInterfaceType().getPointer()) {
                         DumpTypeDescription(decl_type, s,
                                             print_help_if_available,
                                             print_extensions_if_available);
@@ -9096,7 +8994,6 @@ void SwiftASTContext::DumpTypeDescription(void *type, Stream *s,
         }
       }
     } break;
-    case swift::TypeKind::PolymorphicFunction:
     case swift::TypeKind::GenericFunction:
     case swift::TypeKind::Function: {
       swift::AnyFunctionType *any_function_type =
diff --git a/source/Target/SwiftLanguageRuntime.cpp b/source/Target/SwiftLanguageRuntime.cpp
index 90274d4f8..2cf00e399 100644
--- a/source/Target/SwiftLanguageRuntime.cpp
+++ b/source/Target/SwiftLanguageRuntime.cpp
@@ -2065,7 +2065,7 @@ SwiftLanguageRuntime::DoArchetypeBindingForType(StackFrame &stack_frame,
                     llvm::dyn_cast_or_null<swift::ArchetypeType>(
                         candidate_type.getPointer())) {
               llvm::StringRef candidate_name =
-                  candidate_archetype->getName().str();
+                  candidate_archetype->getFullName();
 
               CompilerType concrete_type = this->GetConcreteType(
                   &stack_frame, ConstString(candidate_name));
diff --git a/source/lldb.cpp b/source/lldb.cpp
index 42417ff5f..9be93ddf6 100644
--- a/source/lldb.cpp
+++ b/source/lldb.cpp
@@ -8,33 +8,22 @@
 //===----------------------------------------------------------------------===//
 
 #include "lldb/lldb-private.h"
+#include "llvm/ADT/StringExtras.h"
 
 using namespace lldb;
 using namespace lldb_private;
 
-#if defined(__APPLE__) && !defined(LLDB_REVISION)
-// Xcode writes this file out in a build step.
-// cmake builds get this through another mechanism.
-// Both produce LLDB_REVISION.
-#include "lldb_revision.h"
-extern "C" const unsigned char liblldb_coreVersionString[];
-#endif
-
-#if defined(LLDB_USE_OSS_VERSION_SCHEME)
-
-#include "swift/Basic/Version.h"
-#include "llvm/Support/raw_ostream.h"
-
-#endif
-
-#if !defined(__APPLE__) || defined(LLDB_USE_OSS_VERSION_SCHEME)
-
 #include "clang/Basic/Version.h"
+#include "swift/Basic/Version.h"
 
 #ifdef HAVE_SVN_VERSION_INC
 #  include "SVNVersion.inc"
 #endif
 
+#ifdef HAVE_APPLE_VERSION_INC
+#  include "AppleVersion.inc"
+#endif
+
 static const char *GetLLDBRevision() {
 #ifdef LLDB_REVISION
   static const char *s_revision = LLDB_REVISION;
@@ -52,10 +41,6 @@ static const char *GetLLDBRevision() {
     return "";
 }
 
-#endif
-
-#if !defined(__APPLE__)
-
 static const char *GetLLDBRepository() {
 #ifdef LLDB_REPOSITORY
   return LLDB_REPOSITORY;
@@ -64,170 +49,69 @@ static const char *GetLLDBRepository() {
 #endif
 }
 
-#endif
-
-#if defined(LLDB_USE_OSS_VERSION_SCHEME)
-
-// TODO remove this function once swift revision is directly exposed.
-std::string ExtractSwiftRevision(const std::string &fullVersion) {
-  // Find spot right before Swift revision.
-  const std::string search_prefix = "Swift ";
-  const size_t prefix_start_pos = fullVersion.rfind(search_prefix);
-  if (prefix_start_pos == std::string::npos)
-    return "";
-
-  // Find spot where Swift revision ends.
-  const size_t revision_end_pos = fullVersion.rfind(')');
-  if (revision_end_pos == std::string::npos)
-    return "";
-
-  // Return the revision.
-  return fullVersion.substr(prefix_start_pos + search_prefix.length(),
-                            revision_end_pos - prefix_start_pos -
-                                search_prefix.length());
-}
-
+#if LLDB_IS_BUILDBOT_BUILD
 static std::string GetBuildDate() {
-// The following code helps distinguish between a defined preprocessor
-// value that gets the default value assigned vs. one with an explicit value.
-#define LLDB_DO_MACRO_EXPAND(macro_value) macro_value##1
-#define LLDB_MACRO_EXPAND(macro_value) LLDB_DO_MACRO_EXPAND(macro_value)
-
 #if defined(LLDB_BUILD_DATE)
   return std::string(LLDB_BUILD_DATE);
 #else
   return std::string();
 #endif
 }
-
-static const char *_GetVersionOSS() {
-  static std::string g_version_string;
-  if (g_version_string.empty()) {
-    std::string build_string;
-    llvm::raw_string_ostream out(build_string);
-
-    std::string build_flavor = "local";
-#if defined(LLDB_IS_BUILDBOT_BUILD)
-#if (LLDB_IS_BUILDBOT_BUILD != 0)
-    build_flavor = "buildbot";
-#endif
 #endif
-    out << "lldb-" << build_flavor;
 
-    // We only run this code when the build date is both set and non-default.
-    // Otherwise this code doesn't compile.
-    const std::string build_date(GetBuildDate());
-    if (!build_date.empty())
-      out << "-" << build_date;
-
-    out << " (";
-
-    std::string lldb_revision = GetLLDBRevision();
-    if (lldb_revision.length() > 0) {
-      const size_t MAX_REVISION_LENGTH = 10;
-
-      out << "LLDB ";
-      out << lldb_revision.substr(0, MAX_REVISION_LENGTH);
-
-      const std::string llvm_revision = clang::getLLVMRevision();
-      if (!llvm_revision.empty())
-        out << ", LLVM " << llvm_revision.substr(0, MAX_REVISION_LENGTH);
-
-      const std::string clang_revision = clang::getClangRevision();
-      if (!clang_revision.empty())
-        out << ", Clang " << clang_revision.substr(0, MAX_REVISION_LENGTH);
-
-      // TODO replace this with a swift::version::GetSwiftRevision() call
-      // once added.
-      const std::string swift_revision =
-          ExtractSwiftRevision(swift::version::getSwiftFullVersion());
-      if (!swift_revision.empty()) {
-        auto const swift_version = swift::version::getSwiftNumericVersion();
-        out << ", Swift-" << swift_version.first << "." << swift_version.second
-            << " " << swift_revision.substr(0, MAX_REVISION_LENGTH);
-      }
-    }
-    out << ")";
-
-    g_version_string = out.str();
-  }
-  return g_version_string.c_str();
-}
-
-#endif
-
-#if defined(__APPLE__) && !defined(LLDB_USE_OSS_VERSION_SCHEME)
-
-static const char *_GetVersionAppleStandard() {
-  static char g_version_string[32];
-  if (g_version_string[0] == '\0') {
-    const char *version_string =
-        ::strstr((const char *)liblldb_coreVersionString, "PROJECT:");
-
-    if (version_string)
-      version_string += sizeof("PROJECT:") - 1;
-    else
-      version_string = "unknown";
-
-    const char *newline_loc = strchr(version_string, '\n');
-
-    size_t version_len = sizeof(g_version_string) - 1;
-
-    if (newline_loc &&
-        (newline_loc - version_string < static_cast<ptrdiff_t>(version_len)))
-      version_len = newline_loc - version_string;
-
-    ::snprintf(g_version_string, version_len + 1, "%s", version_string);
-  }
-
-  return g_version_string;
-}
-
-#endif
+#define QUOTE(str) #str
+#define EXPAND_AND_QUOTE(str) QUOTE(str)
 
 const char *lldb_private::GetVersion() {
-#if defined(__APPLE__)
-#if defined(LLDB_USE_OSS_VERSION_SCHEME)
-  return _GetVersionOSS();
-#else
-  return _GetVersionAppleStandard();
-#endif
-#else
-#if defined(LLDB_USE_OSS_VERSION_SCHEME)
-  return _GetVersionOSS();
-#else
   // On platforms other than Darwin, report a version number in the same style
   // as the clang tool.
   static std::string g_version_str;
   if (g_version_str.empty()) {
+
+#ifdef LLDB_VERSION_STRING
+    g_version_str += EXPAND_AND_QUOTE(LLDB_VERSION_STRING);
+#else
     g_version_str += "lldb version ";
     g_version_str += CLANG_VERSION_STRING;
+#endif
     const char *lldb_repo = GetLLDBRepository();
-    if (lldb_repo) {
+    const char *lldb_rev = GetLLDBRevision();
+    if (lldb_repo || lldb_rev) {
       g_version_str += " (";
-      g_version_str += lldb_repo;
+      if (lldb_repo)
+        g_version_str += lldb_repo;
+      if (lldb_rev) {
+        g_version_str += " revision ";
+        g_version_str += lldb_rev;
+      }
+      g_version_str += ")";
     }
+    
+#if LLDB_IS_BUILDBOT_BUILD
+    std::string build_date = GetBuildDate();
+    if(!build_date.empty())
+      g_version_str += " (buildbot " + build_date + ")";
+#endif
 
-    const char *lldb_rev = GetLLDBRevision();
-    if (lldb_rev) {
-      g_version_str += " revision ";
-      g_version_str += lldb_rev;
+    auto const swift_version = swift::version::getSwiftNumericVersion();
+    g_version_str += "\n  Swift-";
+    g_version_str += llvm::utostr(swift_version.first) + ".";
+    g_version_str += llvm::utostr(swift_version.second);
+    std::string swift_rev(swift::version::getSwiftRevision());
+    if (swift_rev.length() > 0) {
+      g_version_str += " (revision " + swift_rev + ")";
     }
+
     std::string clang_rev(clang::getClangRevision());
     if (clang_rev.length() > 0) {
-      g_version_str += " clang revision ";
+      g_version_str += "\n  clang revision ";
       g_version_str += clang_rev;
     }
     std::string llvm_rev(clang::getLLVMRevision());
     if (llvm_rev.length() > 0) {
-      g_version_str += " llvm revision ";
+      g_version_str += "\n  llvm revision ";
       g_version_str += llvm_rev;
     }
-
-    if (lldb_repo)
-      g_version_str += ")";
   }
   return g_version_str.c_str();
-#endif
-#endif
 }
