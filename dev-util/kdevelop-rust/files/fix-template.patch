diff --git a/duchain/contextbuilder.cpp b/duchain/contextbuilder.cpp
index 6aa5577..07d4934 100644
--- a/duchain/contextbuilder.cpp
+++ b/duchain/contextbuilder.cpp
@@ -5,7 +5,6 @@
 #include <interfaces/idocumentcontroller.h>
 
 #include "rustducontext.h"
-#include "nodetraits.h"
 
 namespace Rust
 {
@@ -63,23 +62,6 @@ RSVisitResult ContextBuilder::visitNode(RustNode *node, RustNode *parent)
     return Recurse;
 }
 
-template <RSNodeKind Kind>
-RSVisitResult ContextBuilder::buildContext(RustNode *node, RustNode *parent)
-{
-    Q_UNUSED(parent);
-
-    constexpr bool hasContext = NodeTraits::hasContext(Kind);
-    RustPath name(node);
-
-    if (hasContext) {
-        openContext(node, NodeTraits::contextType(Kind), &name);
-        visitChildren(node);
-        closeContext();
-        return Continue;
-    }
-    return Recurse;
-}
-
 void ContextBuilder::visitChildren(RustNode *node)
 {
     visit_children(node->data(), visitCallback, this);
diff --git a/duchain/contextbuilder.h b/duchain/contextbuilder.h
index 4ac4db6..3e4e215 100644
--- a/duchain/contextbuilder.h
+++ b/duchain/contextbuilder.h
@@ -5,6 +5,7 @@
 
 #include "rustnode.h"
 #include "parsesession.h"
+#include "nodetraits.h"
 
 #include "kdevrustduchain_export.h"
 
@@ -24,8 +25,22 @@ public:
 protected:
     KDevelop::RangeInRevision editorFindSpellingRange(RustNode *node, const QString &identifier);
 
-    template <RSNodeKind>
-    RSVisitResult buildContext(RustNode *node, RustNode *parent);
+    template <RSNodeKind Kind>
+    RSVisitResult buildContext(RustNode *node, RustNode *parent)
+    {
+        Q_UNUSED(parent);
+
+        constexpr bool hasContext = NodeTraits::hasContext(Kind);
+        RustPath name(node);
+
+        if (hasContext) {
+            openContext(node, NodeTraits::contextType(Kind), &name);
+            visitChildren(node);
+            closeContext();
+            return Continue;
+        }
+        return Recurse;
+    }
 
     template<RSNodeKind Kind>
     KDevelop::DUContext *createContext(RSNode *node, const KDevelop::QualifiedIdentifier& scopeId);
diff --git a/duchain/rustnode.cpp b/duchain/rustnode.cpp
index a85fcc6..d3c19d4 100644
--- a/duchain/rustnode.cpp
+++ b/duchain/rustnode.cpp
@@ -28,29 +28,4 @@ RustNode::~RustNode()
 {
 }
 
-template<typename RustObjectType, void (*RustDestructor)(RustObjectType *)>
-RustAllocatedObject<RustObjectType, RustDestructor>::RustAllocatedObject(RustObjectType *object)
-    : object(object)
-{
-}
-
-template<typename RustObjectType, void (*RustDestructor)(RustObjectType *)>
-RustAllocatedObject<RustObjectType, RustDestructor>::~RustAllocatedObject()
-{
-    RustDestructor(object);
-    object = nullptr;
-}
-
-template<typename RustObjectType, void (*RustDestructor)(RustObjectType *)>
-RustObjectType *RustAllocatedObject<RustObjectType, RustDestructor>::data()
-{
-    return object;
-}
-
-template<typename RustObjectType, void (*RustDestructor)(RustObjectType *)>
-RustObjectType *RustAllocatedObject<RustObjectType, RustDestructor>::operator *()
-{
-    return object;
-}
-
 }
diff --git a/duchain/rustnode.h b/duchain/rustnode.h
index c2bd6be..8ac1576 100644
--- a/duchain/rustnode.h
+++ b/duchain/rustnode.h
@@ -14,11 +14,21 @@ template <typename RustObjectType, void (*RustDestructor)(RustObjectType *)>
 class KDEVRUSTDUCHAIN_EXPORT RustAllocatedObject
 {
 public:
-    RustAllocatedObject(RustObjectType *object);
-    ~RustAllocatedObject();
+    RustAllocatedObject(RustObjectType *object) : object(object) {}
+    ~RustAllocatedObject()
+    {
+        RustDestructor(object);
+        object = nullptr;
+    }
 
-    RustObjectType *data();
-    RustObjectType *operator *();
+    RustObjectType *data()
+    {
+        return object;
+    }
+    RustObjectType *operator *()
+    {
+        return object;
+    }
 
 private:
     RustObjectType *object;
