--- b/crates/proc-macro-srv/src/server_impl/rust_analyzer_span.rs
+++ a/crates/proc-macro-srv/src/server_impl/rust_analyzer_span.rs
@@ -11,7 +11,7 @@
 
 use intern::Symbol;
 use proc_macro::bridge::{self, server};
-use span::{FIXUP_ERASED_FILE_AST_ID_MARKER, Span};
+use span::{FileId, Span, FIXUP_ERASED_FILE_AST_ID_MARKER};
 use tt::{TextRange, TextSize};
 
 use crate::server_impl::{TopSubtree, literal_kind_to_internal, token_stream::TokenStreamBuilder};
@@ -27,6 +27,10 @@
 
 type TokenStream = crate::server_impl::TokenStream<Span>;
 
+#[derive(Copy, Clone, PartialEq, Eq, Debug)]
+pub struct SourceFile {
+    file_id: FileId,
+}
 pub struct FreeFunctions;
 
 pub struct RaSpanServer {
@@ -42,6 +46,7 @@
 impl server::Types for RaSpanServer {
     type FreeFunctions = FreeFunctions;
     type TokenStream = TokenStream;
+    type SourceFile = SourceFile;
     type Span = Span;
     type Symbol = Symbol;
 }
@@ -240,17 +245,25 @@
     }
 }
 
+impl server::SourceFile for RaSpanServer {
+    fn eq(&mut self, file1: &Self::SourceFile, file2: &Self::SourceFile) -> bool {
+        file1 == file2
+    }
+    fn path(&mut self, _file: &Self::SourceFile) -> String {
+        // FIXME
+        String::new()
+    }
+    fn is_real(&mut self, _file: &Self::SourceFile) -> bool {
+        true
+    }
+}
+
 impl server::Span for RaSpanServer {
     fn debug(&mut self, span: Self::Span) -> String {
         format!("{:?}", span)
     }
+    fn source_file(&mut self, span: Self::Span) -> Self::SourceFile {
+        SourceFile { file_id: span.anchor.file_id.file_id() }
-    fn file(&mut self, _: Self::Span) -> String {
-        // FIXME
-        String::new()
-    }
-    fn local_file(&mut self, _: Self::Span) -> Option<String> {
-        // FIXME
-        None
     }
     fn save_span(&mut self, _span: Self::Span) -> usize {
         // FIXME, quote is incompatible with third-party tools
--- b/crates/proc-macro-srv/src/server_impl/token_id.rs
+++ a/crates/proc-macro-srv/src/server_impl/token_id.rs
@@ -24,6 +24,8 @@
 type Span = tt::TokenId;
 type TokenStream = crate::server_impl::TokenStream<Span>;
 
+#[derive(Clone)]
+pub struct SourceFile;
 pub struct FreeFunctions;
 
 pub struct TokenIdServer {
@@ -35,6 +37,7 @@
 impl server::Types for TokenIdServer {
     type FreeFunctions = FreeFunctions;
     type TokenStream = TokenStream;
+    type SourceFile = SourceFile;
     type Span = Span;
     type Symbol = Symbol;
 }
@@ -220,15 +223,24 @@
     }
 }
 
+impl server::SourceFile for TokenIdServer {
+    fn eq(&mut self, _file1: &Self::SourceFile, _file2: &Self::SourceFile) -> bool {
+        true
+    }
+    fn path(&mut self, _file: &Self::SourceFile) -> String {
+        String::new()
+    }
+    fn is_real(&mut self, _file: &Self::SourceFile) -> bool {
+        true
+    }
+}
+
 impl server::Span for TokenIdServer {
     fn debug(&mut self, span: Self::Span) -> String {
         format!("{:?}", span.0)
     }
+    fn source_file(&mut self, _span: Self::Span) -> Self::SourceFile {
+        SourceFile {}
-    fn file(&mut self, _span: Self::Span) -> String {
-        String::new()
-    }
-    fn local_file(&mut self, _span: Self::Span) -> Option<String> {
-        None
     }
     fn save_span(&mut self, _span: Self::Span) -> usize {
         0
