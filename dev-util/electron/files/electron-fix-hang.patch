From 28900a9b637c4828e8bbdef472fe43ce05b2c6f3 Mon Sep 17 00:00:00 2001
From: Samuel Attard <samuel.r.attard@gmail.com>
Date: Thu, 14 Sep 2017 22:33:13 +1000
Subject: [PATCH 1/7] Fix app.makeSingleInstance hanging on posix systems

Wait for the IO thread to be a thing before attempting to listen on the socket

Fixes #9880
---
 atom/browser/api/atom_api_app.cc                   |  4 +++
 chromium_src/chrome/browser/process_singleton.h    |  4 +++
 .../chrome/browser/process_singleton_posix.cc      | 30 +++++++++++++++++-----
 .../chrome/browser/process_singleton_win.cc        |  3 +++
 4 files changed, 35 insertions(+), 6 deletions(-)

diff --git a/atom/browser/api/atom_api_app.cc b/atom/browser/api/atom_api_app.cc
index 4f48d7a4fb..3f0f952296 100644
--- a/atom/browser/api/atom_api_app.cc
+++ b/atom/browser/api/atom_api_app.cc
@@ -577,6 +577,10 @@ void App::OnFinishLaunching(const base::DictionaryValue& launch_info) {
   media::AudioManager::SetGlobalAppName(Browser::Get()->GetName());
 #endif
   Emit("ready", launch_info);
+
+  if (process_singleton_) {
+    process_singleton_->OnBrowserReady();
+  }
 }
 
 void App::OnAccessibilitySupportChanged() {
diff --git a/chromium_src/chrome/browser/process_singleton.h b/chromium_src/chrome/browser/process_singleton.h
index eab6c35479..d77f5b41df 100644
--- a/chromium_src/chrome/browser/process_singleton.h
+++ b/chromium_src/chrome/browser/process_singleton.h
@@ -74,6 +74,8 @@ class ProcessSingleton : public base::NonThreadSafe {
   // TODO(brettw): Make the implementation of this method non-platform-specific
   // by making Linux re-use the Windows implementation.
   NotifyResult NotifyOtherProcessOrCreate();
+  void StartListeningOnSocket();
+  void OnBrowserReady();
 
   // Sets ourself up as the singleton instance.  Returns true on success.  If
   // false is returned, we are not the singleton instance and the caller must
@@ -173,6 +175,8 @@ class ProcessSingleton : public base::NonThreadSafe {
   // because it posts messages between threads.
   class LinuxWatcher;
   scoped_refptr<LinuxWatcher> watcher_;
+  int sock_;
+  bool listen_on_ready_ = false;
 #endif
 
   DISALLOW_COPY_AND_ASSIGN(ProcessSingleton);
diff --git a/chromium_src/chrome/browser/process_singleton_posix.cc b/chromium_src/chrome/browser/process_singleton_posix.cc
index e1e25cf91d..5c7c7cccde 100644
--- a/chromium_src/chrome/browser/process_singleton_posix.cc
+++ b/chromium_src/chrome/browser/process_singleton_posix.cc
@@ -55,6 +55,7 @@
 
 #include <stddef.h>
 
+#include "atom/browser/browser.h"
 #include "atom/common/atom_command_line.h"
 
 #include "base/base_paths.h"
@@ -881,6 +882,22 @@ ProcessSingleton::NotifyResult ProcessSingleton::NotifyOtherProcessOrCreate() {
       base::TimeDelta::FromSeconds(kTimeoutInSeconds));
 }
 
+void ProcessSingleton::StartListeningOnSocket() {
+  BrowserThread::PostTask(
+      BrowserThread::IO,
+      FROM_HERE,
+      base::Bind(&ProcessSingleton::LinuxWatcher::StartListening,
+                 watcher_,
+                 sock_));
+}
+
+void ProcessSingleton::OnBrowserReady() {
+  if (listen_on_ready_) {
+    StartListeningOnSocket();
+    listen_on_ready_ = false;
+  }
+}
+
 ProcessSingleton::NotifyResult
 ProcessSingleton::NotifyOtherProcessWithTimeoutOrCreate(
     const base::CommandLine& command_line,
@@ -1032,12 +1049,13 @@ bool ProcessSingleton::Create() {
     NOTREACHED() << "listen failed: " << base::safe_strerror(errno);
 
   DCHECK(BrowserThread::IsMessageLoopValid(BrowserThread::IO));
-  BrowserThread::PostTask(
-      BrowserThread::IO,
-      FROM_HERE,
-      base::Bind(&ProcessSingleton::LinuxWatcher::StartListening,
-                 watcher_,
-                 sock));
+  sock_ = sock;
+
+  if (atom::Browser::Get()->is_ready()) {
+    StartListeningOnSocket();
+  } else {
+    listen_on_ready_ = true;
+  }
 
   return true;
 }
diff --git a/chromium_src/chrome/browser/process_singleton_win.cc b/chromium_src/chrome/browser/process_singleton_win.cc
index b488ad4576..cce6054d12 100644
--- a/chromium_src/chrome/browser/process_singleton_win.cc
+++ b/chromium_src/chrome/browser/process_singleton_win.cc
@@ -258,6 +258,9 @@ ProcessSingleton::NotifyOtherProcessOrCreate() {
   return result;
 }
 
+void ProcessSingleton::StartListeningOnSocket() {}
+void ProcessSingleton::OnBrowserReady() {}
+
 // Look for a Chrome instance that uses the same profile directory. If there
 // isn't one, create a message window with its title set to the profile
 // directory path.

From f928a399ae4a7e7d3025feb5edd801ec7ded9c40 Mon Sep 17 00:00:00 2001
From: Samuel Attard <samuel.r.attard@gmail.com>
Date: Thu, 14 Sep 2017 23:08:18 +1000
Subject: [PATCH 2/7] Move OnBrowserReady call to PreMainMessageLoopRun to
 account for timing issues on macOS

---
 atom/browser/api/atom_api_app.cc        | 7 +++++++
 atom/browser/api/atom_api_app.h         | 4 ++++
 atom/browser/atom_browser_main_parts.cc | 3 +++
 3 files changed, 14 insertions(+)

diff --git a/atom/browser/api/atom_api_app.cc b/atom/browser/api/atom_api_app.cc
index 3f0f952296..c8b937098b 100644
--- a/atom/browser/api/atom_api_app.cc
+++ b/atom/browser/api/atom_api_app.cc
@@ -522,6 +522,7 @@ App::App(v8::Isolate* isolate) {
           base::ProcessMetrics::CreateCurrentProcessMetrics()));
   app_metrics_[pid] = std::move(process_metric);
   Init(isolate);
+  App::self_ = this;
 }
 
 App::~App() {
@@ -532,6 +533,10 @@ App::~App() {
   content::BrowserChildProcessObserver::Remove(this);
 }
 
+App* App::Get() {
+  return App::self_;
+}
+
 void App::OnBeforeQuit(bool* prevent_default) {
   *prevent_default = Emit("before-quit");
 }
@@ -577,7 +582,9 @@ void App::OnFinishLaunching(const base::DictionaryValue& launch_info) {
   media::AudioManager::SetGlobalAppName(Browser::Get()->GetName());
 #endif
   Emit("ready", launch_info);
+}
 
+void App::PreMainMessageLoopRun() {
   if (process_singleton_) {
     process_singleton_->OnBrowserReady();
   }
diff --git a/atom/browser/api/atom_api_app.h b/atom/browser/api/atom_api_app.h
index 1134046017..17accf9c18 100644
--- a/atom/browser/api/atom_api_app.h
+++ b/atom/browser/api/atom_api_app.h
@@ -74,6 +74,8 @@ class App : public AtomBrowserClient::Delegate,
   static void BuildPrototype(v8::Isolate* isolate,
                              v8::Local<v8::FunctionTemplate> prototype);
 
+  static App* Get();
+
   // Called when window with disposition needs to be created.
   void OnCreateWindow(
       const GURL& target_url,
@@ -94,10 +96,12 @@ class App : public AtomBrowserClient::Delegate,
   base::FilePath GetAppPath() const;
   void RenderProcessReady(content::RenderProcessHost* host);
   void RenderProcessDisconnected(base::ProcessId host_pid);
+  void PreMainMessageLoopRun();
 
  protected:
   explicit App(v8::Isolate* isolate);
   ~App() override;
+  static App* self_ = nullptr;
 
   // BrowserObserver:
   void OnBeforeQuit(bool* prevent_default) override;
diff --git a/atom/browser/atom_browser_main_parts.cc b/atom/browser/atom_browser_main_parts.cc
index 190898fdef..7d2cf4fc1b 100644
--- a/atom/browser/atom_browser_main_parts.cc
+++ b/atom/browser/atom_browser_main_parts.cc
@@ -4,6 +4,7 @@
 
 #include "atom/browser/atom_browser_main_parts.h"
 
+#include "atom/browser/api/atom_api_app.h"
 #include "atom/browser/api/trackable_object.h"
 #include "atom/browser/atom_access_token_store.h"
 #include "atom/browser/atom_browser_client.h"
@@ -183,6 +184,8 @@ void AtomBrowserMainParts::PreMainMessageLoopRun() {
   std::unique_ptr<base::DictionaryValue> empty_info(new base::DictionaryValue);
   Browser::Get()->DidFinishLaunching(*empty_info);
 #endif
+
+  atom::api::App::Get()->PreMainMessageLoopRun();
 }
 
 bool AtomBrowserMainParts::MainMessageLoopRun(int* result_code) {

From ecbeb0d1171ce41e016e84e9285b82b356b27d99 Mon Sep 17 00:00:00 2001
From: Samuel Attard <samuel.r.attard@gmail.com>
Date: Thu, 14 Sep 2017 23:20:23 +1000
Subject: [PATCH 3/7] Woops, how did that happen ;)

---
 atom/browser/api/atom_api_app.cc | 2 ++
 atom/browser/api/atom_api_app.h  | 2 +-
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/atom/browser/api/atom_api_app.cc b/atom/browser/api/atom_api_app.cc
index c8b937098b..fc946567b1 100644
--- a/atom/browser/api/atom_api_app.cc
+++ b/atom/browser/api/atom_api_app.cc
@@ -533,6 +533,8 @@ App::~App() {
   content::BrowserChildProcessObserver::Remove(this);
 }
 
+App* App::self_ = nullptr;
+
 App* App::Get() {
   return App::self_;
 }
diff --git a/atom/browser/api/atom_api_app.h b/atom/browser/api/atom_api_app.h
index 17accf9c18..82403e9da4 100644
--- a/atom/browser/api/atom_api_app.h
+++ b/atom/browser/api/atom_api_app.h
@@ -101,7 +101,7 @@ class App : public AtomBrowserClient::Delegate,
  protected:
   explicit App(v8::Isolate* isolate);
   ~App() override;
-  static App* self_ = nullptr;
+  static App* self_;
 
   // BrowserObserver:
   void OnBeforeQuit(bool* prevent_default) override;

From 0ab83b301d1616658b29ff3e90579c1c2102f45b Mon Sep 17 00:00:00 2001
From: Samuel Attard <samuel.r.attard@gmail.com>
Date: Sat, 16 Sep 2017 05:33:12 +1000
Subject: [PATCH 4/7] Refactor as per @zcbenz comments

Also fix issue where we run the single instance callback *not* on the UI thread,
this apparently results in a hung process.
---
 atom/browser/api/atom_api_app.cc                       | 16 +++++++---------
 atom/browser/api/atom_api_app.h                        |  4 +---
 atom/browser/atom_browser_main_parts.cc                |  2 +-
 atom/browser/browser.cc                                |  6 ++++++
 atom/browser/browser.h                                 |  2 ++
 atom/browser/browser_observer.h                        |  3 +++
 chromium_src/chrome/browser/process_singleton_posix.cc |  5 ++---
 7 files changed, 22 insertions(+), 16 deletions(-)

diff --git a/atom/browser/api/atom_api_app.cc b/atom/browser/api/atom_api_app.cc
index fc946567b1..d01f3f3749 100644
--- a/atom/browser/api/atom_api_app.cc
+++ b/atom/browser/api/atom_api_app.cc
@@ -407,7 +407,12 @@ bool NotificationCallbackWrapper(
     const base::FilePath& cwd) {
   // Make sure the callback is called after app gets ready.
   if (Browser::Get()->is_ready()) {
-    callback.Run(cmd, cwd);
+    // We definitely want to call this callback on the UI thread
+    content::BrowserThread::PostTask(
+      content::BrowserThread::UI,
+      FROM_HERE,
+      base::Bind(base::IgnoreResult(callback), cmd, cwd)
+    );
   } else {
     scoped_refptr<base::SingleThreadTaskRunner> task_runner(
         base::ThreadTaskRunnerHandle::Get());
@@ -522,7 +527,6 @@ App::App(v8::Isolate* isolate) {
           base::ProcessMetrics::CreateCurrentProcessMetrics()));
   app_metrics_[pid] = std::move(process_metric);
   Init(isolate);
-  App::self_ = this;
 }
 
 App::~App() {
@@ -533,12 +537,6 @@ App::~App() {
   content::BrowserChildProcessObserver::Remove(this);
 }
 
-App* App::self_ = nullptr;
-
-App* App::Get() {
-  return App::self_;
-}
-
 void App::OnBeforeQuit(bool* prevent_default) {
   *prevent_default = Emit("before-quit");
 }
@@ -586,7 +584,7 @@ void App::OnFinishLaunching(const base::DictionaryValue& launch_info) {
   Emit("ready", launch_info);
 }
 
-void App::PreMainMessageLoopRun() {
+void App::OnPreMainMessageLoopRun() {
   if (process_singleton_) {
     process_singleton_->OnBrowserReady();
   }
diff --git a/atom/browser/api/atom_api_app.h b/atom/browser/api/atom_api_app.h
index 82403e9da4..6d54b85a9e 100644
--- a/atom/browser/api/atom_api_app.h
+++ b/atom/browser/api/atom_api_app.h
@@ -74,8 +74,6 @@ class App : public AtomBrowserClient::Delegate,
   static void BuildPrototype(v8::Isolate* isolate,
                              v8::Local<v8::FunctionTemplate> prototype);
 
-  static App* Get();
-
   // Called when window with disposition needs to be created.
   void OnCreateWindow(
       const GURL& target_url,
@@ -101,7 +99,6 @@ class App : public AtomBrowserClient::Delegate,
  protected:
   explicit App(v8::Isolate* isolate);
   ~App() override;
-  static App* self_;
 
   // BrowserObserver:
   void OnBeforeQuit(bool* prevent_default) override;
@@ -116,6 +113,7 @@ class App : public AtomBrowserClient::Delegate,
   void OnLogin(LoginHandler* login_handler,
                const base::DictionaryValue& request_details) override;
   void OnAccessibilitySupportChanged() override;
+  void OnPreMainMessageLoopRun() override;
 #if defined(OS_MACOSX)
   void OnWillContinueUserActivity(
       bool* prevent_default,
diff --git a/atom/browser/atom_browser_main_parts.cc b/atom/browser/atom_browser_main_parts.cc
index 7d2cf4fc1b..89ab75c33c 100644
--- a/atom/browser/atom_browser_main_parts.cc
+++ b/atom/browser/atom_browser_main_parts.cc
@@ -185,7 +185,7 @@ void AtomBrowserMainParts::PreMainMessageLoopRun() {
   Browser::Get()->DidFinishLaunching(*empty_info);
 #endif
 
-  atom::api::App::Get()->PreMainMessageLoopRun();
+  Browser::Get()->PreMainMessageLoopRun();
 }
 
 bool AtomBrowserMainParts::MainMessageLoopRun(int* result_code) {
diff --git a/atom/browser/browser.cc b/atom/browser/browser.cc
index c714dc1f46..1e4bc5e8e7 100644
--- a/atom/browser/browser.cc
+++ b/atom/browser/browser.cc
@@ -171,6 +171,12 @@ void Browser::RequestLogin(
     observer.OnLogin(login_handler, *(request_details.get()));
 }
 
+void Browser::PreMainMessageLoopRun() {
+  for (BrowserObserver& observer : observers_) {
+    observer.OnPreMainMessageLoopRun();
+  }
+}
+
 void Browser::NotifyAndShutdown() {
   if (is_shutdown_)
     return;
diff --git a/atom/browser/browser.h b/atom/browser/browser.h
index 3549d45a8a..b5e31160c8 100644
--- a/atom/browser/browser.h
+++ b/atom/browser/browser.h
@@ -224,6 +224,8 @@ class Browser : public WindowListObserver {
   void RequestLogin(LoginHandler* login_handler,
                     std::unique_ptr<base::DictionaryValue> request_details);
 
+  void PreMainMessageLoopRun();
+
   void AddObserver(BrowserObserver* obs) {
     observers_.AddObserver(obs);
   }
diff --git a/atom/browser/browser_observer.h b/atom/browser/browser_observer.h
index d6b2c9954a..987e37115e 100644
--- a/atom/browser/browser_observer.h
+++ b/atom/browser/browser_observer.h
@@ -55,6 +55,9 @@ class BrowserObserver {
   // The browser's accessibility suppport has changed.
   virtual void OnAccessibilitySupportChanged() {}
 
+  // The app message loop is ready
+  virtual void OnPreMainMessageLoopRun() {}
+
 #if defined(OS_MACOSX)
   // The browser wants to report that an user activity will resume. (macOS only)
   virtual void OnWillContinueUserActivity(
diff --git a/chromium_src/chrome/browser/process_singleton_posix.cc b/chromium_src/chrome/browser/process_singleton_posix.cc
index 5c7c7cccde..6ea5b54527 100644
--- a/chromium_src/chrome/browser/process_singleton_posix.cc
+++ b/chromium_src/chrome/browser/process_singleton_posix.cc
@@ -1048,10 +1048,9 @@ bool ProcessSingleton::Create() {
   if (listen(sock, 5) < 0)
     NOTREACHED() << "listen failed: " << base::safe_strerror(errno);
 
-  DCHECK(BrowserThread::IsMessageLoopValid(BrowserThread::IO));
   sock_ = sock;
-
-  if (atom::Browser::Get()->is_ready()) {
+  
+  if (BrowserThread::IsMessageLoopValid(BrowserThread::IO)) {
     StartListeningOnSocket();
   } else {
     listen_on_ready_ = true;

From 4147fa4629f904830ecc853be74c370c5e083267 Mon Sep 17 00:00:00 2001
From: Samuel Attard <samuel.r.attard@gmail.com>
Date: Sat, 16 Sep 2017 05:36:06 +1000
Subject: [PATCH 5/7] Appease the linting gods

---
 atom/browser/api/atom_api_app.cc | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/atom/browser/api/atom_api_app.cc b/atom/browser/api/atom_api_app.cc
index d01f3f3749..5b482ae8b5 100644
--- a/atom/browser/api/atom_api_app.cc
+++ b/atom/browser/api/atom_api_app.cc
@@ -411,8 +411,7 @@ bool NotificationCallbackWrapper(
     content::BrowserThread::PostTask(
       content::BrowserThread::UI,
       FROM_HERE,
-      base::Bind(base::IgnoreResult(callback), cmd, cwd)
-    );
+      base::Bind(base::IgnoreResult(callback), cmd, cwd));
   } else {
     scoped_refptr<base::SingleThreadTaskRunner> task_runner(
         base::ThreadTaskRunnerHandle::Get());

From b7119b5756089e5c8ed02adfd7476324190f5112 Mon Sep 17 00:00:00 2001
From: Cheng Zhao <zcbenz@gmail.com>
Date: Wed, 20 Sep 2017 11:40:49 +0900
Subject: [PATCH 6/7] Create watcher when message loop is ready

---
 atom/browser/api/atom_api_app.cc                       | 6 +-----
 chromium_src/chrome/browser/process_singleton_posix.cc | 6 +++---
 2 files changed, 4 insertions(+), 8 deletions(-)

diff --git a/atom/browser/api/atom_api_app.cc b/atom/browser/api/atom_api_app.cc
index 5b482ae8b5..37ff0507d7 100644
--- a/atom/browser/api/atom_api_app.cc
+++ b/atom/browser/api/atom_api_app.cc
@@ -407,11 +407,7 @@ bool NotificationCallbackWrapper(
     const base::FilePath& cwd) {
   // Make sure the callback is called after app gets ready.
   if (Browser::Get()->is_ready()) {
-    // We definitely want to call this callback on the UI thread
-    content::BrowserThread::PostTask(
-      content::BrowserThread::UI,
-      FROM_HERE,
-      base::Bind(base::IgnoreResult(callback), cmd, cwd));
+    callback.Run(cmd, cwd);
   } else {
     scoped_refptr<base::SingleThreadTaskRunner> task_runner(
         base::ThreadTaskRunnerHandle::Get());
diff --git a/chromium_src/chrome/browser/process_singleton_posix.cc b/chromium_src/chrome/browser/process_singleton_posix.cc
index 6ea5b54527..1943ad51f6 100644
--- a/chromium_src/chrome/browser/process_singleton_posix.cc
+++ b/chromium_src/chrome/browser/process_singleton_posix.cc
@@ -720,8 +720,7 @@ ProcessSingleton::ProcessSingleton(
     const base::FilePath& user_data_dir,
     const NotificationCallback& notification_callback)
     : notification_callback_(notification_callback),
-      current_pid_(base::GetCurrentProcId()),
-      watcher_(new LinuxWatcher(this)) {
+      current_pid_(base::GetCurrentProcId()) {
   // The user_data_dir may have not been created yet.
   base::CreateDirectoryAndGetError(user_data_dir, nullptr);
 
@@ -883,6 +882,7 @@ ProcessSingleton::NotifyResult ProcessSingleton::NotifyOtherProcessOrCreate() {
 }
 
 void ProcessSingleton::StartListeningOnSocket() {
+  watcher_ = new LinuxWatcher(this);
   BrowserThread::PostTask(
       BrowserThread::IO,
       FROM_HERE,
@@ -1049,7 +1049,7 @@ bool ProcessSingleton::Create() {
     NOTREACHED() << "listen failed: " << base::safe_strerror(errno);
 
   sock_ = sock;
-  
+
   if (BrowserThread::IsMessageLoopValid(BrowserThread::IO)) {
     StartListeningOnSocket();
   } else {

From b4075bed875528d97e309ef5a8e3e10f524f8e91 Mon Sep 17 00:00:00 2001
From: Cheng Zhao <zcbenz@gmail.com>
Date: Wed, 20 Sep 2017 11:58:10 +0900
Subject: [PATCH 7/7] spec: Add test case for app.makeSingleInstance

---
 spec/api-app-spec.js                     | 22 ++++++++++++++++++++++
 spec/fixtures/api/singleton/main.js      | 13 +++++++++++++
 spec/fixtures/api/singleton/package.json |  5 +++++
 3 files changed, 40 insertions(+)
 create mode 100644 spec/fixtures/api/singleton/main.js
 create mode 100644 spec/fixtures/api/singleton/package.json

diff --git a/spec/api-app-spec.js b/spec/api-app-spec.js
index df1eeccdae..035520bb41 100644
--- a/spec/api-app-spec.js
+++ b/spec/api-app-spec.js
@@ -157,6 +157,28 @@ describe('app module', function () {
     })
   })
 
+  describe('app.makeSingleInstance', function () {
+    it('prevents the second launch of app', function (done) {
+      this.timeout(120000)
+      const appPath = path.join(__dirname, 'fixtures', 'api', 'singleton')
+      // First launch should exit with 0.
+      let secondLaunched = false
+      const first = ChildProcess.spawn(remote.process.execPath, [appPath])
+      first.once('exit', (code) => {
+        assert.ok(secondLaunched)
+        assert.equal(code, 0)
+        done()
+      })
+      // Second launch should exit with 1.
+      const second = ChildProcess.spawn(remote.process.execPath, [appPath])
+      second.once('exit', (code) => {
+        assert.ok(!secondLaunched)
+        assert.equal(code, 1)
+        secondLaunched = true
+      })
+    })
+  })
+
   describe('app.relaunch', function () {
     let server = null
     const socketPath = process.platform === 'win32' ? '\\\\.\\pipe\\electron-app-relaunch' : '/tmp/electron-app-relaunch'
diff --git a/spec/fixtures/api/singleton/main.js b/spec/fixtures/api/singleton/main.js
new file mode 100644
index 0000000000..1cf75c4a66
--- /dev/null
+++ b/spec/fixtures/api/singleton/main.js
@@ -0,0 +1,13 @@
+const {app} = require('electron')
+
+process.on('uncaughtException', () => {
+  app.exit(2)
+})
+
+const shouldExit = app.makeSingleInstance(() => {
+  process.nextTick(() => app.exit(0))
+})
+
+if (shouldExit) {
+  app.exit(1)
+}
diff --git a/spec/fixtures/api/singleton/package.json b/spec/fixtures/api/singleton/package.json
new file mode 100644
index 0000000000..ebf7c8f489
--- /dev/null
+++ b/spec/fixtures/api/singleton/package.json
@@ -0,0 +1,5 @@
+{
+  "name": "electron-app-singleton",
+  "main": "main.js"
+}
+
