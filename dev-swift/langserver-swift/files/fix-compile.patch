diff --git a/Sources/Ogra/Encodable.swift b/Sources/Ogra/Encodable.swift
index 3927f10..5b83081 100644
--- a/Sources/Ogra/Encodable.swift
+++ b/Sources/Ogra/Encodable.swift
@@ -9,6 +9,27 @@
 import Argo
 import Foundation
 
+extension Int {
+    public func bridge() -> NSNumber {
+        return _bridgeToObjectiveC()
+    }
+}
+extension Double {
+    public func bridge() -> NSNumber {
+        return _bridgeToObjectiveC()
+    }
+}
+extension UInt {
+    public func bridge() -> NSNumber {
+        return _bridgeToObjectiveC()
+    }
+}
+extension Float {
+    public func bridge() -> NSNumber {
+        return _bridgeToObjectiveC()
+    }
+}
+
 public protocol Encodable {
 	func encode() -> JSON
 }
@@ -33,25 +56,25 @@ extension Bool: Encodable {
 
 extension Int: Encodable {
 	public func encode() -> JSON {
-		return .number(self as NSNumber)
+		return .number(self.bridge())
 	}
 }
 
 extension Double: Encodable {
 	public func encode() -> JSON {
-		return .number(self as NSNumber)
+		return .number(self.bridge())
 	}
 }
 
 extension Float: Encodable {
 	public func encode() -> JSON {
-		return .number(self as NSNumber)
+		return .number(self.bridge())
 	}
 }
 
 extension UInt: Encodable {
 	public func encode() -> JSON {
-		return .number(self as NSNumber)
+		return .number(self.bridge())
 	}
 }
 
@@ -106,25 +129,25 @@ extension Encodable where Self: RawRepresentable, Self.RawValue == String {
 
 extension Encodable where Self: RawRepresentable, Self.RawValue == Int {
     public func encode() -> JSON {
-        return .number(self.rawValue as NSNumber)
+        return .number(self.rawValue.bridge())
     }
 }
 
 extension Encodable where Self: RawRepresentable, Self.RawValue == Double {
     public func encode() -> JSON {
-        return .number(self.rawValue as NSNumber)
+        return .number(self.rawValue.bridge())
     }
 }
 
 extension Encodable where Self: RawRepresentable, Self.RawValue == Float {
     public func encode() -> JSON {
-        return .number(self.rawValue as NSNumber)
+        return .number(self.rawValue.bridge())
     }
 }
 
 extension Encodable where Self: RawRepresentable, Self.RawValue == UInt {
     public func encode() -> JSON {
-        return .number(self.rawValue as NSNumber)
+        return .number(self.rawValue.bridge())
     }
 }
 
