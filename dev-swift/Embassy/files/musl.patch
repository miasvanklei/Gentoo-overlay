diff --git a/Sources/SystemLibrary.swift b/Sources/SystemLibrary.swift
index fa736d5..b799602 100644
--- a/Sources/SystemLibrary.swift
+++ b/Sources/SystemLibrary.swift
@@ -42,24 +42,24 @@ struct SystemLibrary {
         static func fdSet(fd: Int32, set: inout fd_set) {
             let intOffset = Int(fd / SystemLibrary.nfdbits)
             let bitOffset = Int(fd % SystemLibrary.nfdbits)
-            let mask = 1 << bitOffset
+            let mask = UInt(1 << bitOffset)
             switch intOffset {
-            case 0: set.__fds_bits.0 = set.__fds_bits.0 | mask
-            case 1: set.__fds_bits.1 = set.__fds_bits.1 | mask
-            case 2: set.__fds_bits.2 = set.__fds_bits.2 | mask
-            case 3: set.__fds_bits.3 = set.__fds_bits.3 | mask
-            case 4: set.__fds_bits.4 = set.__fds_bits.4 | mask
-            case 5: set.__fds_bits.5 = set.__fds_bits.5 | mask
-            case 6: set.__fds_bits.6 = set.__fds_bits.6 | mask
-            case 7: set.__fds_bits.7 = set.__fds_bits.7 | mask
-            case 8: set.__fds_bits.8 = set.__fds_bits.8 | mask
-            case 9: set.__fds_bits.9 = set.__fds_bits.9 | mask
-            case 10: set.__fds_bits.10 = set.__fds_bits.10 | mask
-            case 11: set.__fds_bits.11 = set.__fds_bits.11 | mask
-            case 12: set.__fds_bits.12 = set.__fds_bits.12 | mask
-            case 13: set.__fds_bits.13 = set.__fds_bits.13 | mask
-            case 14: set.__fds_bits.14 = set.__fds_bits.14 | mask
-            case 15: set.__fds_bits.15 = set.__fds_bits.15 | mask
+            case 0: set.fds_bits.0 = set.fds_bits.0 | mask
+            case 1: set.fds_bits.1 = set.fds_bits.1 | mask
+            case 2: set.fds_bits.2 = set.fds_bits.2 | mask
+            case 3: set.fds_bits.3 = set.fds_bits.3 | mask
+            case 4: set.fds_bits.4 = set.fds_bits.4 | mask
+            case 5: set.fds_bits.5 = set.fds_bits.5 | mask
+            case 6: set.fds_bits.6 = set.fds_bits.6 | mask
+            case 7: set.fds_bits.7 = set.fds_bits.7 | mask
+            case 8: set.fds_bits.8 = set.fds_bits.8 | mask
+            case 9: set.fds_bits.9 = set.fds_bits.9 | mask
+            case 10: set.fds_bits.10 = set.fds_bits.10 | mask
+            case 11: set.fds_bits.11 = set.fds_bits.11 | mask
+            case 12: set.fds_bits.12 = set.fds_bits.12 | mask
+            case 13: set.fds_bits.13 = set.fds_bits.13 | mask
+            case 14: set.fds_bits.14 = set.fds_bits.14 | mask
+            case 15: set.fds_bits.15 = set.fds_bits.15 | mask
             default: break
             }
         }
@@ -67,24 +67,24 @@ struct SystemLibrary {
         static func fdIsSet(fd: Int32, set: inout fd_set) -> Bool {
             let intOffset = Int(fd / SystemLibrary.nfdbits)
             let bitOffset = Int(fd % SystemLibrary.nfdbits)
-            let mask = Int(1 << bitOffset)
+            let mask = UInt(1 << bitOffset)
             switch intOffset {
-            case 0: return set.__fds_bits.0 & mask != 0
-            case 1: return set.__fds_bits.1 & mask != 0
-            case 2: return set.__fds_bits.2 & mask != 0
-            case 3: return set.__fds_bits.3 & mask != 0
-            case 4: return set.__fds_bits.4 & mask != 0
-            case 5: return set.__fds_bits.5 & mask != 0
-            case 6: return set.__fds_bits.6 & mask != 0
-            case 7: return set.__fds_bits.7 & mask != 0
-            case 8: return set.__fds_bits.8 & mask != 0
-            case 9: return set.__fds_bits.9 & mask != 0
-            case 10: return set.__fds_bits.10 & mask != 0
-            case 11: return set.__fds_bits.11 & mask != 0
-            case 12: return set.__fds_bits.12 & mask != 0
-            case 13: return set.__fds_bits.13 & mask != 0
-            case 14: return set.__fds_bits.14 & mask != 0
-            case 15: return set.__fds_bits.15 & mask != 0
+            case 0: return set.fds_bits.0 & mask != 0
+            case 1: return set.fds_bits.1 & mask != 0
+            case 2: return set.fds_bits.2 & mask != 0
+            case 3: return set.fds_bits.3 & mask != 0
+            case 4: return set.fds_bits.4 & mask != 0
+            case 5: return set.fds_bits.5 & mask != 0
+            case 6: return set.fds_bits.6 & mask != 0
+            case 7: return set.fds_bits.7 & mask != 0
+            case 8: return set.fds_bits.8 & mask != 0
+            case 9: return set.fds_bits.9 & mask != 0
+            case 10: return set.fds_bits.10 & mask != 0
+            case 11: return set.fds_bits.11 & mask != 0
+            case 12: return set.fds_bits.12 & mask != 0
+            case 13: return set.fds_bits.13 & mask != 0
+            case 14: return set.fds_bits.14 & mask != 0
+            case 15: return set.fds_bits.15 & mask != 0
             default: return false
             }
         }
diff --git a/Sources/TCPSocket.swift b/Sources/TCPSocket.swift
index bd1a8b3..24d78b0 100644
--- a/Sources/TCPSocket.swift
+++ b/Sources/TCPSocket.swift
@@ -62,11 +62,7 @@ public final class TCPSocket {
     }
 
     init(blocking: Bool = false) throws {
-        #if os(Linux)
-            let socketType = Int32(SOCK_STREAM.rawValue)
-        #else
-            let socketType = SOCK_STREAM
-        #endif
+        let socketType = SOCK_STREAM
         fileDescriptor = SystemLibrary.socket(AF_INET6, socketType, 0)
         guard fileDescriptor >= 0 else {
             throw OSError.lastIOError()
