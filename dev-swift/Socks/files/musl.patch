diff --git a/Sources/SocksCore/FDSet.swift b/Sources/SocksCore/FDSet.swift
index 9283e68..572f4e4 100644
--- a/Sources/SocksCore/FDSet.swift
+++ b/Sources/SocksCore/FDSet.swift
@@ -30,40 +30,36 @@ import Darwin
 
 
 func fdZero(_ set: inout fd_set) {
-#if os(Linux)
 #if arch(arm)
-  set.__fds_bits = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
-#else
-  set.__fds_bits = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
-#endif
-#else
   set.fds_bits = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
+#else
+  set.fds_bits = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
 #endif
 }
 
 
 func fdSet(_ descriptor: Descriptor, _ set: inout fd_set) {
 #if os(Linux)
-  let intOffset = Int(descriptor / 16)
-  let bitOffset = Int(descriptor % 16)
-  let mask = 1 << bitOffset
+  let intOffset = UInt(descriptor / 16)
+  let bitOffset = UInt(descriptor % 16)
+  let mask = UInt(1 << bitOffset)
   switch intOffset {
-    case 0: set.__fds_bits.0 = set.__fds_bits.0 | mask
-    case 1: set.__fds_bits.1 = set.__fds_bits.1 | mask
-    case 2: set.__fds_bits.2 = set.__fds_bits.2 | mask
-    case 3: set.__fds_bits.3 = set.__fds_bits.3 | mask
-    case 4: set.__fds_bits.4 = set.__fds_bits.4 | mask
-    case 5: set.__fds_bits.5 = set.__fds_bits.5 | mask
-    case 6: set.__fds_bits.6 = set.__fds_bits.6 | mask
-    case 7: set.__fds_bits.7 = set.__fds_bits.7 | mask
-    case 8: set.__fds_bits.8 = set.__fds_bits.8 | mask
-    case 9: set.__fds_bits.9 = set.__fds_bits.9 | mask
-    case 10: set.__fds_bits.10 = set.__fds_bits.10 | mask
-    case 11: set.__fds_bits.11 = set.__fds_bits.11 | mask
-    case 12: set.__fds_bits.12 = set.__fds_bits.12 | mask
-    case 13: set.__fds_bits.13 = set.__fds_bits.13 | mask
-    case 14: set.__fds_bits.14 = set.__fds_bits.14 | mask
-    case 15: set.__fds_bits.15 = set.__fds_bits.15 | mask
+    case 0: set.fds_bits.0 = set.fds_bits.0 | mask
+    case 1: set.fds_bits.1 = set.fds_bits.1 | mask
+    case 2: set.fds_bits.2 = set.fds_bits.2 | mask
+    case 3: set.fds_bits.3 = set.fds_bits.3 | mask
+    case 4: set.fds_bits.4 = set.fds_bits.4 | mask
+    case 5: set.fds_bits.5 = set.fds_bits.5 | mask
+    case 6: set.fds_bits.6 = set.fds_bits.6 | mask
+    case 7: set.fds_bits.7 = set.fds_bits.7 | mask
+    case 8: set.fds_bits.8 = set.fds_bits.8 | mask
+    case 9: set.fds_bits.9 = set.fds_bits.9 | mask
+    case 10: set.fds_bits.10 = set.fds_bits.10 | mask
+    case 11: set.fds_bits.11 = set.fds_bits.11 | mask
+    case 12: set.fds_bits.12 = set.fds_bits.12 | mask
+    case 13: set.fds_bits.13 = set.fds_bits.13 | mask
+    case 14: set.fds_bits.14 = set.fds_bits.14 | mask
+    case 15: set.fds_bits.15 = set.fds_bits.15 | mask
     default: break
   }
 #else
@@ -96,27 +92,27 @@ func fdSet(_ descriptor: Descriptor, _ set: inout fd_set) {
 
 func fdIsSet(_ descriptor: Descriptor, _ set: inout fd_set) -> Bool {
 #if os(Linux)
-  let intOffset = Int(descriptor / 32)
-  let bitOffset = Int(descriptor % 32)
-  let mask = Int(1 << bitOffset)
+  let intOffset = UInt(descriptor / 32)
+  let bitOffset = UInt(descriptor % 32)
+  let mask = UInt(1 << bitOffset)
 
   switch intOffset {
-    case 0: return set.__fds_bits.0 & mask != 0
-    case 1: return set.__fds_bits.1 & mask != 0
-    case 2: return set.__fds_bits.2 & mask != 0
-    case 3: return set.__fds_bits.3 & mask != 0
-    case 4: return set.__fds_bits.4 & mask != 0
-    case 5: return set.__fds_bits.5 & mask != 0
-    case 6: return set.__fds_bits.6 & mask != 0
-    case 7: return set.__fds_bits.7 & mask != 0
-    case 8: return set.__fds_bits.8 & mask != 0
-    case 9: return set.__fds_bits.9 & mask != 0
-    case 10: return set.__fds_bits.10 & mask != 0
-    case 11: return set.__fds_bits.11 & mask != 0
-    case 12: return set.__fds_bits.12 & mask != 0
-    case 13: return set.__fds_bits.13 & mask != 0
-    case 14: return set.__fds_bits.14 & mask != 0
-    case 15: return set.__fds_bits.15 & mask != 0
+    case 0: return set.fds_bits.0 & mask != 0
+    case 1: return set.fds_bits.1 & mask != 0
+    case 2: return set.fds_bits.2 & mask != 0
+    case 3: return set.fds_bits.3 & mask != 0
+    case 4: return set.fds_bits.4 & mask != 0
+    case 5: return set.fds_bits.5 & mask != 0
+    case 6: return set.fds_bits.6 & mask != 0
+    case 7: return set.fds_bits.7 & mask != 0
+    case 8: return set.fds_bits.8 & mask != 0
+    case 9: return set.fds_bits.9 & mask != 0
+    case 10: return set.fds_bits.10 & mask != 0
+    case 11: return set.fds_bits.11 & mask != 0
+    case 12: return set.fds_bits.12 & mask != 0
+    case 13: return set.fds_bits.13 & mask != 0
+    case 14: return set.fds_bits.14 & mask != 0
+    case 15: return set.fds_bits.15 & mask != 0
     default: return false
   }
 #else
diff --git a/Sources/SocksCore/Types.swift b/Sources/SocksCore/Types.swift
index 971ff0f..45ff3a9 100644
--- a/Sources/SocksCore/Types.swift
+++ b/Sources/SocksCore/Types.swift
@@ -79,18 +79,10 @@ extension SocketType: CTypeInt32Convertible {
     func toCType() -> Int32 {
         switch self {
         case .stream:
-        #if os(Linux) 
-            return Int32(SOCK_STREAM.rawValue)
-        #else
             return SOCK_STREAM
-        #endif
         
         case .datagram:
-        #if os(Linux)
-            return Int32(SOCK_DGRAM.rawValue)
-        #else
             return SOCK_DGRAM
-        #endif
         }
     }
 }
