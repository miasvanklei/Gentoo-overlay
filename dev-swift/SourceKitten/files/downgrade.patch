diff --git a/Source/SourceKittenFramework/Request.swift b/Source/SourceKittenFramework/Request.swift
index 2de67ee..e31a4f5 100644
--- a/Source/SourceKittenFramework/Request.swift
+++ b/Source/SourceKittenFramework/Request.swift
@@ -25,14 +25,15 @@ private let initializeSourceKitFailable: Void = {
         if !sourcekitd_response_is_error(response!) {
             fflush(stdout)
             fputs("sourcekitten: connection to SourceKitService restored!\n", stderr)
-            sourceKitWaitingRestoredSemaphore.signal()
+            dispatch_semaphore_signal(sourceKitWaitingRestoredSemaphore!)
         }
         sourcekitd_response_dispose(response!)
     }
 }()
 
 /// dispatch_semaphore_t used when waiting for sourcekitd to be restored.
-private var sourceKitWaitingRestoredSemaphore = DispatchSemaphore(value: 0)
+private var sourceKitWaitingRestoredSemaphore = dispatch_semaphore_create(0)
+private let sourceKitWaitingRestoredTimeout = Int64(10 * NSEC_PER_SEC)
 
 internal extension String {
     /**
@@ -266,7 +267,8 @@ public enum Request {
         if sourcekitd_response_is_error(response!) {
             let error = Request.Error(response: response!)
             if case .connectionInterrupted = error {
-                _ = sourceKitWaitingRestoredSemaphore.wait(timeout: DispatchTime.now() + 10)
+                dispatch_semaphore_wait(sourceKitWaitingRestoredSemaphore!,
+                    dispatch_time(DISPATCH_TIME_NOW, sourceKitWaitingRestoredTimeout))
             }
             sourcekitd_response_dispose(response!)
             throw error
diff --git a/Source/sourcekitten/main.swift b/Source/sourcekitten/main.swift
index 54a0a1c..75cdca1 100644
--- a/Source/sourcekitten/main.swift
+++ b/Source/sourcekitten/main.swift
@@ -16,7 +16,7 @@ import Dispatch
 
 // `sourcekitd_set_notification_handler()` sets the handler to be executed on main thread queue.
 // So, we vacate main thread to `dispatchMain()`.
-DispatchQueue.global(qos: .default).async {
+dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {
     let registry = CommandRegistry<SourceKittenError>()
     registry.register(CompleteCommand())
     registry.register(DocCommand())
@@ -32,4 +32,4 @@ DispatchQueue.global(qos: .default).async {
     }
 }
 
-dispatchMain()
+dispatch_main()
