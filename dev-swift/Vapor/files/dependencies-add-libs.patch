diff --git a/Package.swift b/Package.swift
index 260e92a2..c4fb5ec5 100644
--- a/Package.swift
+++ b/Package.swift
@@ -23,34 +23,23 @@ let package = Package(
         // Target(name: "Development", dependencies: ["Vapor"]),
         // Target(name: "Performance", dependencies: ["Vapor"]),
     ],
-    dependencies: [
-        // SHA2 + HMAC hashing. Used by the core to create session identifiers.
-        .Package(url: "https://github.com/vapor/crypto.git", majorVersion: 1),
-
-        // ORM for interacting with databases
-        .Package(url: "https://github.com/vapor/fluent.git", majorVersion: 1),
-
-        // Core vapor transport layer
-        .Package(url: "https://github.com/vapor/engine.git", majorVersion: 1),
-
-        // Console protocol and implementation for powering command line interface.
-        .Package(url: "https://github.com/vapor/console.git", majorVersion: 1),
-
-        // JSON enum wrapper around Foundation JSON
-        .Package(url: "https://github.com/vapor/json.git", majorVersion: 1),
-
-        // A security framework for Swift.
-        .Package(url: "https://github.com/stormpath/Turnstile.git", majorVersion: 1),
-
-        // An extensible templating language built for Vapor. üçÉ
-        .Package(url: "https://github.com/vapor/leaf.git", majorVersion: 1),
-
-        // A type safe routing package including HTTP and TypeSafe routers.
-        .Package(url: "https://github.com/vapor/routing.git", majorVersion: 1),
-    ],
     exclude: [
         "Sources/Development",
         "Sources/Performance",
         "Sources/TypeSafeGenerator"
     ]
 )
+
+let lib = Product(name: "Vapor", type: .Library(.Dynamic), modules: "Vapor")
+products.append(lib)
+let alib = Product(name: "Auth", type: .Library(.Dynamic), modules: "Auth")
+products.append(alib)
+let calib = Product(name: "Cache", type: .Library(.Dynamic), modules: "Cache")
+products.append(calib)
+let colib = Product(name: "Cookies", type: .Library(.Dynamic), modules: "Cookies")
+products.append(colib)
+let seslib = Product(name: "Sessions", type: .Library(.Dynamic), modules: "Sessions")
+products.append(seslib)
+let setlib = Product(name: "Settings", type: .Library(.Dynamic), modules: "Settings")
+products.append(setlib)
+
