--- ldso/dynlink.c.bak	2016-02-13 16:35:57.261280885 +0100
+++ ldso/dynlink.c	2016-02-13 16:51:10.226893955 +0100
@@ -3,6 +3,7 @@
 #include <stdlib.h>
 #include <stdarg.h>
 #include <stddef.h>
+#include <stdbool.h>
 #include <string.h>
 #include <unistd.h>
 #include <stdint.h>
@@ -115,6 +116,8 @@
 static struct dso ldso;
 static struct dso *head, *tail, *fini_head;
 static char *env_path, *sys_path;
+static const char *keeptrackoff;
+static bool retry;
 static unsigned long long gencnt;
 static int runtime;
 static int ldd_mode;
@@ -713,6 +716,7 @@
 error:
 	if (map!=MAP_FAILED) unmap_library(dso);
 	free(allocated_buf);
+	retry = true;
 	return 0;
 }
 
@@ -720,12 +724,17 @@
 {
 	size_t l;
 	int fd;
+	if(keeptrackoff && retry) s = keeptrackoff;
 	for (;;) {
 		s += strspn(s, ":\n");
 		l = strcspn(s, ":\n");
 		if (l-1 >= INT_MAX) return -1;
 		if (snprintf(buf, buf_size, "%.*s/%s", (int)l, s, name) < buf_size) {
-			if ((fd = open(buf, O_RDONLY|O_CLOEXEC))>=0) return fd;
+			if ((fd = open(buf, O_RDONLY|O_CLOEXEC))>=0) {
+				keeptrackoff = s;
+				keeptrackoff += strcspn(s, ":\n");
+				return fd;
+			}
 			switch (errno) {
 			case ENOENT:
 			case ENOTDIR:
@@ -898,6 +907,7 @@
 	int n_th = 0;
 	int is_self = 0;
 
+retrypath:
 	if (!*name) {
 		errno = EINVAL;
 		return 0;
@@ -974,9 +984,9 @@
 					prefix_len = 0;
 				}
 				char etc_ldso_path[prefix_len + 1
-					+ sizeof "/etc/ld-musl-" LDSO_ARCH ".path"];
+					+ sizeof "/etc/ld-musl.path"];
 				snprintf(etc_ldso_path, sizeof etc_ldso_path,
-					"%.*s/etc/ld-musl-" LDSO_ARCH ".path",
+					"%.*s/etc/ld-musl.path",
 					(int)prefix_len, prefix);
 				FILE *f = fopen(etc_ldso_path, "rbe");
 				if (f) {
@@ -1013,7 +1023,12 @@
 	}
 	map = noload ? 0 : map_library(fd, &temp_dso);
 	close(fd);
-	if (!map) return 0;
+	if (!map) {
+		if (retry)
+			goto retrypath;
+		else
+			return 0;
+	}
 
 	/* Allocate storage for the new DSO. When there is TLS, this
 	 * storage must include a reservation for all pre-existing
@@ -1084,11 +1099,16 @@
 			if (p->dynv[i] != DT_NEEDED) continue;
 			dep = load_library(p->strings + p->dynv[i+1], p);
 			if (!dep) {
-				error("Error loading shared library %s: %m (needed by %s)",
-					p->strings + p->dynv[i+1], p->name);
+				if (!retry)
+					error("Error loading shared library %s: %m (needed by %s)",
+						p->strings + p->dynv[i+1], p->name);
+				else if (retry)
+					error("Shared library: %s was found but couldn't be loaded: (needed by %s)", p->strings + p->dynv[i+1], p->name);
 				if (runtime) longjmp(*rtld_fail, 1);
 				continue;
 			}
+			retry = false;
+			keeptrackoff = NULL;
 			if (runtime) {
 				tmp = realloc(*deps, sizeof(*tmp)*(ndeps+2));
 				if (!tmp) longjmp(*rtld_fail, 1);
