--- a/include/utmpx.h
+++ b/include/utmpx.h
@@ -14,13 +14,21 @@ extern "C" {
 
 #include <bits/alltypes.h>
 
+#define UT_LINESIZE 32
+#define UT_NAMESIZE 32
+#define UT_HOSTSIZE 256
+#define _PATH_UTMP "/var/log/utmp"
+#define _PATH_WTMP "/var/log/wtmp"
+#define _PATH_UTMPX _PATH_UTMP
+#define _PATH_WTMPX _PATH_WTMP
+
 struct utmpx {
 	short ut_type;
 	pid_t ut_pid;
-	char ut_line[32];
+	char ut_line[UT_LINESIZE];
 	char ut_id[4];
-	char ut_user[32];
-	char ut_host[256];
+	char ut_user[UT_NAMESIZE];
+	char ut_host[UT_HOSTSIZE];
 	struct {
 		short __e_termination;
 		short __e_exit;
@@ -35,7 +41,7 @@ void          endutxent(void);
 struct utmpx *getutxent(void);
 struct utmpx *getutxid(const struct utmpx *);
 struct utmpx *getutxline(const struct utmpx *);
-struct utmpx *pututxline(const struct utmpx *);
+struct utmpx *pututxline(struct utmpx *);
 void          setutxent(void);
 
 #if defined(_BSD_SOURCE) || defined(_GNU_SOURCE)
@@ -54,6 +60,7 @@ int utmpxname(const char *);
 #define LOGIN_PROCESS   6
 #define USER_PROCESS    7
 #define DEAD_PROCESS    8
+#define ACCOUNTING      9
 
 #ifdef __cplusplus
 }
--- a/include/utmp.h
+++ b/include/utmp.h
@@ -7,11 +7,6 @@ extern "C" {
 
 #include <utmpx.h>
 
-#define ACCOUNTING 9
-#define UT_NAMESIZE 32
-#define UT_HOSTSIZE 256
-#define UT_LINESIZE 32
-
 struct lastlog {
 	time_t ll_time;
 	char ll_line[UT_LINESIZE];
@@ -29,16 +24,15 @@ void         endutent(void);
 struct utmp *getutent(void);
 struct utmp *getutid(const struct utmp *);
 struct utmp *getutline(const struct utmp *);
-struct utmp *pututline(const struct utmp *);
+struct utmp *pututline(struct utmp *);
 void         setutent(void);
 
 void updwtmp(const char *, const struct utmp *);
+void logwtmp(const char *, const char *, const char *);
 int utmpname(const char *);
 
 int login_tty(int);
 
-#define _PATH_UTMP "/dev/null/utmp"
-#define _PATH_WTMP "/dev/null/wtmp"
 
 #define UTMP_FILE _PATH_UTMP
 #define WTMP_FILE _PATH_WTMP
--- a/src/legacy/utmpx.c
+++ b/src/legacy/utmpx.c
@@ -1,44 +1,205 @@
-#include <utmpx.h>
-#include <stddef.h>
+#define _GNU_SOURCE
+#include <utmp.h>
+#include <fcntl.h>
 #include <errno.h>
+#include <string.h>
+#include <unistd.h>
+#include <signal.h>
+#include <sys/time.h>
+#include "pthread_impl.h"
 #include "libc.h"
 
+static const char *utmp_file_name = _PATH_UTMPX;
+static int fd = -1;
+static off_t utmp_current = 0;
+
+void *__utmp_io(int fd, void *ut, ssize_t len, off_t *offset, int type)
+{
+	int e, ret;
+	struct flock fl;
+	off_t newoffset;
+
+	fl.l_whence	= SEEK_CUR;
+	fl.l_start	= 0;
+	fl.l_len	= len;
+	fl.l_pid	= 0;
+	fl.l_type	= type;
+
+	if (fcntl(fd, F_SETLKW, &fl)) return NULL;
+
+	if (type == F_WRLCK) {
+		ret = write(fd, ut, len);
+		e = errno;
+		fsync (fd);
+		newoffset = lseek (fd, 0, SEEK_CUR);
+	} else {
+		newoffset = lseek (fd, 0, SEEK_CUR);
+		ret = read(fd, ut, len);
+		e = errno;
+	}
+	fl.l_start	= -(len);
+	fl.l_type	= F_UNLCK;
+
+	fcntl(fd, F_SETLK, &fl);
+
+	if (offset) *offset = newoffset;
+
+	errno = e;
+
+	if (ret != len)
+		return (void *)0;
+	return ut;
+}
+
 void endutxent(void)
 {
+	if (fd < 0) return;
+
+	close(fd);
+	fd =- 1;
+	utmp_current = 0;
 }
 
 void setutxent(void)
 {
+	sigset_t set;
+	__block_all_sigs(&set);
+
+	if (fd < 0) fd = open(utmp_file_name, O_RDWR);
+
+	if (fd < 0) fd = open(utmp_file_name, O_RDONLY);
+
+	fcntl (fd, F_SETFD, FD_CLOEXEC);
+	utmp_current = lseek(fd, 0, SEEK_SET);
+
+	__restore_sigs(&set);
 }
 
 struct utmpx *getutxent(void)
 {
-	return NULL;
+	static struct utmpx getutent_tmp, *retval;
+	ssize_t ret;
+	sigset_t set;
+
+	if (fd < 0) {
+		setutxent();
+		if (fd < 0) return NULL;
+	}
+
+	__block_all_sigs(&set);
+
+	retval = __utmp_io(fd, &getutent_tmp, sizeof(struct utmpx), &utmp_current, F_RDLCK);
+
+	__restore_sigs(&set);
+
+	return retval;
 }
 
 struct utmpx *getutxid(const struct utmpx *ut)
 {
-	return NULL;
+	struct utmpx *tmp;
+
+	while ((tmp = getutxent())) {
+		if (ut->ut_type && (ut->ut_type <= OLD_TIME))
+			if (ut->ut_type == tmp->ut_type) break;
+
+		if ((ut->ut_type >= INIT_PROCESS) && (ut->ut_type <= DEAD_PROCESS))
+			if (!strncmp(ut->ut_id, tmp->ut_id, 4)) break;
+	}
+
+	return tmp;
 }
 
 struct utmpx *getutxline(const struct utmpx *ut)
 {
-	return NULL;
+	struct utmpx *tmp;
+
+	while ((tmp = getutxent()))
+		if ((tmp->ut_type == USER_PROCESS) || (tmp->ut_type == LOGIN_PROCESS))
+			if (!strncmp(ut->ut_line, tmp->ut_line, UT_LINESIZE)) break;
+
+	return tmp;
 }
 
-struct utmpx *pututxline(const struct utmpx *ut)
+struct utmpx *pututxline(struct utmpx *ut)
 {
-	return NULL;
+	struct utmpx *tmp, ut_copy, *retval = 0, *result;
+	int e;
+	ssize_t bytes_written;
+	sigset_t set;
+
+	memcpy (&ut_copy, ut, sizeof (struct utmpx));
+	__block_all_sigs(&set);
+
+	lseek (fd, utmp_current, SEEK_SET);
+	if ((tmp = getutxid(&ut_copy))) {
+		lseek(fd, - (off_t)sizeof(struct utmpx), SEEK_CUR);
+		result = __utmp_io (fd, &ut_copy, sizeof(struct utmpx), &utmp_current, F_WRLCK);
+		e = errno;
+	} else {
+		utmp_current = lseek(fd, 0, SEEK_END);
+		result = __utmp_io (fd, &ut_copy, sizeof(struct utmpx), &utmp_current, F_WRLCK);
+		e = errno;
+	}
+
+	__restore_sigs(&set);
+
+	if (result) {
+		retval = ut;
+	}
+
+	memcpy (ut, &ut_copy, sizeof (struct utmpx));
+	errno = e;
+	return retval;
 }
 
 void updwtmpx(const char *f, const struct utmpx *u)
 {
+	int fd = open(f, O_WRONLY|O_APPEND);
+	if (fd < 0) return;
+	fcntl (fd, F_SETFD, FD_CLOEXEC);
+	write(fd, u, sizeof(struct utmpx));
+	close(fd);
 }
 
 int __utmpxname(const char *f)
 {
-	errno = ENOTSUP;
-	return -1;
+	if (f)
+		utmp_file_name = f;
+	else
+		utmp_file_name = _PATH_UTMPX;
+	return 0;
+}
+
+void getutmpx (const struct utmp *_utmp, struct utmpx *_utmpx)
+{
+	memcpy (_utmpx, _utmp, sizeof(struct utmpx));
+	return;
+}
+
+void logwtmp(const char *line, const char *name, const char *host)
+{
+	struct utmpx ut;
+
+	memset(&ut, 0, sizeof(struct utmp));
+
+	ut.ut_pid = getpid ();
+	ut.ut_type = name[0] ? USER_PROCESS : DEAD_PROCESS;
+
+	memccpy (ut.ut_line, line, 0, sizeof ut.ut_line);
+	memccpy (ut.ut_name, name, 0, sizeof ut.ut_name);
+	memccpy (ut.ut_host, host, 0, sizeof ut.ut_host);
+
+	if (sizeof(ut.ut_tv) == sizeof(struct timeval))
+		gettimeofday((struct timeval *)&ut.ut_tv, NULL);
+	else {
+		struct timeval tv;
+		gettimeofday(&tv, NULL);
+		ut.ut_tv.tv_sec = tv.tv_sec;
+		ut.ut_tv.tv_usec = tv.tv_usec;
+	}
+
+	updwtmpx (_PATH_WTMP, &ut);
 }
 
 weak_alias(endutxent, endutent);
@@ -50,3 +211,4 @@ weak_alias(pututxline, pututline);
 weak_alias(updwtmpx, updwtmp);
 weak_alias(__utmpxname, utmpname);
 weak_alias(__utmpxname, utmpxname);
+weak_alias(getutmpx, getutmp);
