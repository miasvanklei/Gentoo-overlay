From 301462ab064a1c321a4f16b34a384c9516b7320c Mon Sep 17 00:00:00 2001
From: Mark Wright <gienah@gentoo.org>
Date: Thu, 12 Apr 2018 22:07:11 +1000
Subject: [PATCH] Port to ghc 8.4

---
 Main.hs                     | 46 +++++++++++++++++++++++++++++++++++++++++++++
 Merge/Dependencies.hs       | 18 ++++++++++++++++++
 Portage/Dependency/Print.hs |  6 ++++++
 Portage/PackageId.hs        |  6 ++++++
 Portage/Use.hs              |  6 ++++++
 Portage/Version.hs          |  6 ++++++
 6 files changed, 88 insertions(+)

diff --git a/Main.hs b/Main.hs
index ee98ef7..41dfa7c 100644
--- a/Main.hs
+++ b/Main.hs
@@ -1,3 +1,5 @@
+{-# LANGUAGE CPP #-}
+
 module Main (main) where
 
 import Control.Applicative
@@ -36,6 +38,8 @@ import Portage.PackageId ( normalizeCabalPackageId )
 import System.Environment ( getArgs, getProgName )
 import System.Directory ( doesDirectoryExist )
 import System.Exit ( exitFailure )
+{-# LANGUAGE CPP #-}
+
 import System.FilePath ( (</>) )
 
 import qualified HackPort.GlobalFlags as H
@@ -56,14 +60,24 @@ data ListFlags = ListFlags {
     listVerbosity :: Flag Verbosity
   }
 
+#if MIN_VERSION_base(4,9,0)
+instance Semigroup ListFlags where
+  a <> b = ListFlags {
+    listVerbosity = combine listVerbosity
+  }
+    where combine field = field a <> field b
+#endif
+
 instance Monoid ListFlags where
   mempty = ListFlags {
     listVerbosity = mempty
   }
+#if !(MIN_VERSION_base(4,11,0))
   mappend a b = ListFlags {
     listVerbosity = combine listVerbosity
   }
     where combine field = field a `mappend` field b
+#endif
 
 defaultListFlags :: ListFlags
 defaultListFlags = ListFlags {
@@ -119,16 +133,27 @@ data MakeEbuildFlags = MakeEbuildFlags {
   , makeEbuildCabalFlags :: Flag (Maybe String)
   }
 
+#if MIN_VERSION_base(4,9,0)
+instance Semigroup MakeEbuildFlags where
+  a <> b = MakeEbuildFlags {
+    makeEbuildVerbosity = combine makeEbuildVerbosity
+  , makeEbuildCabalFlags = makeEbuildCabalFlags b
+  }
+    where combine field = field a <> field b
+#endif
+
 instance Monoid MakeEbuildFlags where
   mempty = MakeEbuildFlags {
     makeEbuildVerbosity = mempty
   , makeEbuildCabalFlags = mempty
   }
+#if MIN_VERSION_base(4,9,0)
   mappend a b = MakeEbuildFlags {
     makeEbuildVerbosity = combine makeEbuildVerbosity
   , makeEbuildCabalFlags = makeEbuildCabalFlags b
   }
     where combine field = field a `mappend` field b
+#endif
 
 defaultMakeEbuildFlags :: MakeEbuildFlags
 defaultMakeEbuildFlags = MakeEbuildFlags {
@@ -180,14 +205,24 @@ data UpdateFlags = UpdateFlags {
     updateVerbosity :: Flag Verbosity
   }
 
+#if MIN_VERSION_base(4,9,0)
+instance Semigroup UpdateFlags where
+  a <> b = UpdateFlags {
+    updateVerbosity = combine updateVerbosity
+  }
+    where combine field = field a <> field b
+#endif
+
 instance Monoid UpdateFlags where
   mempty = UpdateFlags {
     updateVerbosity = mempty
   }
+#if !(MIN_VERSION_base(4,11,0))
   mappend a b = UpdateFlags {
     updateVerbosity = combine updateVerbosity
   }
     where combine field = field a `mappend` field b
+#endif
 
 defaultUpdateFlags :: UpdateFlags
 defaultUpdateFlags = UpdateFlags {
@@ -284,16 +319,27 @@ data MergeFlags = MergeFlags {
   , mergeCabalFlags :: Flag (Maybe String)
   }
 
+#if MIN_VERSION_base(4,9,0)
+instance Semigroup MergeFlags where
+  a <> b = MergeFlags {
+    mergeVerbosity = combine mergeVerbosity
+  , mergeCabalFlags = mergeCabalFlags b
+  }
+    where combine field = field a <> field b
+#endif
+
 instance Monoid MergeFlags where
   mempty = MergeFlags {
     mergeVerbosity = mempty
   , mergeCabalFlags = mempty
   }
+#if !(MIN_VERSION_base(4,11,0))
   mappend a b = MergeFlags {
     mergeVerbosity = combine mergeVerbosity
   , mergeCabalFlags = mergeCabalFlags b
   }
     where combine field = field a `mappend` field b
+#endif
 
 defaultMergeFlags :: MergeFlags
 defaultMergeFlags = MergeFlags {
diff --git a/Merge/Dependencies.hs b/Merge/Dependencies.hs
index 807b3c9..d49ed98 100644
--- a/Merge/Dependencies.hs
+++ b/Merge/Dependencies.hs
@@ -1,3 +1,5 @@
+{-# LANGUAGE CPP #-}
+
 {- | Merge a package from hackage to an ebuild.
  -}
 module Merge.Dependencies
@@ -32,6 +34,10 @@ import qualified Portage.GHCCore as GHCCore
 
 import Debug.Trace ( trace )
 
+#if MIN_VERSION_base(4,9,0)
+import Data.Semigroup (Semigroup(..))
+#endif
+
 -- | Dependencies of an ebuild
 data EDep = EDep
   {
@@ -42,6 +48,16 @@ data EDep = EDep
   }
   deriving (Show, Eq, Ord)
 
+#if MIN_VERSION_base(4,9,0)
+instance Semigroup EDep where
+  (EDep rdepA rdep_eA depA dep_eA) <> (EDep rdepB rdep_eB depB dep_eB) = EDep
+    { rdep   = Portage.DependAllOf [rdepA, rdepB]
+    , rdep_e = rdep_eA `S.union` rdep_eB
+    , dep    = Portage.DependAllOf [depA, depB]
+    , dep_e  = dep_eA  `S.union` dep_eB
+    }
+#endif  
+  
 instance Monoid EDep where
   mempty = EDep
       {
@@ -50,12 +66,14 @@ instance Monoid EDep where
         dep = Portage.empty_dependency,
         dep_e = S.empty
       }
+#if !(MIN_VERSION_base(4,11,0))
   (EDep rdepA rdep_eA depA dep_eA) `mappend` (EDep rdepB rdep_eB depB dep_eB) = EDep
     { rdep   = Portage.DependAllOf [rdepA, rdepB]
     , rdep_e = rdep_eA `S.union` rdep_eB
     , dep    = Portage.DependAllOf [depA, depB]
     , dep_e  = dep_eA  `S.union` dep_eB
     }
+#endif
 
 resolveDependencies :: Portage.Overlay -> Cabal.PackageDescription -> Cabal.CompilerInfo
                     -> [Cabal.PackageName] -> Cabal.PackageName
diff --git a/Portage/Dependency/Print.hs b/Portage/Dependency/Print.hs
index 9c9ed02..6bd3b23 100644
--- a/Portage/Dependency/Print.hs
+++ b/Portage/Dependency/Print.hs
@@ -1,3 +1,5 @@
+{-# LANGUAGE CPP #-}
+
 module Portage.Dependency.Print
   (
     dep2str
@@ -15,6 +17,10 @@ import Text.PrettyPrint ( (<>), vcat, nest, render )
 
 import Portage.Dependency.Types
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 dispSlot :: SlotDepend -> Disp.Doc
 dispSlot AnySlot          = Disp.empty
 dispSlot AnyBuildTimeSlot = Disp.text ":="
diff --git a/Portage/PackageId.hs b/Portage/PackageId.hs
index f97148c..2aa8f0a 100644
--- a/Portage/PackageId.hs
+++ b/Portage/PackageId.hs
@@ -1,3 +1,5 @@
+{-# LANGUAGE CPP #-}
+
 -- | Portage package identifiers, which unlike Cabal ones include a category.
 --
 module Portage.PackageId (
@@ -31,6 +33,10 @@ import qualified Data.Char as Char (isAlphaNum, isSpace, toLower)
 import Distribution.Text(display)
 import System.FilePath ( (</>) )
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 newtype Category = Category { unCategory :: String }
   deriving (Eq, Ord, Show, Read)
 
diff --git a/Portage/Use.hs b/Portage/Use.hs
index e193ff6..0f29f08 100644
--- a/Portage/Use.hs
+++ b/Portage/Use.hs
@@ -1,3 +1,5 @@
+{-# LANGUAGE CPP #-}
+
 module Portage.Use (
   -- * main structures
   UseFlag(..),
@@ -13,6 +15,10 @@ import qualified Text.PrettyPrint as Disp
 import Text.PrettyPrint ((<>))
 import qualified Distribution.Text as DT
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 -- | Use variable modificator
 data UseFlag = UseFlag Use           -- ^ no modificator
              | E UseFlag             -- ^ = modificator (Equiv    mark)
diff --git a/Portage/Version.hs b/Portage/Version.hs
index 772343f..d87e9a6 100644
--- a/Portage/Version.hs
+++ b/Portage/Version.hs
@@ -1,3 +1,5 @@
+{-# LANGUAGE CPP #-}
+
 {-|
     Author      :  Andres Loeh <kosmikus@gentoo.org>
     Stability   :  provisional
@@ -26,6 +28,10 @@ import qualified Text.PrettyPrint as Disp
 import Text.PrettyPrint ((<>))
 import qualified Data.Char as Char (isAlpha, isDigit)
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 data Version = Version { versionNumber   :: [Int]         -- [1,42,3] ~= 1.42.3
                        , versionChar     :: (Maybe Char)  -- optional letter
                        , versionSuffix   :: [Suffix]
