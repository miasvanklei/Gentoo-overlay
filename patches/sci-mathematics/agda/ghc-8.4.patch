--- a/Agda.cabal	2018-04-16 00:15:19.898223521 +0200
+++ b/Agda.cabal	2018-04-16 00:14:42.154291253 +0200
@@ -121,8 +121,8 @@
     build-depends:  Win32 >= 2.2 && < 2.6
 
   build-depends:  array >= 0.5.0.0 && < 0.6
-                , async >= 2.0.2 && < 2.2
-                , base >= 4.7.0.2 && < 4.11
+                , async >= 2.0.2 && < 2.2.2
+                , base >= 4.7.0.2 && < 4.12
                 , binary >= 0.7.2.1 && < 0.9
                 , blaze-html >= 0.8 && < 0.10
                 , boxes >= 0.1.3 && < 0.2
@@ -131,7 +131,7 @@
                 , data-hash >= 0.2.0.0 && < 0.3
                 , deepseq >= 1.3.0.2 && < 1.5
                 , directory >= 1.2.0.1 && < 1.4
-                , EdisonCore >= 1.3.1.1 && < 1.3.2
+                , EdisonCore >= 1.3.1.1 && < 1.3.2.2
                 , edit-distance >= 0.2.1.2 && < 0.3
                 , equivalence >= 0.3.2 && < 0.4
                 , filepath >= 1.3.0.1 && < 1.5
@@ -164,7 +164,7 @@
                 , regex-tdfa >= 1.2.2 && < 1.3
                 , stm >= 2.4.4 && < 2.5
                 , strict >= 0.3.2 && < 0.4
-                , template-haskell >= 2.9.0.0 && < 2.13
+                , template-haskell >= 2.9.0.0 && < 2.14
                 , text >= 0.11.3.1 && < 1.3
                 , time >= 1.4.2 && < 1.9
                 -- In hTags the mtl library must be compiled with the
@@ -602,7 +602,7 @@
   hs-source-dirs:   src/agda-mode
   main-is:          Main.hs
   other-modules:    Paths_Agda
-  build-depends:    base >= 4.7.0.2 && < 4.11
+  build-depends:    base >= 4.7.0.2 && < 4.12
                   , directory >= 1.2.1.0 && < 1.4
                   , filepath >= 1.3.0.2 && < 1.5
                   , process >= 1.2.0.0 && < 1.7
--- a/src/full/Agda/Compiler/Backend.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Compiler/Backend.hs	2018-04-16 00:14:42.142291277 +0200
@@ -20,7 +20,13 @@
 import Control.Monad.State
 
 import qualified Data.List as List
+
+#if MIN_VERSION_base(4,11,0)
+import Data.Functor hiding ((<&>))
+#else
 import Data.Functor
+#endif
+
 import Data.Map (Map)
 import qualified Data.Map as Map
 
--- a/src/full/Agda/Compiler/MAlonzo/Compiler.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Compiler/MAlonzo/Compiler.hs	2018-04-16 00:14:42.143291275 +0200
@@ -2,6 +2,10 @@
 
 module Agda.Compiler.MAlonzo.Compiler where
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 #if __GLASGOW_HASKELL__ <= 708
 import Prelude hiding (foldl, mapM_, mapM, sequence, concat)
 #endif
--- a/src/full/Agda/Compiler/MAlonzo/Pretty.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Compiler/MAlonzo/Pretty.hs	2018-04-16 00:14:42.143291275 +0200
@@ -6,6 +6,10 @@
 
 module Agda.Compiler.MAlonzo.Pretty where
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 import Data.Generics.Geniplate
 import qualified Agda.Utils.Haskell.Syntax as HS
 import Text.PrettyPrint (empty)
--- a/src/full/Agda/Compiler/Treeless/Subst.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Compiler/Treeless/Subst.hs	2018-04-16 00:14:42.143291275 +0200
@@ -6,8 +6,9 @@
 import Control.Applicative
 import qualified Data.Map as Map
 import Data.Map (Map)
-import Data.Semigroup (Semigroup, Monoid, (<>), mempty, mappend, All(..), Any(..))
 import Data.Maybe
+import Data.Monoid ( Monoid, mempty, mappend )
+import Data.Semigroup ( Semigroup, (<>), All(..), Any(..) )
 
 import Agda.Syntax.Treeless
 import Agda.Syntax.Internal (Substitution'(..))
--- a/src/full/Agda/Interaction/EmacsCommand.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Interaction/EmacsCommand.hs	2018-04-16 00:14:42.151291259 +0200
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 
 ------------------------------------------------------------------------
 -- | Code for instructing Emacs to do things
@@ -14,6 +15,10 @@
   , displayRunningInfo
   ) where
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 import qualified Data.List as List
 
 import Agda.Utils.Pretty
--- a/src/full/Agda/Syntax/Abstract/Name.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Syntax/Abstract/Name.hs	2018-04-16 00:14:42.152291257 +0200
@@ -9,6 +9,10 @@
   , IsNoName(..)
   ) where
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 import Control.DeepSeq
 
 import Data.Foldable (Foldable)
--- a/src/full/Agda/Syntax/Concrete/Definitions.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Syntax/Concrete/Definitions.hs	2018-04-16 00:14:42.153291255 +0200
@@ -51,7 +51,8 @@
 import qualified Data.Map as Map
 import Data.Map (Map)
 import Data.Maybe
-import Data.Semigroup ( Semigroup, Monoid, (<>), mempty, mappend )
+import Data.Monoid ( Monoid, mempty, mappend )
+import Data.Semigroup ( Semigroup, (<>) )
 import qualified Data.List as List
 import qualified Data.Set as Set
 import Data.Traversable (Traversable, traverse)
--- a/src/full/Agda/Syntax/Concrete/Name.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Syntax/Concrete/Name.hs	2018-04-16 00:14:42.153291255 +0200
@@ -8,6 +8,10 @@
 -}
 module Agda.Syntax.Concrete.Name where
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 import Control.DeepSeq
 import Control.Applicative
 
--- a/src/full/Agda/Syntax/Concrete/Pretty.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Syntax/Concrete/Pretty.hs	2018-04-16 00:14:42.153291255 +0200
@@ -6,7 +6,11 @@
 -}
 module Agda.Syntax.Concrete.Pretty where
 
-import Prelude hiding (null)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), null )
+#else
+import Prelude hiding ( null )
+#endif
 
 import Data.Functor
 import Data.Maybe
--- a/src/full/Agda/Syntax/Internal/SanityCheck.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Syntax/Internal/SanityCheck.hs	2018-04-16 00:14:42.151291259 +0200
@@ -2,6 +2,10 @@
 -- | Sanity checking for internal syntax. Mostly checking variable scoping.
 module Agda.Syntax.Internal.SanityCheck where
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 import Control.Monad
 import qualified Data.IntSet as Set
 
--- a/src/full/Agda/Syntax/Internal.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Syntax/Internal.hs	2018-04-16 00:14:42.154291253 +0200
@@ -26,7 +26,8 @@
 import Data.Function
 import qualified Data.List as List
 import Data.Maybe
-import Data.Semigroup (Semigroup, Monoid, (<>), mempty, mappend, Sum(..))
+import Data.Monoid ( Monoid, mempty, mappend )
+import Data.Semigroup ( Semigroup, (<>), Sum(..) )
 
 import Data.Traversable
 import Data.Data (Data)
--- a/src/full/Agda/Syntax/Parser/Monad.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Syntax/Parser/Monad.hs	2018-04-16 00:14:42.152291257 +0200
@@ -31,6 +31,10 @@
     )
     where
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 import Control.Exception (catch)
 import Data.Int
 
--- a/src/full/Agda/Syntax/Position.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Syntax/Position.hs	2018-04-16 00:14:42.154291253 +0200
@@ -72,7 +72,11 @@
   , interleaveRanges
   ) where
 
-import Prelude hiding (null)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), null )
+#else
+import Prelude hiding ( null )
+#endif
 
 import Control.Applicative hiding (empty)
 import Control.Monad
--- a/src/full/Agda/Syntax/Scope/Base.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Syntax/Scope/Base.hs	2018-04-16 00:14:42.154291253 +0200
@@ -6,7 +6,11 @@
 -}
 module Agda.Syntax.Scope.Base where
 
-import Prelude hiding (null)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), null )
+#else
+import Prelude hiding ( null )
+#endif
 
 import Control.Arrow (first, second, (***))
 import Control.Applicative hiding (empty)
--- a/src/full/Agda/Syntax/Translation/ConcreteToAbstract.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Syntax/Translation/ConcreteToAbstract.hs	2018-04-16 00:14:42.153291255 +0200
@@ -24,7 +24,12 @@
     , PatName, APatName, LetDef, LetDefs
     ) where
 
-import Prelude hiding (mapM, null)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), mapM, null )
+#else
+import Prelude hiding ( mapM, null )
+#endif
+
 import Control.Applicative
 import Control.Monad.Reader hiding (mapM)
 
--- a/src/full/Agda/Syntax/Translation/InternalToAbstract.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Syntax/Translation/InternalToAbstract.hs	2018-04-16 00:14:42.153291255 +0200
@@ -30,7 +30,8 @@
 import qualified Data.List as List
 import qualified Data.Map as Map
 import Data.Maybe
-import Data.Semigroup (Semigroup, Monoid, (<>), mempty, mappend)
+import Data.Monoid ( Monoid, mempty, mappend )
+import Data.Semigroup ( Semigroup, (<>) )
 import Data.Set (Set)
 import qualified Data.Set as Set
 import Data.Traversable (Traversable, traverse, mapM)
--- a/src/full/Agda/Termination/Monad.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Termination/Monad.hs	2018-04-16 00:14:42.143291275 +0200
@@ -18,7 +18,8 @@
 
 import Data.Foldable (Foldable)
 import Data.Traversable (Traversable)
-import Data.Semigroup (Semigroup(..), Monoid(..))
+import Data.Monoid ( Monoid(..) )
+import Data.Semigroup ( Semigroup(..) )
 
 import Agda.Interaction.Options
 
--- a/src/full/Agda/Termination/TermCheck.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Termination/TermCheck.hs	2018-04-16 00:14:42.143291275 +0200
@@ -17,7 +17,11 @@
     , Result
     ) where
 
-import Prelude hiding (null)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), null )
+#else
+import Prelude hiding ( null )
+#endif
 
 import Control.Applicative hiding (empty)
 import Control.Monad.Reader
--- a/src/full/Agda/TypeChecking/CompiledClause.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/CompiledClause.hs	2018-04-16 00:14:42.146291269 +0200
@@ -13,7 +13,7 @@
 
 import qualified Data.Map as Map
 import Data.Map (Map)
-import Data.Semigroup (Semigroup, Monoid, (<>), mempty, mappend, Any(..))
+import Data.Semigroup (Semigroup, (<>), Any(..))
 import Data.Foldable (Foldable, foldMap)
 import Data.Traversable (Traversable, traverse)
 
--- a/src/full/Agda/TypeChecking/Coverage/Match.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Coverage/Match.hs	2018-04-16 00:14:42.149291263 +0200
@@ -7,7 +7,8 @@
 
 import qualified Data.List as List
 import Data.Maybe (mapMaybe, isJust)
-import Data.Semigroup (Semigroup, Monoid, (<>), mempty, mappend, mconcat, Any(..))
+import Data.Monoid ( Monoid, mempty, mappend, mconcat )
+import Data.Semigroup ( Semigroup, (<>), Any(..) )
 import Data.Traversable (traverse)
 
 import Agda.Syntax.Abstract (IsProjP(..))
--- a/src/full/Agda/TypeChecking/Errors.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Errors.hs	2018-04-16 00:14:42.150291261 +0200
@@ -16,7 +16,11 @@
   , sayWhen
   ) where
 
-import Prelude hiding (null)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), null )
+#else
+import Prelude hiding ( null )
+#endif
 
 import Control.Monad.Reader
 import Control.Monad.State
--- a/src/full/Agda/TypeChecking/Free/Lazy.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Free/Lazy.hs	2018-04-16 00:14:42.147291267 +0200
@@ -33,7 +33,8 @@
 
 import Data.Foldable (foldMap)
 import Data.IntMap (IntMap)
-import Data.Semigroup (Semigroup, Monoid, (<>), mempty, mappend, mconcat)
+import Data.Monoid ( Monoid, mempty, mappend, mconcat )
+import Data.Semigroup ( Semigroup, (<>) )
 import Data.Set (Set)
 
 import Agda.Syntax.Common
--- a/src/full/Agda/TypeChecking/Free/Old.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Free/Old.hs	2018-04-16 00:14:42.147291267 +0200
@@ -40,7 +40,8 @@
 import Control.Monad.Reader
 
 import Data.Foldable (foldMap)
-import Data.Semigroup (Semigroup, Monoid, (<>), mempty, mappend, mconcat)
+import Data.Monoid ( Monoid, mempty, mappend, mconcat )
+import Data.Semigroup ( Semigroup, (<>) )
 
 import Agda.Syntax.Common
 import Agda.Syntax.Internal
--- a/src/full/Agda/TypeChecking/Free.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Free.hs	2018-04-16 00:14:42.150291261 +0200
@@ -38,7 +38,8 @@
 import Control.Monad.Reader
 
 import Data.Maybe
-import Data.Semigroup (Semigroup, Monoid, (<>), mempty, mappend, mconcat, Any(..), All(..))
+import Data.Monoid ( Monoid, mempty, mappend, mconcat )
+import Data.Semigroup ( Semigroup, (<>), Any(..), All(..) )
 import Data.IntSet (IntSet)
 import qualified Data.IntSet as Set
 import Data.IntMap (IntMap)
--- a/src/full/Agda/TypeChecking/InstanceArguments.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/InstanceArguments.hs	2018-04-16 00:14:42.150291261 +0200
@@ -3,6 +3,10 @@
 
 module Agda.TypeChecking.InstanceArguments where
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 import Control.Applicative hiding (empty)
 import Control.Monad.Reader
 import Control.Monad.State
--- a/src/full/Agda/TypeChecking/Monad/Base.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Monad/Base.hs	2018-04-16 00:14:42.149291263 +0200
@@ -23,9 +23,10 @@
 import Data.Maybe
 import Data.Map (Map)
 import qualified Data.Map as Map -- hiding (singleton, null, empty)
+import Data.Monoid ( Monoid, mempty, mappend )
 import Data.Set (Set)
 import qualified Data.Set as Set -- hiding (singleton, null, empty)
-import Data.Semigroup (Semigroup, Monoid, (<>), mempty, mappend, Any(..))
+import Data.Semigroup ( Semigroup, (<>), Any(..) )
 import Data.Data (Data, toConstr)
 import Data.Typeable (Typeable)
 import Data.Foldable (Foldable)
--- a/src/full/Agda/TypeChecking/Monad/Debug.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Monad/Debug.hs	2018-04-16 00:14:42.149291263 +0200
@@ -10,7 +10,8 @@
 import Control.Monad.Writer
 
 import Data.Maybe
-import Data.Semigroup (Semigroup, Monoid, (<>), mempty, mappend, Any(..))
+import Data.Monoid ( Monoid, mempty, mappend )
+import Data.Semigroup ( Semigroup, (<>), Any(..) )
 import Data.Traversable
 
 import {-# SOURCE #-} Agda.TypeChecking.Errors
--- a/src/full/Agda/TypeChecking/Positivity.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Positivity.hs	2018-04-16 00:14:42.150291261 +0200
@@ -5,7 +5,11 @@
 -- | Check that a datatype is strictly positive.
 module Agda.TypeChecking.Positivity where
 
-import Prelude hiding (null)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), null )
+#else
+import Prelude hiding ( null )
+#endif
 
 import Control.Applicative hiding (empty)
 import Control.DeepSeq
--- a/src/full/Agda/TypeChecking/Pretty.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Pretty.hs	2018-04-16 00:14:42.150291261 +0200
@@ -14,7 +14,11 @@
 
 module Agda.TypeChecking.Pretty where
 
-import Prelude hiding (null)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), null )
+#else
+import Prelude hiding ( null )
+#endif
 
 import Control.Applicative hiding (empty)
 import Control.Monad
--- a/src/full/Agda/TypeChecking/Records.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Records.hs	2018-04-16 00:14:42.146291269 +0200
@@ -3,6 +3,10 @@
 
 module Agda.TypeChecking.Records where
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 -- import Control.Applicative
 import Control.Monad
 
--- a/src/full/Agda/TypeChecking/Rules/Decl.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Rules/Decl.hs	2018-04-16 00:14:42.148291265 +0200
@@ -3,7 +3,11 @@
 
 module Agda.TypeChecking.Rules.Decl where
 
-import Prelude hiding (null)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), null )
+#else
+import Prelude hiding ( null )
+#endif
 
 import Control.Monad
 import Control.Monad.Reader
--- a/src/full/Agda/TypeChecking/Rules/LHS/Problem.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Rules/LHS/Problem.hs	2018-04-16 00:14:42.148291265 +0200
@@ -7,7 +7,8 @@
 import Control.Applicative hiding (empty)
 import Data.Foldable ( Foldable )
 import Data.Maybe ( fromMaybe )
-import Data.Semigroup (Semigroup, Monoid, (<>), mempty, mappend, mconcat)
+import Data.Monoid ( Monoid, mempty, mappend, mconcat )
+import Data.Semigroup ( Semigroup, (<>) )
 import Data.Traversable
 
 import Agda.Syntax.Common
--- a/src/full/Agda/TypeChecking/Rules/Term.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Rules/Term.hs	2018-04-16 00:14:42.148291265 +0200
@@ -3,7 +3,11 @@
 
 module Agda.TypeChecking.Rules.Term where
 
-import Prelude hiding (null)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), null )
+#else
+import Prelude hiding ( null )
+#endif
 
 import Control.Applicative hiding (empty)
 import Control.Arrow ((&&&), (***), first, second)
--- a/src/full/Agda/TypeChecking/SizedTypes/Syntax.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/SizedTypes/Syntax.hs	2018-04-16 00:14:42.147291267 +0200
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP                        #-}
 {-# LANGUAGE GeneralizedNewtypeDeriving #-}
 {-# LANGUAGE NoMonomorphismRestriction  #-}
 {-# LANGUAGE UndecidableInstances       #-}
@@ -6,7 +7,11 @@
 
 module Agda.TypeChecking.SizedTypes.Syntax where
 
-import Prelude hiding (null)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), null )
+#else
+import Prelude hiding ( null )
+#endif
 
 import Data.Maybe
 import Data.Foldable (Foldable)
--- a/src/full/Agda/TypeChecking/SizedTypes/WarshallSolver.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/SizedTypes/WarshallSolver.hs	2018-04-16 00:14:42.147291267 +0200
@@ -3,7 +3,11 @@
 
 module Agda.TypeChecking.SizedTypes.WarshallSolver where
 
-import Prelude hiding (null, truncate)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), null, truncate )
+#else
+import Prelude hiding ( null, truncate )
+#endif
 
 import Control.Applicative hiding (Const, empty)
 import Control.Monad
--- a/src/full/Agda/TypeChecking/Substitute.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Substitute.hs	2018-04-16 00:14:42.150291261 +0200
@@ -24,7 +24,13 @@
 
 import Control.Applicative
 import Data.Function
+
+#if MIN_VERSION_base(4,11,0)
+import Data.Functor hiding ((<&>))
+#else
 import Data.Functor
+#endif
+
 import qualified Data.List as List
 import Data.Map (Map)
 import Data.Maybe
--- a/src/full/Agda/TypeChecking/Unquote.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/TypeChecking/Unquote.hs	2018-04-16 00:14:42.150291261 +0200
@@ -2,6 +2,10 @@
 
 module Agda.TypeChecking.Unquote where
 
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ((<>))
+#endif
+
 import Control.Arrow ((&&&), (***), first, second)
 import Control.Applicative
 import Control.Monad.State (StateT(..), evalStateT, get, gets, put, modify)
--- a/src/full/Agda/Utils/Graph/AdjacencyMap/Unidirectional.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Utils/Graph/AdjacencyMap/Unidirectional.hs	2018-04-16 00:14:42.145291271 +0200
@@ -62,7 +62,12 @@
   )
   where
 
-import Prelude hiding (lookup, unzip, null)
+#if MIN_VERSION_base(4,11,0)
+import Prelude hiding ( (<>), lookup, null, unzip )
+#else
+import Prelude hiding ( lookup, null, unzip )
+#endif
+
 
 import Control.Applicative hiding (empty)
 import Control.Monad
--- a/src/full/Agda/Utils/Maybe/Strict.hs	2017-09-09 00:14:44.000000000 +0200
+++ b/src/full/Agda/Utils/Maybe/Strict.hs	2018-04-16 00:14:42.145291271 +0200
@@ -36,7 +36,8 @@
 import           Control.DeepSeq     (NFData (..))
 import           Data.Binary         (Binary (..))
 import           Data.Data           (Data (..))
-import           Data.Semigroup      (Semigroup, Monoid, (<>), mempty, mappend)
+import           Data.Monoid         (Monoid, mempty, mappend)
+import           Data.Semigroup      (Semigroup, (<>))
 import           Data.Foldable       (Foldable (..))
 import           Data.Traversable    (Traversable (..))
 import           Data.Typeable       (Typeable)
