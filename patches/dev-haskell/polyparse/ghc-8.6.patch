From 8a69ee7e57db798c106d8b56dce05b1dfc4fed37 Mon Sep 17 00:00:00 2001
From: Adam Bergmark <adam@bergmark.nl>
Date: Sun, 12 Aug 2018 22:44:17 +0200
Subject: [PATCH] GHC 8.6 support

---
 src/Text/Parse.hs                                 | 2 +-
 src/Text/Parse/ByteString.hs                      | 2 +-
 src/Text/ParserCombinators/Poly/ByteStringChar.hs | 6 ++++++
 src/Text/ParserCombinators/Poly/Parser.hs         | 7 +++++++
 src/Text/ParserCombinators/Poly/StateText.hs      | 6 ++++++
 5 files changed, 21 insertions(+), 2 deletions(-)

diff --git a/src/Text/Parse.hs b/src/Text/Parse.hs
index 8e50ecd..958301b 100644
--- a/src/Text/Parse.hs
+++ b/src/Text/Parse.hs
@@ -1,5 +1,5 @@
 module Text.Parse
-  ( -- * The Parse class is a replacement for the standard Read class. 
+  ( -- * The Parse class is a replacement for the standard Read class.
     -- $parser
     TextParser	-- synonym for Parser Char, i.e. string input, no state
   , Parse(..)	-- instances: (), (a,b), (a,b,c), Maybe a, Either a, [a],
diff --git a/src/Text/Parse/ByteString.hs b/src/Text/Parse/ByteString.hs
index a8a8a9b..8c3d732 100644
--- a/src/Text/Parse/ByteString.hs
+++ b/src/Text/Parse/ByteString.hs
@@ -1,5 +1,5 @@
 module Text.Parse.ByteString
-  ( -- * The Parse class is a replacement for the standard Read class. 
+  ( -- * The Parse class is a replacement for the standard Read class.
     --   This particular instance reads from ByteString rather than String.
     -- $parser
     TextParser	-- synonym for Text.ParserCombinators.Poly.ByteString
diff --git a/src/Text/ParserCombinators/Poly/ByteStringChar.hs b/src/Text/ParserCombinators/Poly/ByteStringChar.hs
index 27b238a..cbef034 100644
--- a/src/Text/ParserCombinators/Poly/ByteStringChar.hs
+++ b/src/Text/ParserCombinators/Poly/ByteStringChar.hs
@@ -17,12 +17,15 @@ module Text.ParserCombinators.Poly.ByteStringChar
   , module Text.ParserCombinators.Poly.Base
   ) where
 
+import Prelude hiding (fail)
+import qualified Prelude as P (fail)
 
 import Text.ParserCombinators.Poly.Base
 import Text.ParserCombinators.Poly.Result
 import qualified Data.ByteString.Lazy.Char8 as BS
 import Data.ByteString.Lazy.Char8 (ByteString)
 import Control.Applicative
+import Control.Monad.Fail
 
 -- | This @Parser@ datatype is a specialised parsing monad with error
 --   reporting.  Whereas the standard version can be used for arbitrary
@@ -45,6 +48,9 @@ instance Monad Parser where
         continue (Committed r)              = Committed (continue r)
         continue (Failure ts e)             = Failure ts e
 
+instance MonadFail Parser where
+    fail e       = P (\ts-> Failure ts e)
+
 instance Commitment Parser where
     commit (P p)         = P (Committed . squash . p)
       where
diff --git a/src/Text/ParserCombinators/Poly/Parser.hs b/src/Text/ParserCombinators/Poly/Parser.hs
index 66a320c..dbff954 100644
--- a/src/Text/ParserCombinators/Poly/Parser.hs
+++ b/src/Text/ParserCombinators/Poly/Parser.hs
@@ -17,9 +17,13 @@ module Text.ParserCombinators.Poly.Parser
   , reparse	-- :: [t] -> Parser t ()
   ) where
 
+import Prelude hiding (fail)
+import qualified Prelude as P
+
 import Text.ParserCombinators.Poly.Base
 import Text.ParserCombinators.Poly.Result
 import Control.Applicative
+import Control.Monad.Fail
 
 -- | This @Parser@ datatype is a fairly generic parsing monad with error
 --   reporting.  It can be used for arbitrary token types, not just
@@ -46,6 +50,9 @@ instance Monad (Parser t) where
         continue (Committed r)              = Committed (continue r)
         continue (Failure ts e)             = Failure ts e
 
+instance MonadFail (Parser t) where
+    fail e       = P (\ts-> Failure ts e)
+
 instance Alternative (Parser t) where
     empty     = fail "no parse"
     p <|> q   = p `onFail` q
diff --git a/src/Text/ParserCombinators/Poly/StateText.hs b/src/Text/ParserCombinators/Poly/StateText.hs
index 1823890..4836f1e 100644
--- a/src/Text/ParserCombinators/Poly/StateText.hs
+++ b/src/Text/ParserCombinators/Poly/StateText.hs
@@ -22,12 +22,15 @@ module Text.ParserCombinators.Poly.StateText
   , module Control.Applicative
   ) where
 
+import Prelude hiding (fail)
+import qualified Prelude as P
 
 import Text.ParserCombinators.Poly.Base
 import Text.ParserCombinators.Poly.Result
 import qualified Data.Text.Lazy as T
 import Data.Text.Lazy (Text)
 import Control.Applicative
+import Control.Monad.Fail
 
 -- | This @Parser@ datatype is a specialised parsing monad with error
 --   reporting.  Whereas the standard version can be used for arbitrary
@@ -52,6 +55,9 @@ instance Monad (Parser s) where
         continue (Committed r)              = Committed (continue r)
         continue (Failure ts e)             = Failure ts e
 
+instance MonadFail (Parser s) where
+  fail e = P (\s ts-> Failure (ts,s) e)
+
 instance Commitment (Parser s) where
     commit (P p)         = P (\s-> Committed . squash . p s)
       where
