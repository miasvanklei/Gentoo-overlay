--- a/crypto/bn/asm/armv4-gf2m.pl	2015-03-19 06:30:36.000000000 -0700
+++ b/crypto/bn/asm/armv4-gf2m.pl	2015-06-18 17:09:19.806253552 -0700
@@ -211,12 +211,12 @@
 .fpu	neon
 
 .align	5
 .LNEON:
 	ldr		r12, [sp]		@ 5th argument
-	vmov.32		$a, r2, r1
-	vmov.32		$b, r12, r3
+	vmov		$a, r2, r1
+	vmov		$b, r12, r3
 	vmov.i64	$k48, #0x0000ffffffffffff
 	vmov.i64	$k32, #0x00000000ffffffff
 	vmov.i64	$k16, #0x000000000000ffff
 
 	vext.8		$t0#lo, $a, $a, #1	@ A1
--- a/crypto/sha/asm/sha256-armv4.pl	2015-07-09 04:57:15.000000000 -0700
+++ b/crypto/sha/asm/sha256-armv4.pl	2015-08-04 10:33:16.561541526 -0700
@@ -593,12 +593,23 @@
 	vld1.32	{$ABCD,$EFGH},[$ctx]
 # ifdef __thumb2__
 	adr	$Ktbl,.LARMv8
 	sub	$Ktbl,$Ktbl,#.LARMv8-K256
 # else
+# ifdef __clang__
+	@ This code may execute at any random address,
+	@ so using pc-relative to calculating $Ktbl.
+	push	{$len}
+	adr	$Ktbl,.LARMv8
+	ldr	$len,=K256
+	sub	$len,$Ktbl,$len
+	sub	$Ktbl,$Ktbl,$len
+	pop	{$len}
+# else
 	adrl	$Ktbl,K256
 # endif
+# endif
 	add	$len,$inp,$len,lsl#6	@ len to point at the end of inp
 
 .Loop_v8:
 	vld1.8		{@MSG[0]-@MSG[1]},[$inp]!
 	vld1.8		{@MSG[2]-@MSG[3]},[$inp]!
--- a/Makefile.shared     2018-02-04 18:46:57.797214647 +0100
+++ b/Makefile.shared     2018-02-04 18:00:51.587213328 +0100
@@ -153,7 +153,7 @@
        SHLIB_SUFFIX=; \
        ALLSYMSFLAGS='-Wl,--whole-archive'; \
        NOALLSYMSFLAGS='-Wl,--no-whole-archive'; \
-       SHAREDFLAGS="$(CFLAGS) $(SHARED_LDFLAGS) -shared -Wl,-Bsymbolic -Wl,-soname=$$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX"
+       SHAREDFLAGS="$(CFLAGS) $(SHARED_LDFLAGS) -shared -Wl,-z,notext -Wl,-Bsymbolic -Wl,-soname=$$SHLIB$$SHLIB_SOVER$$SHLIB_SUFFIX"
 
 DO_GNU_APP=LDFLAGS="$(LDFLAGS) $(CFLAGS)"
 
