reverted:
--- b/vcl/inc/unx/gtk/gtkinst.hxx
+++ a/vcl/inc/unx/gtk/gtkinst.hxx
@@ -20,10 +20,6 @@
 #ifndef INCLUDED_VCL_INC_UNX_GTK_GTKINST_HXX
 #define INCLUDED_VCL_INC_UNX_GTK_GTKINST_HXX
 
-#include <sal/config.h>
-
-#include <stack>
-
 #include <unx/salinst.h>
 #include <unx/gensys.h>
 #include <headless/svpinst.hxx>
@@ -46,7 +42,7 @@
 class GenPspGraphics;
 class GtkYieldMutex : public SalYieldMutex
 {
+    thread_local static sal_uIntPtr yieldCount;
-    thread_local static std::stack<sal_uIntPtr> yieldCounts;
 
 public:
          GtkYieldMutex() {}
reverted:
--- b/vcl/unx/gtk/gtkinst.cxx
+++ a/vcl/unx/gtk/gtkinst.cxx
@@ -296,26 +296,22 @@
  * for each pair, so we can accurately restore
  * it later.
  */
+thread_local sal_uIntPtr GtkYieldMutex::yieldCount;
-thread_local std::stack<sal_uIntPtr> GtkYieldMutex::yieldCounts;
 
 void GtkYieldMutex::ThreadsEnter()
 {
     acquire();
+    for (; yieldCount != 0; --yieldCount) {
+        acquire();
-    if (!yieldCounts.empty()) {
-        auto n = yieldCounts.top();
-        yieldCounts.pop();
-        for (; n != 0; --n) {
-            acquire();
-        }
     }
 }
 
 void GtkYieldMutex::ThreadsLeave()
 {
     assert(mnCount != 0);
+    assert(yieldCount == 0);
+    yieldCount = mnCount - 1;
+    for (sal_uIntPtr i = 0; i != yieldCount + 1; ++i) {
-    auto n = mnCount - 1;
-    yieldCounts.push(n);
-    for (sal_uIntPtr i = 0; i != n + 1; ++i) {
         release();
     }
 }
