--- a/chromium/third_party/lss/linux_syscall_support.h
+++ b/chromium/third_party/lss/linux_syscall_support.h
@@ -1127,6 +1127,12 @@
 #ifndef __NR_fallocate
 #define __NR_fallocate          285
 #endif
+
+#undef __NR_pread
+#define __NR_pread __NR_pread64
+#undef __NR_pwrite
+#define __NR_pwrite __NR_pwrite64
+
 /* End of x86-64 definitions                                                 */
 #elif defined(__mips__)
 #if _MIPS_SIM == _MIPS_SIM_ABI32
--- a/chromium/sandbox/linux/suid/process_util.h
+++ b/chromium/sandbox/linux/suid/process_util.h
@@ -11,6 +11,14 @@
 #include <stdbool.h>
 #include <sys/types.h>
 
+// Some additional functions
+# define TEMP_FAILURE_RETRY(expression) \
+	(__extension__			\
+	 ({ long int __result;		\
+	  do __result = (long int) (expression); \
+	  while (__result == -1L && errno == EINTR); \
+	  __result; }))
+
 // This adjusts /proc/process/oom_score_adj so the Linux OOM killer
 // will prefer certain process types over others. The range for the
 // adjustment is [-1000, 1000], with [0, 1000] being user accessible.
--- a/chromium/sandbox/linux/seccomp-bpf/trap.cc
+++ b/chromium/sandbox/linux/seccomp-bpf/trap.cc
@@ -156,7 +156,7 @@
   // most versions of glibc don't include this information in siginfo_t. So,
   // we need to explicitly copy it into a arch_sigsys structure.
   struct arch_sigsys sigsys;
-  memcpy(&sigsys, &info->_sifields, sizeof(sigsys));
+  memcpy(&sigsys, &info->__si_fields, sizeof(sigsys));
 
 #if defined(__mips__)
   // When indirect syscall (syscall(__NR_foo, ...)) is made on Mips, the
--- a/chromium/net/dns/dns_config_service_posix.cc
+++ b/chromium/net/dns/dns_config_service_posix.cc
@@ -116,7 +116,7 @@
 ConfigParsePosixResult ReadDnsConfig(DnsConfig* config) {
   ConfigParsePosixResult result;
   config->unhandled_options = false;
-#if defined(OS_OPENBSD)
+#if defined(OS_OPENBSD) || defined(_GNU_SOURCE)
   // Note: res_ninit in glibc always returns 0 and sets RES_INIT.
   // res_init behaves the same way.
   memset(&_res, 0, sizeof(_res));
--- a/chromium/device/serial/serial_io_handler_posix.cc
+++ b/chromium/device/serial/serial_io_handler_posix.cc
@@ -6,6 +6,7 @@
 
 #include <sys/ioctl.h>
 #include <termios.h>
+#include <asm-generic/ioctls.h>
 
 #include "base/posix/eintr_wrapper.h"
 
--- a/chromium/third_party/ots/include/opentype-sanitiser.h    2015-11-29 20:57:44.090326971 +0100
+++ b/chromium/third_party/ots/include/opentype-sanitiser.h        2015-11-29 20:58:20.963225505 +0100
@@ -24,6 +24,7 @@
 #include <stdint.h>
 #endif
 
+#include <sys/types.h>
 #include <algorithm>
 #include <cassert>
 #include <cstddef>
--- a/chromium/third_party/WebKit/Source/platform/heap/GCInfo.cpp      2015-11-29 20:57:42.365387784 +0100
+++ b/chromium/third_party/WebKit/Source/platform/heap/GCInfo.cpp  2015-11-29 20:58:08.738551520 +0100
@@ -5,6 +5,7 @@
 #include "config.h"
 #include "platform/heap/GCInfo.h"
 
+#include <malloc.h>
 #include "platform/heap/Handle.h"
 #include "platform/heap/Heap.h"
 
--- a/chromium/base/logging.cc	2016-06-22 17:46:30.918820313 +0200
+++ b/chromium/base/logging.cc	2016-06-22 17:46:44.417819202 +0200
@@ -515,7 +515,7 @@
 }
 
 LogMessage::~LogMessage() {
-#if !defined(OFFICIAL_BUILD) && !defined(OS_NACL) && !defined(__UCLIBC__)
+#if !defined(OFFICIAL_BUILD) && !defined(OS_NACL) && defined(__GLIBC__)
   if (severity_ == LOG_FATAL && !base::debug::BeingDebugged()) {
     // Include a stack trace on a fatal, unless a debugger is attached.
     base::debug::StackTrace trace;
--- a/chromium/third_party/WebKit/Source/platform/heap/StackFrameDepth.cpp
+++ b/chromium/third_party/WebKit/Source/platform/heap/StackFrameDepth.cpp
@@ -68,7 +68,7 @@
 // FIXME: On Mac OSX and Linux, this method cannot estimate stack size
 // correctly for the main thread.
 
-#if defined(__GLIBC__) || OS(ANDROID) || OS(FREEBSD)
+#if OS(LINUX) || OS(ANDROID) || OS(FREEBSD)
   // pthread_getattr_np() can fail if the thread is not invoked by
   // pthread_create() (e.g., the main thread of webkit_unit_tests).
   // If so, a conservative size estimate is returned.
@@ -135,7 +135,7 @@
 }
 
 void* StackFrameDepth::getStackStart() {
-#if defined(__GLIBC__) || OS(ANDROID) || OS(FREEBSD)
+#if OS(LINUX) || OS(ANDROID) || OS(FREEBSD)
   pthread_attr_t attr;
   int error;
 #if OS(FREEBSD)
--- a/chromium/base/debug/stack_trace.cc	2017-07-30 19:10:22.913932578 +0200
+++ b/chromium/base/debug/stack_trace.cc	2017-07-30 19:10:59.653931727 +0200
@@ -211,7 +211,7 @@
 
 std::string StackTrace::ToString() const {
   std::stringstream stream;
-#if !defined(__UCLIBC__)
+#if defined(__GLIBC__)
   OutputToStream(&stream);
 #endif
   return stream.str();
