--- a/src/basic/log.c
+++ b/src/basic/log.c
@@ -832,10 +832,6 @@
                 if (r < 0)
                         return -EINVAL;
 
-                /* Now, jump enough ahead, so that we point to
-                 * the next format string */
-                VA_FORMAT_ADVANCE(format, ap);
-
                 IOVEC_SET_STRING(iovec[(*n)++], m);
 
                 if (newline_separator) {
@@ -844,7 +840,7 @@
                         (*n)++;
                 }
 
-                format = va_arg(ap, char *);
+                format = next_format(format, &ap);
         }
         return 0;
 }
@@ -926,9 +922,7 @@
                         break;
                 }
 
-                VA_FORMAT_ADVANCE(format, ap);
-
-                format = va_arg(ap, char *);
+                format = next_format(format, &ap);
         }
         va_end(ap);
 
--- a/src/basic/stdio-util.h
+++ b/src/basic/stdio-util.h
@@ -29,48 +29,62 @@
 #define xsprintf(buf, fmt, ...) \
         assert_message_se((size_t) snprintf(buf, ELEMENTSOF(buf), fmt, __VA_ARGS__) < ELEMENTSOF(buf), "xsprintf: " #buf "[] must be big enough")
 
+static inline const char *next_format(const char *format, va_list *ap) {
 
-#define VA_FORMAT_ADVANCE(format, ap)                                   \
-do {                                                                    \
-        int _argtypes[128];                                             \
-        size_t _i, _k;                                                  \
-        _k = parse_printf_format((format), ELEMENTSOF(_argtypes), _argtypes); \
-        assert(_k < ELEMENTSOF(_argtypes));                             \
-        for (_i = 0; _i < _k; _i++) {                                   \
-                if (_argtypes[_i] & PA_FLAG_PTR)  {                     \
-                        (void) va_arg(ap, void*);                       \
-                        continue;                                       \
-                }                                                       \
-                                                                        \
-                switch (_argtypes[_i]) {                                \
-                case PA_INT:                                            \
-                case PA_INT|PA_FLAG_SHORT:                              \
-                case PA_CHAR:                                           \
-                        (void) va_arg(ap, int);                         \
-                        break;                                          \
-                case PA_INT|PA_FLAG_LONG:                               \
-                        (void) va_arg(ap, long int);                    \
-                        break;                                          \
-                case PA_INT|PA_FLAG_LONG_LONG:                          \
-                        (void) va_arg(ap, long long int);               \
-                        break;                                          \
-                case PA_WCHAR:                                          \
-                        (void) va_arg(ap, wchar_t);                     \
-                        break;                                          \
-                case PA_WSTRING:                                        \
-                case PA_STRING:                                         \
-                case PA_POINTER:                                        \
-                        (void) va_arg(ap, void*);                       \
-                        break;                                          \
-                case PA_FLOAT:                                          \
-                case PA_DOUBLE:                                         \
-                        (void) va_arg(ap, double);                      \
-                        break;                                          \
-                case PA_DOUBLE|PA_FLAG_LONG_DOUBLE:                     \
-                        (void) va_arg(ap, long double);                 \
-                        break;                                          \
-                default:                                                \
-                        assert_not_reached("Unknown format string argument."); \
-                }                                                       \
-        }                                                               \
-} while (false)
+        char lm, *cs, *fc, *format_copy, *format_ptr;
+
+        if ( (fc = strchr(format, '%')) ) {
+
+                format_copy = strndup(fc, LINE_MAX);
+
+                // remove any non-format spec % chars
+                while ( (fc = strstr(format_copy, "%%")) )
+                        *(fc+1) = *fc = ' ';
+
+                cs = strtok_r(format_copy, "%", &format_ptr);
+                // no need to worry about 'h' or 'hh' length modifiers as these will promoted to ints
+                do {
+                        lm = 0;
+
+                        while (*cs) {
+                                switch(*cs++) {
+                                   case 'l':
+                                           lm = (lm == 'l') ? 'L' : 'l';
+                                           break;
+                                   case 'L':
+                                           lm = 'l';
+                                           break;
+                                   case 's':
+                                           va_arg(*ap, char *);
+                                           *cs = 0;
+                                           break;
+                                   case 'u': case 'd': case 'i': case 'x': case 'X': case 'c': case 'o':
+                                           if (!lm)
+                                                   va_arg(*ap, int);
+                                           else if (lm == 'l')
+                                                   va_arg(*ap, long);
+                                           else if (lm == 'L')
+                                                   va_arg(*ap, long long);
+                                           else
+                                                   va_arg(*ap, int);
+                                           *cs = 0;
+                                           break;
+                                   case 'e': case 'f': case 'g': case 'E': case 'F': case 'G':
+                                           if (lm != 'l')
+                                                   va_arg(*ap, double);
+                                           else
+                                                   va_arg(*ap, long double);
+                                           *cs = 0;
+                                           break;
+                                   case 'p':
+                                           va_arg(*ap, void *);
+                                           *cs = 0;
+                                           break;
+                                }
+                        }
+                } while( (cs = strtok_r(NULL, "%", &format_ptr)) );
+
+                free(format_copy);
+        }
+        return va_arg(*ap, char *);
+}
--- a/src/journal/journal-send.c
+++ b/src/journal/journal-send.c
@@ -163,13 +163,11 @@
                 }
                 va_end(aq);
 
-                VA_FORMAT_ADVANCE(format, ap);
-
                 (void) strstrip(buffer); /* strip trailing whitespace, keep prefixing whitespace */
 
                 IOVEC_SET_STRING(iov[i++], buffer);
 
-                format = va_arg(ap, char *);
+                format = next_format(format, &ap);
         }
 
         *_iov = iov;
