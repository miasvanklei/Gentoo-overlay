diff --git a/src/Haskell/Ide/Engine/Plugin/Build.hs b/src/Haskell/Ide/Engine/Plugin/Build.hs
index 1c83221..a473bfe 100644
--- a/src/Haskell/Ide/Engine/Plugin/Build.hs
+++ b/src/Haskell/Ide/Engine/Plugin/Build.hs
@@ -31,7 +31,7 @@ import Distribution.Simple.Setup (defaultDistPref)
 import Distribution.Simple.Configure (localBuildInfoFile)
 import Distribution.Package (pkgName, unPackageName)
 import Distribution.PackageDescription
-import Distribution.PackageDescription.Parse
+import Distribution.PackageDescription.Parsec
 import qualified Distribution.Verbosity as Verb
 
 import Data.Yaml
diff --git a/src/Haskell/Ide/Engine/Plugin/HieExtras.hs b/src/Haskell/Ide/Engine/Plugin/HieExtras.hs
index 6bda1fc..4bfa104 100644
--- a/src/Haskell/Ide/Engine/Plugin/HieExtras.hs
+++ b/src/Haskell/Ide/Engine/Plugin/HieExtras.hs
@@ -2,6 +2,8 @@
 {-# LANGUAGE NamedFieldPuns      #-}
 {-# LANGUAGE ScopedTypeVariables #-}
 {-# LANGUAGE OverloadedStrings   #-}
+{-# LANGUAGE FlexibleContexts   #-}
+
 module Haskell.Ide.Engine.Plugin.HieExtras
   ( getDynFlags
   , getSymbols
@@ -110,7 +112,7 @@ getSymbols uri = pluginGetFile "getSymbols: " uri $ \file -> do
               decls = concatMap (go . unLoc) $ hsmodDecls hsMod
               s x = showName <$> x
 
-              go :: HsDecl RdrName -> [(J.SymbolKind,Located T.Text,Maybe T.Text)]
+              go :: HsDecl GhcPs -> [(J.SymbolKind,Located T.Text,Maybe T.Text)]
               go (TyClD FamDecl { tcdFam = FamilyDecl { fdLName = n } }) = pure (J.SkClass, s n, Nothing)
               go (TyClD SynDecl { tcdLName = n }) = pure (J.SkClass, s n, Nothing)
               go (TyClD DataDecl { tcdLName = n, tcdDataDefn = HsDataDefn { dd_cons = cons } }) =
@@ -128,14 +130,14 @@ getSymbols uri = pluginGetFile "getSymbols: " uri $ \file -> do
               go _ = []
 
               processSig :: T.Text
-                         -> Sig RdrName
+                         -> Sig GhcPs
                          -> [(J.SymbolKind, Located T.Text, Maybe T.Text)]
               processSig cnt (ClassOpSig False names _) =
                 map (\n ->(J.SkMethod,s n, Just cnt)) names
               processSig _ _ = []
 
               processCon :: T.Text
-                         -> ConDecl RdrName
+                         -> ConDecl GhcPs
                          -> [(J.SymbolKind, Located T.Text, Maybe T.Text)]
               processCon cnt ConDeclGADT { con_names = names } =
                 map (\n -> (J.SkConstructor, s n, Just cnt)) names
@@ -150,7 +152,7 @@ getSymbols uri = pluginGetFile "getSymbols: " uri $ \file -> do
                                          where f ln = (J.SkField, s ln, Just (unLoc sn))
                     _ -> []
 
-              goImport :: ImportDecl RdrName -> [(J.SymbolKind, Located T.Text, Maybe T.Text)]
+              goImport :: ImportDecl GhcPs -> [(J.SymbolKind, Located T.Text, Maybe T.Text)]
               goImport ImportDecl { ideclName = lmn, ideclAs = as, ideclHiding = meis } = a ++ xs
                 where
                   im = (J.SkModule, lsmn, Nothing)
