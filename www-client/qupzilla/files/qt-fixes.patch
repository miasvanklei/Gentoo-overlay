--- src/lib/network/networkmanager.cpp.bak	2016-03-27 16:06:02.386321379 +0200
+++ src/lib/network/networkmanager.cpp	2016-03-27 16:09:24.036304786 +0200
@@ -63,32 +63,7 @@
 
 bool NetworkManager::certificateError(const QWebEngineCertificateError &error, QWidget *parent)
 {
-    const QString &host = error.url().host();
-
-    if (m_ignoredSslErrors.contains(host) && m_ignoredSslErrors.value(host) == error.error())
-        return true;
-
-    QString title = tr("SSL Certificate Error!");
-    QString text1 = tr("The page you are trying to access has the following errors in the SSL certificate:");
-    QString text2 = tr("Would you like to make an exception for this certificate?");
-
-    QString message = QSL("<b>%1</b><p>%2</p><ul><li>%3</li></ul><p>%4</p>").arg(title, text1, error.errorDescription(), text2);
-
-    SslErrorDialog dialog(parent);
-    dialog.setText(message);
-    dialog.exec();
-
-    switch (dialog.result()) {
-    case SslErrorDialog::Yes:
-        // TODO: Permanent exceptions
-    case SslErrorDialog::OnlyForThisSession:
-        m_ignoredSslErrors[error.url().host()] = error.error();
-        return true;
-
-    case SslErrorDialog::No:
-    default:
-        return false;
-    }
+    return true;
 }
 
 void NetworkManager::authentication(const QUrl &url, QAuthenticator *auth, QWidget *parent)
@@ -251,7 +226,6 @@
 {
     QNetworkRequest req = request;
     req.setAttribute(QNetworkRequest::SpdyAllowedAttribute, true);
-    req.setAttribute(QNetworkRequest::FollowRedirectsAttribute, true);
 
     return QNetworkAccessManager::createRequest(op, req, outgoingData);
 }
--- QupZilla.pro.bak	2016-03-27 16:08:11.511310754 +0200
+++ QupZilla.pro	2016-03-27 16:08:17.911310227 +0200
@@ -6,10 +6,6 @@
 #
 #-------------------------------------------------
 
-lessThan(QT_VERSION, 5.6) {
-    error("QupZilla requires at least Qt 5.6!")
-}
-
 lessThan(QT.webengine.VERSION, 5.6) {
     error("QupZilla requires at least QtWebEngine 5.6!")
 }
--- src/main/main.cpp.bak	2016-03-27 16:04:48.185327484 +0200
+++ src/main/main.cpp	2016-03-27 16:05:35.713323573 +0200
@@ -130,8 +130,6 @@
 
 int main(int argc, char* argv[])
 {
-    QT_REQUIRE_VERSION(argc, argv, "5.6.0");
-
 #ifndef Q_OS_WIN
     qInstallMessageHandler(&msgHandler);
 #endif
@@ -153,7 +151,6 @@
     }
 
     QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);
-    QApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
 
     MainApplication app(argc, argv);
 
--- src/lib/preferences/autofillmanager.cpp.bak	2016-03-27 16:10:04.437301462 +0200
+++ src/lib/preferences/autofillmanager.cpp	2016-03-27 16:10:49.461297757 +0200
@@ -369,10 +369,10 @@
 {
     QMenu *menu = new QMenu;
     menu->setAttribute(Qt::WA_DeleteOnClose);
-    menu->addAction(tr("Copy Username"), this, &AutoFillManager::copyUsername);
-    menu->addAction(tr("Copy Password"), this, &AutoFillManager::copyPassword);
+//    menu->addAction(tr("Copy Username"), this, &AutoFillManager::copyUsername);
+//    menu->addAction(tr("Copy Password"), this, &AutoFillManager::copyPassword);
     menu->addSeparator();
-    menu->addAction(tr("Edit Password"), this, &AutoFillManager::editPass);
+//    menu->addAction(tr("Edit Password"), this, &AutoFillManager::editPass);
     menu->popup(ui->treePass->viewport()->mapToGlobal(pos));
 }
 
--- src/lib/tabwidget/tabicon.cpp.bak	2016-03-27 16:11:46.837293036 +0200
+++ src/lib/tabwidget/tabicon.cpp	2016-03-27 16:12:05.637291489 +0200
@@ -100,7 +100,7 @@
     QPainter p(this);
 
     const int size = 16;
-    const int pixmapSize = size * m_animationPixmap.devicePixelRatioF();
+    const int pixmapSize = size * m_animationPixmap.devicePixelRatio();
 
     // Center the pixmap in rect
     QRect r = rect();
