--- a/src/librustc_codegen_ssa/back/link.rs	2020-06-05 11:14:47.671153286 +0200
+++ b/src/librustc_codegen_ssa/back/link.rs	2020-06-05 11:15:15.217320847 +0200
@@ -1314,7 +1314,7 @@
     // external build system already has the native dependencies defined, and it
     // will provide them to the linker itself.
     if sess.opts.debugging_opts.link_native_libraries {
-        add_local_native_libraries(cmd, sess, codegen_results);
+        add_local_native_libraries(cmd, sess, codegen_results, crate_type);
     }
     add_upstream_rust_crates::<B>(cmd, sess, codegen_results, crate_type, tmpdir);
     if sess.opts.debugging_opts.link_native_libraries {
@@ -1343,7 +1343,6 @@
     sess: &Session,
     flavor: LinkerFlavor,
     crate_type: config::CrateType,
-    codegen_results: &CodegenResults,
 ) {
     if crate_type != config::CrateType::Executable {
         return;
@@ -1505,7 +1504,7 @@
     }
 
     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER
-    add_position_independent_executable_args(cmd, sess, flavor, crate_type, codegen_results);
+    add_position_independent_executable_args(cmd, sess, flavor, crate_type);
 
     // OBJECT-FILES-NO, AUDIT-ORDER
     add_relro_args(cmd, sess);
@@ -1589,6 +1588,7 @@
     cmd: &mut dyn Linker,
     sess: &Session,
     codegen_results: &CodegenResults,
+    crate_type: config::CrateType,
 ) {
     let filesearch = sess.target_filesearch(PathKind::All);
     for search_path in filesearch.search_paths() {
@@ -1612,7 +1612,11 @@
             None => continue,
         };
         match lib.kind {
-            NativeLibraryKind::NativeUnknown => cmd.link_dylib(name),
+            NativeLibraryKind::NativeUnknown => if sess.crt_static(Some(crate_type)) {
+                                                    cmd.link_staticlib(name)
+                                                } else {
+                                                    cmd.link_dylib(name)
+                                                },
             NativeLibraryKind::NativeFramework => cmd.link_framework(name),
             NativeLibraryKind::NativeStaticNobundle => cmd.link_staticlib(name),
             NativeLibraryKind::NativeStatic => cmd.link_whole_staticlib(name, &search_path),
@@ -1948,7 +1952,11 @@
                 continue;
             }
             match lib.kind {
-                NativeLibraryKind::NativeUnknown => cmd.link_dylib(name),
+                NativeLibraryKind::NativeUnknown => if sess.crt_static(Some(crate_type)) {
+                                                        cmd.link_staticlib(name)
+                                                    } else {
+                                                        cmd.link_dylib(name)
+                                                    },
                 NativeLibraryKind::NativeFramework => cmd.link_framework(name),
                 NativeLibraryKind::NativeStaticNobundle => {
                     // Link "static-nobundle" native libs only if the crate they originate from
