--- a/compiler/rustc_target/src/spec/crt_objects.rs   2022-11-06 21:28:03.937194468 +0100
+++ b/compiler/rustc_target/src/spec/crt_objects.rs   2022-11-06 21:28:22.668483163 +0100
@@ -63,28 +63,6 @@
     ])
 }
 
-pub(super) fn pre_musl_self_contained() -> CrtObjects {
-    new(&[
-        (LinkOutputKind::DynamicNoPicExe, &["crt1.o", "crti.o", "crtbegin.o"]),
-        (LinkOutputKind::DynamicPicExe, &["Scrt1.o", "crti.o", "crtbeginS.o"]),
-        (LinkOutputKind::StaticNoPicExe, &["crt1.o", "crti.o", "crtbegin.o"]),
-        (LinkOutputKind::StaticPicExe, &["rcrt1.o", "crti.o", "crtbeginS.o"]),
-        (LinkOutputKind::DynamicDylib, &["crti.o", "crtbeginS.o"]),
-        (LinkOutputKind::StaticDylib, &["crti.o", "crtbeginS.o"]),
-    ])
-}
-
-pub(super) fn post_musl_self_contained() -> CrtObjects {
-    new(&[
-        (LinkOutputKind::DynamicNoPicExe, &["crtend.o", "crtn.o"]),
-        (LinkOutputKind::DynamicPicExe, &["crtendS.o", "crtn.o"]),
-        (LinkOutputKind::StaticNoPicExe, &["crtend.o", "crtn.o"]),
-        (LinkOutputKind::StaticPicExe, &["crtendS.o", "crtn.o"]),
-        (LinkOutputKind::DynamicDylib, &["crtendS.o", "crtn.o"]),
-        (LinkOutputKind::StaticDylib, &["crtendS.o", "crtn.o"]),
-    ])
-}
-
 pub(super) fn pre_mingw_self_contained() -> CrtObjects {
     new(&[
         (LinkOutputKind::DynamicNoPicExe, &["crt2.o", "rsbegin.o"]),
--- a/compiler/rustc_target/src/spec/base/linux_musl.rs	2020-12-31 19:07:19.216270236 +0100
+++ b/compiler/rustc_target/src/spec/base/linux_musl.rs	2020-12-31 19:07:53.639438587 +0100
@@ -1,11 +1,8 @@
-use crate::spec::{LinkSelfContainedDefault, TargetOptions, base, crt_objects};
+use crate::spec::{TargetOptions, base};

 pub(crate) fn opts() -> TargetOptions {
     TargetOptions {
         env: "musl".into(),
-        pre_link_objects_self_contained: crt_objects::pre_musl_self_contained(),
-        post_link_objects_self_contained: crt_objects::post_musl_self_contained(),
-        link_self_contained: LinkSelfContainedDefault::InferredForMusl,
         ..base::linux::opts()
     }
 }
--- a/src/bootstrap/src/core/config/config.rs	2025-03-31 23:37:24.000000000 +0200
+++ b/src/bootstrap/src/core/config/config.rs	2025-04-14 19:10:47.295277885 +0200
@@ -576,7 +576,7 @@
     }

     pub fn needs_crt_begin_end(&self) -> bool {
-        self.contains("musl") && !self.contains("unikraft")
+        false
     }

     /// Path to the file defining the custom target, if any.
--- a/src/bootstrap/src/core/build_steps/compile.rs	2020-08-27 22:57:42.818176881 +0200
+++ b/src/bootstrap/src/core/build_steps/compile.rs	2020-08-27 23:00:19.487625539 +0200
@@ -390,15 +357,6 @@
             .arg("--manifest-path")
             .arg(builder.src.join("library/sysroot/Cargo.toml"));
 
-        // Help the libc crate compile by assisting it in finding various
-        // sysroot native libraries.
-        if target.contains("musl") {
-            if let Some(p) = builder.musl_libdir(target) {
-                let root = format!("native={}", p.to_str().unwrap());
-                cargo.rustflag("-L").rustflag(&root);
-            }
-        }
-
         if target.contains("-wasi") {
             if let Some(p) = builder.wasi_root(target) {
                 let root = format!(
