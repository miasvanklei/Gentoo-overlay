diff --git a/llvm/tools/llvm-objcopy/CopyConfig.cpp b/llvm/tools/llvm-objcopy/CopyConfig.cpp
index 73ed00b5cb2..755a830c7d0 100644
--- a/llvm/tools/llvm-objcopy/CopyConfig.cpp
+++ b/llvm/tools/llvm-objcopy/CopyConfig.cpp
@@ -556,7 +556,21 @@ parseObjcopyOptions(ArrayRef<const char *> ArgsArr,
       InputArgs.getLastArgValue(OBJCOPY_prefix_alloc_sections);
   if (auto Arg = InputArgs.getLastArg(OBJCOPY_extract_partition))
     Config.ExtractPartition = Arg->getValue();
-
+  if (auto Arg = InputArgs.getLastArg(OBJCOPY_gap_fill)) {
+    // Truncation is not allowed.
+    ErrorOr<uint8_t> Val = getAsInteger<uint8_t>(Arg->getValue());
+    if (!Val)
+      return createStringError(Val.getError(), "bad number for --gap-fill: %s",
+                               Arg->getValue());
+    Config.GapFill = *Val;
+  }
+  if (auto Arg = InputArgs.getLastArg(OBJCOPY_pad_to)) {
+    ErrorOr<uint64_t> Addr = getAsInteger<uint64_t>(Arg->getValue());
+    if (!Addr)
+      return createStringError(Addr.getError(), "bad address for --pad-to: %s",
+                               Arg->getValue());
+    Config.PadTo = *Addr;
+  }
   for (auto Arg : InputArgs.filtered(OBJCOPY_redefine_symbol)) {
     if (!StringRef(Arg->getValue()).contains('='))
       return createStringError(errc::invalid_argument,
diff --git a/llvm/tools/llvm-objcopy/CopyConfig.h b/llvm/tools/llvm-objcopy/CopyConfig.h
index c262934b4a4..44a9a88ae78 100644
--- a/llvm/tools/llvm-objcopy/CopyConfig.h
+++ b/llvm/tools/llvm-objcopy/CopyConfig.h
@@ -165,6 +165,8 @@ struct CopyConfig {
   Optional<StringRef> BuildIdLinkInput;
   Optional<StringRef> BuildIdLinkOutput;
   Optional<StringRef> ExtractPartition;
+  Optional<uint8_t> GapFill;
+  Optional<uint64_t> PadTo;
   StringRef SplitDWO;
   StringRef SymbolsPrefix;
   StringRef AllocSectionsPrefix;
diff --git a/llvm/tools/llvm-objcopy/ELF/ELFObjcopy.cpp b/llvm/tools/llvm-objcopy/ELF/ELFObjcopy.cpp
index a0cfd9a5ff8..ca26260db08 100644
--- a/llvm/tools/llvm-objcopy/ELF/ELFObjcopy.cpp
+++ b/llvm/tools/llvm-objcopy/ELF/ELFObjcopy.cpp
@@ -589,6 +589,153 @@ static Error replaceAndRemoveSections(const CopyConfig &Config, Object &Obj) {
   return Obj.removeSections(Config.AllowBrokenLinks, RemovePred);
 }
 
+static Error padSections(const CopyConfig &Config, Object &Obj) {
+  SmallVector<SectionBase *, 30> LoadableSections;
+  for (SectionBase &Sec : Obj.sections()) {
+    if ((Sec.Flags & SectionFlag::SecLoad) && (Sec.Type != SHT_NOBITS))
+      LoadableSections.push_back(&Sec);
+  }
+
+  if (LoadableSections.empty())
+    return Error::success();
+
+  llvm::stable_sort(LoadableSections,
+                    [](const SectionBase *LHS, const SectionBase *RHS) {
+                      if (LHS->Addr < RHS->Addr)
+                        return true;
+                      if (LHS->Addr > RHS->Addr)
+                        return false;
+                      return (LHS->Size < RHS->Size);
+                    });
+
+  std::map<SectionBase *, uint64_t> SectionGapMap;
+  // Default filled value for '--pad-to' option.
+  uint8_t Value = 0;
+
+  // Fill the gaps if the section's not in any segement. Otherwise just record
+  // the gaps.
+  auto setSectionGaps = [&SectionGapMap](SectionBase *Sec, uint32_t Value,
+                                         uint64_t GapsSize) {
+    if (Sec->ParentSegment)
+      SectionGapMap[Sec] = GapsSize;
+    else {
+      Sec->Size += GapsSize;
+      uint8_t *N = new uint8_t[Sec->Size];
+      llvm::copy(Sec->OriginalData, &N[0]);
+      memset(N + Sec->OriginalData.size(), Value, GapsSize);
+      Sec->OriginalData = makeArrayRef<uint8_t>(N, Sec->Size);
+    }
+  };
+
+  if (Config.GapFill) {
+    Value = Config.GapFill.getValue();
+    for (SmallVectorImpl<SectionBase *>::const_iterator
+             I = LoadableSections.begin(),
+             E = LoadableSections.end() - 1;
+         I != E; ++I) {
+      if ((*I)->Size == 0)
+        continue;
+      uint64_t GapBegin = (*I)->Addr + (*I)->Size;
+      uint64_t GapEnd = (*(I + 1))->Addr;
+      if (GapEnd <= GapBegin)
+        continue;
+      setSectionGaps(*I, Value, GapEnd - GapBegin);
+    }
+  }
+
+  if (Config.PadTo) {
+    SectionBase *LastSec = *(LoadableSections.end() - 1);
+    uint64_t SecEndAddr = LastSec->Addr + LastSec->Size;
+    if (LastSec->Size && SecEndAddr < Config.PadTo.getValue())
+      setSectionGaps(LastSec, Value, Config.PadTo.getValue() - SecEndAddr);
+  }
+
+  // Populate section and segment content.
+  // First, resize the section and its containing segment if needed.
+  std::map<Segment *, uint8_t *> NewSegments;
+  for (auto &It : SectionGapMap) {
+    SectionBase *Sec = It.first;
+    uint64_t GapsSize = It.second;
+    // Two adjacent sections might overlap in the same segment. Adjust its
+    // layout in next step.
+    Sec->Size += GapsSize;
+
+    auto SecParent = Sec->ParentSegment;
+    assert(SecParent != nullptr);
+    for (auto &Seg : Obj.segments()) {
+      auto SegmentEndAddr = Seg.VAddr + Seg.Contents.size();
+      if (Sec->Addr >= Seg.VAddr && Sec->Addr < SegmentEndAddr &&
+          (Sec->Addr + Sec->Size) > SegmentEndAddr) {
+        Seg.FileSize += GapsSize;
+        Seg.MemSize += GapsSize;
+
+        if (!SecParent->ParentSegment && SecParent == &Seg) {
+          if (NewSegments.find(SecParent) == NewSegments.end()) {
+            NewSegments[SecParent] = new uint8_t[SecParent->FileSize];
+            llvm::copy(SecParent->getContents(), NewSegments[SecParent]);
+          }
+        }
+      }
+    }
+  }
+
+  if (NewSegments.empty())
+    return Error::success();
+
+  // Second, adjust segments and sections layouts after the resizing.
+  auto PreSec = *(LoadableSections.end() - 1);
+  auto Index = PreSec->Index;
+  auto PreSecEnd = PreSec->OriginalOffset + PreSec->Size;
+  Index++;
+  Twine Msg;
+  for (auto Size = Obj.sections().size(); Index < Size; ++Index) {
+    auto CurSec = Obj.sections().getSection(Index, Msg);
+    if (CurSec->OriginalOffset < PreSecEnd) {
+      CurSec->OriginalOffset = PreSecEnd;
+      PreSecEnd = CurSec->OriginalOffset + CurSec->Size;
+    }
+  }
+
+  // Third, set the new segment's content.
+  for (auto &It : SectionGapMap) {
+    SectionBase *Sec = It.first;
+    uint64_t GapsSize = It.second;
+    auto SecParent = It.first->ParentSegment;
+    const auto Iter = NewSegments.find(SecParent);
+    if (Iter != NewSegments.end()) {
+      uint64_t Offset = Sec->OriginalOffset - SecParent->OriginalOffset;
+      std::memset(Iter->second + Offset + Sec->OriginalData.size(), Value,
+                  GapsSize);
+    }
+  }
+
+  for (auto &It : NewSegments)
+    It.first->Contents = makeArrayRef<uint8_t>(It.second, It.first->FileSize);
+
+  // Fourth, set the new segment's child content.
+  for (auto &Seg : Obj.segments()) {
+    auto SegParent = Seg.ParentSegment;
+    const auto Iter = NewSegments.find(SegParent);
+    if (Iter != NewSegments.end()) {
+      uint64_t Offset = Seg.OriginalOffset - SegParent->OriginalOffset;
+      Seg.Contents = makeArrayRef<uint8_t>(Iter->second + Offset, Seg.FileSize);
+    }
+  }
+
+  // Last step, set the section content.
+  for (auto &Sec : Obj.sections()) {
+    auto SecParent = Sec.ParentSegment;
+    const auto Iter = NewSegments.find(SecParent);
+    if (Iter != NewSegments.end() && Sec.Type != SHT_NOBITS) {
+      uint64_t Offset =
+          Sec.OriginalOffset - SecParent->OriginalOffset + SecParent->Offset;
+      Sec.OriginalData = makeArrayRef<uint8_t>(Iter->second + Offset, Sec.Size);
+    }
+  }
+
+  return Error::success();
+}
+
 // This function handles the high level operations of GNU objcopy including
 // handling command line options. It's important to outline certain properties
 // we expect to hold of the command line operations. Any operation that "keeps"
@@ -737,6 +884,11 @@ static Error handleArgs(const CopyConfig &Config, Object &Obj,
         Sec ? (uint16_t)SYMBOL_SIMPLE_INDEX : (uint16_t)SHN_ABS, 0);
   }
 
+  if ((Config.GapFill || Config.PadTo) && Obj.sections().size()) {
+    if (Error E = padSections(Config, Obj))
+      return E;
+  }
+
   if (Config.EntryExpr)
     Obj.Entry = Config.EntryExpr(Obj.Entry);
   return Error::success();
diff --git a/llvm/tools/llvm-objcopy/ObjcopyOpts.td b/llvm/tools/llvm-objcopy/ObjcopyOpts.td
index 9e6b6f0005c..3cdb6b36cbb 100644
--- a/llvm/tools/llvm-objcopy/ObjcopyOpts.td
+++ b/llvm/tools/llvm-objcopy/ObjcopyOpts.td
@@ -227,3 +227,13 @@ defm add_symbol
          "compatibility: debug, constructor, warning, indirect, synthetic, "
          "unique-object, before.">,
       MetaVarName<"name=[section:]value[,flags]">;
+
+defm gap_fill
+    : Eq<"gap-fill",
+      "Fill gaps between two loadable sections with <val>.">,
+      MetaVarName<"val">;
+
+defm pad_to
+    : Eq<"pad-to",
+      "Pad the last loadable section up to <addr> with the value specified by --gap-fill if present or zero by default.">,
+      MetaVarName<"addr">;
