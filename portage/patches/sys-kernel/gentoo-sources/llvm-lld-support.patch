--- a/arch/x86/purgatory/Makefile	2018-09-21 15:16:15.027827930 +0200
+++ b/arch/x86/purgatory/Makefile	2018-09-21 15:16:26.034827668 +0200
@@ -9,7 +9,7 @@
 $(obj)/sha256.o: $(srctree)/lib/sha256.c FORCE
 	$(call if_changed_rule,cc_o_c)
 
-LDFLAGS_purgatory.ro := -e purgatory_start -r --no-undefined -nostdlib -z nodefaultlib
+LDFLAGS_purgatory.ro := -e purgatory_start -r --no-undefined -nostdlib
 targets += purgatory.ro
 
 KASAN_SANITIZE	:= n
--- a/arch/x86/realmode/rm/Makefile	2018-09-21 15:15:34.259828269 +0200
+++ b/arch/x86/realmode/rm/Makefile	2018-09-21 15:15:58.306828189 +0200
@@ -47,7 +47,7 @@
 targets += realmode.lds
 $(obj)/realmode.lds: $(obj)/pasyms.h
 
-LDFLAGS_realmode.elf := --emit-relocs -T
+LDFLAGS_realmode.elf := -m elf_i386 --emit-relocs -T
 CPPFLAGS_realmode.lds += -P -C -I$(objtree)/$(obj)
 
 targets += realmode.elf
--- a/arch/x86/boot/Makefile	2018-09-21 15:21:06.180801298 +0200
+++ b/arch/x86/boot/Makefile	2018-09-21 15:21:23.610798629 +0200
@@ -100,7 +100,7 @@
 AFLAGS_header.o += -I$(objtree)/$(obj)
 $(obj)/header.o: $(obj)/zoffset.h
 
-LDFLAGS_setup.elf	:= -T
+LDFLAGS_setup.elf	:= -m elf_i386 -T
 $(obj)/setup.elf: $(src)/setup.ld $(SETUP_OBJS) FORCE
 	$(call if_changed,ld)
 
--- a/arch/x86/kernel/vmlinux.lds.S	2018-09-24 11:12:51.892696132 +0200
+++ b/arch/x86/kernel/vmlinux.lds.S	2018-09-24 11:13:06.627987544 +0200
@@ -389,7 +389,7 @@
  * Per-cpu symbols which need to be offset from __per_cpu_load
  * for the boot processor.
  */
-#define INIT_PER_CPU(x) init_per_cpu__##x = x + __per_cpu_load
+#define INIT_PER_CPU(x) init_per_cpu__##x = ABSOLUTE(x) + __per_cpu_load
 INIT_PER_CPU(gdt_page);
 INIT_PER_CPU(irq_stack_union);
 
--- a/arch/arm/boot/compressed/Makefile	2018-10-27 21:35:12.686328798 +0200
+++ b/arch/arm/boot/compressed/Makefile	2018-10-27 21:35:26.628313373 +0200
@@ -131,8 +131,6 @@
 ifeq ($(CONFIG_CPU_ENDIAN_BE8),y)
 LDFLAGS_vmlinux += --be8
 endif
-# ?
-LDFLAGS_vmlinux += -p
 # Report unresolved symbol references
 LDFLAGS_vmlinux += --no-undefined
 # Delete all temporary local symbols
--- a/arch/arm/vdso/Makefile	2018-10-27 21:31:02.294611422 +0200
+++ b/arch/arm/vdso/Makefile	2018-10-27 21:31:13.452598560 +0200
@@ -11,7 +11,7 @@
 ccflags-y += -DDISABLE_BRANCH_PROFILING
 
 VDSO_LDFLAGS := -Wl,-Bsymbolic -Wl,--no-undefined -Wl,-soname=linux-vdso.so.1
-VDSO_LDFLAGS += -Wl,-z,max-page-size=4096 -Wl,-z,common-page-size=4096
+VDSO_LDFLAGS += -Wl,-z,max-page-size=4096
 VDSO_LDFLAGS += -nostdlib -shared
 VDSO_LDFLAGS += $(call cc-ldoption, -Wl$(comma)--hash-style=sysv)
 VDSO_LDFLAGS += $(call cc-ldoption, -Wl$(comma)--build-id)
--- a/arch/arm/Makefile	2018-10-27 21:13:57.390791660 +0200
+++ b/arch/arm/Makefile	2018-10-27 21:17:20.525583851 +0200
@@ -10,7 +10,7 @@
 #
 # Copyright (C) 1995-2001 by Russell King
 
-LDFLAGS_vmlinux	:=-p --no-undefined -X --pic-veneer
+LDFLAGS_vmlinux	:=--no-undefined -X
 ifeq ($(CONFIG_CPU_ENDIAN_BE8),y)
 LDFLAGS_vmlinux	+= --be8
 KBUILD_LDFLAGS_MODULE	+= --be8
@@ -51,6 +51,9 @@
 KBUILD_LDFLAGS	+= -EL
 endif
 
+# Set cpu arch
+KBUILD_LDFLAGS	+= -m armelf_linux_eabi
+
 #
 # The Scalar Replacement of Aggregates (SRA) optimization pass in GCC 4.9 and
 # later may result in code being generated that handles signed short and signed
--- a/arch/arm64/kernel/vdso/Makefile   2019-03-14 17:40:22.537751210 +0100
+++ b/arch/arm64/kernel/vdso/Makefile   2019-03-14 17:40:34.133669869 +0100
@@ -54,7 +54,7 @@
 
 # Actual build commands
 quiet_cmd_vdsold = VDSOL   $@
-      cmd_vdsold = $(CC) $(c_flags) -Wl,-n -Wl,-T $^ -o $@
+      cmd_vdsold = $(CC) $(c_flags) -Wl,-T $^ -o $@
 quiet_cmd_vdsoas = VDSOA   $@
       cmd_vdsoas = $(CC) $(a_flags) -c -o $@ $<
 
