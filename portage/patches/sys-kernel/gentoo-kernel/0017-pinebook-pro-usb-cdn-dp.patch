--- a/arch/arm64/boot/dts/rockchip/rk3399-pinebook-pro.dts
+++ b/arch/arm64/boot/dts/rockchip/rk3399-pinebook-pro.dts
@@ -334,7 +334,7 @@
 
 	/* Regulators supplied by vcc5v0_usb */
 	/* Type C port power supply regulator */
-	vbus_5vout: vbus_typec: regulator-vbus-5vout {
+	vbus_5vout: regulator-vbus-5vout {
 		compatible = "regulator-fixed";
 		enable-active-high;
 		gpio = <&gpio1 RK_PA3 GPIO_ACTIVE_HIGH>;
@@ -373,6 +373,14 @@
 		pinctrl-names = "default";
 		pinctrl-0 = <&dc_det_pin>;
 	};
+
+	typec_extcon_bridge: typec-extcon {
+		compatible = "linux,typec-extcon-bridge";
+		usb-role-switch;
+		orientation-switch;
+		mode-switch;
+		svid = /bits/ 16 <0xff01>;
+	};
 };
 
 &cpu_b0 {
@@ -399,10 +407,14 @@
 	cpu-supply = <&vdd_cpu_l>;
 };
 
+&cdn_dp {
+	status = "okay";
+	extcon = <&typec_extcon_bridge>;
+	phys = <&tcphy0_dp>;
+};
+
 &edp {
 	force-hpd;
-	pinctrl-names = "default";
-	pinctrl-0 = <&edp_hpd>;
 	status = "okay";
 
 	ports {
@@ -669,6 +681,8 @@
 		reg = <0x11>;
 		clocks = <&cru SCLK_I2S_8CH_OUT>;
 		clock-names = "mclk";
+		assigned-clocks = <&cru SCLK_I2S_8CH_OUT>, <&cru SCLK_I2S1_8CH>;
+		assigned-clock-rates = <11289599>, <11289599>;
 		#sound-dai-cells = <0>;
 	};
 };
@@ -691,7 +705,9 @@
 		interrupts = <RK_PA2 IRQ_TYPE_LEVEL_LOW>;
 		pinctrl-names = "default";
 		pinctrl-0 = <&fusb0_int_pin>;
-		vbus-supply = <&vbus_typec>;
+		vbus-supply = <&vbus_5vout>;
+		usb-role-switch = <&typec_extcon_bridge>;
+		extcon = <&typec_extcon_bridge>;
 
 		connector {
 			compatible = "usb-c-connector";
@@ -700,10 +716,19 @@
 			op-sink-microwatt = <1000000>;
 			power-role = "dual";
 			sink-pdos =
-				<PDO_FIXED(5000, 2500, PDO_FIXED_USB_COMM)>;
+				<PDO_FIXED(5000, 2500, PDO_FIXED_USB_COMM | PDO_FIXED_DUAL_ROLE | PDO_FIXED_DATA_SWAP)>;
 			source-pdos =
-				<PDO_FIXED(5000, 1400, PDO_FIXED_USB_COMM)>;
+				<PDO_FIXED(5000, 1400, PDO_FIXED_USB_COMM | PDO_FIXED_DUAL_ROLE | PDO_FIXED_DATA_SWAP)>;
 			try-power-role = "sink";
+			mode-switch = <&typec_extcon_bridge>;
+			orientation-switch = <&typec_extcon_bridge>;
+
+			altmodes {
+				dp {
+					svid = /bits/ 16 <0xff01>;
+					vdo = <0x1c46>;
+				};
+			};
 
 			ports {
 				#address-cells = <1>;
@@ -970,6 +995,7 @@
 };
 
 &tcphy0 {
+	extcon = <&typec_extcon_bridge>;
 	status = "okay";
 };
 
@@ -1003,13 +1029,21 @@
 
 &u2phy0 {
 	status = "okay";
+	extcon = <&typec_extcon_bridge>;
+	extcon,ignore-usb;
 
 	u2phy0_otg: otg-port {
+		/*
+		 * Type-C port on the left side of the chasis.
+		 */
 		status = "okay";
 	};
 
 	u2phy0_host: host-port {
-		phy-supply = <&vcc5v0_otg>;
+		/*
+		 * USB 2.0 host port for the keyboard (internally connected).
+		 */
+		phy-supply = <&vcc5v0_usb>;
 		status = "okay";
 	};
 
@@ -1024,11 +1058,18 @@
 	status = "okay";
 
 	u2phy1_otg: otg-port {
+		/*
+		 * USB 3.0 A port on the left side of the chasis.
+		 */
 		status = "okay";
 	};
 
 	u2phy1_host: host-port {
-		phy-supply = <&vcc5v0_otg>;
+		/*
+		 * To the HUB that has USB camera and USB 2.0 port on the right
+		 * side of the chasis.
+		 */
+		phy-supply = <&vcc5v0_usb>;
 		status = "okay";
 	};
 };
@@ -1079,7 +1120,9 @@
 };
 
 &usbdrd_dwc3_0 {
-	dr_mode = "host";
+	dr_mode = "otg";
+	extcon = <&typec_extcon_bridge>;
+	snps,usb3-phy-reset-quirk;
 	status = "okay";
 };
 
--- a/drivers/gpu/drm/rockchip/cdn-dp-core.c
+++ b/drivers/gpu/drm/rockchip/cdn-dp-core.c
@@ -965,6 +965,7 @@
 		DRM_DEV_INFO(dp->dev, "Not connected; disabling cdn\n");
 		dp->connected = false;
 
+		cdn_dp_disable(dp);
 	/* Connected but not enabled, enable the block */
 	} else if (!dp->active) {
 		DRM_DEV_INFO(dp->dev, "Connected, not enabled; enabling cdn\n");
--- a/drivers/phy/rockchip/phy-rockchip-inno-usb2.c
+++ b/drivers/phy/rockchip/phy-rockchip-inno-usb2.c
@@ -656,21 +656,27 @@
 	.owner		= THIS_MODULE,
 };
 
+const int rockchip_usb2phy_cable_types[] = {
+	EXTCON_CHG_USB_SDP,
+	EXTCON_CHG_USB_DCP,
+	EXTCON_CHG_USB_CDP,
+	EXTCON_CHG_USB_ACA,
+};
+
 static void rockchip_usb2phy_otg_sm_work(struct work_struct *work)
 {
 	struct rockchip_usb2phy_port *rport =
 		container_of(work, struct rockchip_usb2phy_port,
 			     otg_sm_work.work);
 	struct rockchip_usb2phy *rphy = dev_get_drvdata(rport->phy->dev.parent);
-	static unsigned int cable;
+	unsigned int cable = 0, i;
 	unsigned long delay;
-	bool vbus_attach, sch_work, notify_charger;
+	bool vbus_attach, sch_work;
 
 	vbus_attach = property_enabled(rphy->grf,
 				       &rport->port_cfg->utmi_bvalid);
 
 	sch_work = false;
-	notify_charger = false;
 	delay = OTG_SCHEDULE_DELAY;
 	dev_dbg(&rport->phy->dev, "%s otg sm work\n",
 		usb_otg_state_string(rport->state));
@@ -699,14 +705,12 @@
 					dev_dbg(&rport->phy->dev, "sdp cable is connected\n");
 					rockchip_usb2phy_power_on(rport->phy);
 					rport->state = OTG_STATE_B_PERIPHERAL;
-					notify_charger = true;
 					sch_work = true;
 					cable = EXTCON_CHG_USB_SDP;
 					break;
 				case POWER_SUPPLY_TYPE_USB_DCP:
 					dev_dbg(&rport->phy->dev, "dcp cable is connected\n");
 					rockchip_usb2phy_power_off(rport->phy);
-					notify_charger = true;
 					sch_work = true;
 					cable = EXTCON_CHG_USB_DCP;
 					break;
@@ -714,7 +718,6 @@
 					dev_dbg(&rport->phy->dev, "cdp cable is connected\n");
 					rockchip_usb2phy_power_on(rport->phy);
 					rport->state = OTG_STATE_B_PERIPHERAL;
-					notify_charger = true;
 					sch_work = true;
 					cable = EXTCON_CHG_USB_CDP;
 					break;
@@ -726,22 +729,26 @@
 				break;
 			}
 		} else {
-			notify_charger = true;
 			rphy->chg_state = USB_CHG_STATE_UNDEFINED;
 			rphy->chg_type = POWER_SUPPLY_TYPE_UNKNOWN;
 		}
 
-		if (rport->vbus_attached != vbus_attach) {
-			rport->vbus_attached = vbus_attach;
+		if (rphy->edev && extcon_get_state(rphy->edev, cable) != vbus_attach) {
+			for (i = 0; i < ARRAY_SIZE(rockchip_usb2phy_cable_types); i++) {
+				int type = rockchip_usb2phy_cable_types[i];
 
-			if (notify_charger && rphy->edev) {
-				extcon_set_state_sync(rphy->edev,
-							cable, vbus_attach);
-				if (cable == EXTCON_CHG_USB_SDP)
-					extcon_set_state_sync(rphy->edev,
-							      EXTCON_USB,
-							      vbus_attach);
+				if (extcon_get_state(rphy->edev, type))
+					extcon_set_state_sync(rphy->edev, type, 0);
 			}
+
+			if (vbus_attach)
+				extcon_set_state_sync(rphy->edev, cable, vbus_attach);
+
+			if ((cable == EXTCON_CHG_USB_SDP || cable == POWER_SUPPLY_TYPE_USB_CDP)
+				&& extcon_get_state(rphy->edev, EXTCON_USB) != vbus_attach
+				&& !of_property_read_bool(rphy->dev->of_node, "extcon,ignore-usb"))
+				extcon_set_state_sync(rphy->edev,
+						      EXTCON_USB, vbus_attach);
 		}
 		break;
 	case OTG_STATE_B_PERIPHERAL:
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -150,7 +150,7 @@
 	}
 
 	reg &= ~(DWC3_GCTL_PRTCAPDIR(DWC3_GCTL_PRTCAP_OTG));
-	reg |= DWC3_GCTL_PRTCAPDIR(mode);
+	reg |= DWC3_GCTL_PRTCAPDIR(mode & DWC3_GCTL_PRTCAP_OTG);
 	dwc3_writel(dwc->regs, DWC3_GCTL, reg);
 
 	dwc->current_dr_role = mode;
@@ -189,6 +189,7 @@
 		dwc3_host_exit(dwc);
 		break;
 	case DWC3_GCTL_PRTCAP_DEVICE:
+	case DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED:
 		dwc3_gadget_exit(dwc);
 		dwc3_event_buffers_cleanup(dwc);
 		break;
@@ -208,12 +209,43 @@
 	 * Only perform GCTL.CoreSoftReset when there's DRD role switching.
 	 */
 	if (dwc->current_dr_role && ((DWC3_IP_IS(DWC3) ||
-			DWC3_VER_IS_PRIOR(DWC31, 190A)) &&
+			DWC3_VER_IS_PRIOR(DWC31, 190A) || dwc->usb3_phy_reset_quirk) &&
 			desired_dr_role != DWC3_GCTL_PRTCAP_OTG)) {
+		/*
+		 * RK3399 TypeC PHY needs to be powered off and powered on again
+		 * for it to apply the correct Type-C plug orientation setting
+		 * and reconfigure itself.
+		 *
+		 * For that purpose we observe complete USB disconnect via
+		 * extcon in drd.c and pass it to __dwc3_set_mode as
+		 * desired_dr_role == 0.
+		 *
+		 * We thus handle transitions between three states of
+		 * desired_dr_role here:
+		 *
+		 * - DWC3_GCTL_PRTCAP_HOST
+		 * - DWC3_GCTL_PRTCAP_DEVICE
+		 * - DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED - almost equivalent to
+		 *   DWC3_GCTL_PRTCAP_DEVICE, present only to distinguish
+		 *   disconnected state, and so that set_mode is called when
+		 *   user plugs in the device to the host.
+		 */
+		if (dwc->usb3_phy_powered && dwc->usb3_phy_reset_quirk)
+			for (int j = 0; j < dwc->num_usb3_ports; j++)
+				phy_power_off(dwc->usb3_generic_phy[j]);
+
 		reg = dwc3_readl(dwc->regs, DWC3_GCTL);
 		reg |= DWC3_GCTL_CORESOFTRESET;
 		dwc3_writel(dwc->regs, DWC3_GCTL, reg);
 
+		if (dwc->usb3_phy_reset_quirk) {
+			for (int j = 0; j < dwc->num_usb3_ports; j++) {
+				ret = phy_power_on(dwc->usb3_generic_phy[j]);
+				//XXX: bleh
+				dwc->usb3_phy_powered = ret >= 0;
+			}
+		}
+
 		/*
 		 * Wait for internal clocks to synchronized. DWC_usb31 and
 		 * DWC_usb32 may need at least 50ms (less for DWC_usb3). To
@@ -255,6 +287,7 @@
 		}
 		break;
 	case DWC3_GCTL_PRTCAP_DEVICE:
+	case DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED:
 		dwc3_core_soft_reset(dwc);
 
 		dwc3_event_buffers_setup(dwc);
@@ -896,6 +929,7 @@
 			goto err_power_off_usb3_phy;
 	}
 
+	dwc->usb3_phy_powered = true;
 	return 0;
 
 err_power_off_usb3_phy:
@@ -916,8 +950,10 @@
 {
 	int i;
 
-	for (i = 0; i < dwc->num_usb3_ports; i++)
-		phy_power_off(dwc->usb3_generic_phy[i]);
+	if (dwc->usb3_phy_powered)
+		for (i = 0; i < dwc->num_usb3_ports; i++)
+			phy_power_off(dwc->usb3_generic_phy[i]);
+	dwc->usb3_phy_powered = false;
 
 	for (i = 0; i < dwc->num_usb2_ports; i++)
 		phy_power_off(dwc->usb2_generic_phy[i]);
@@ -1832,6 +1868,8 @@
 
 	dwc->dis_split_quirk = device_property_read_bool(dev,
 				"snps,dis-split-quirk");
+	dwc->usb3_phy_reset_quirk = device_property_read_bool(dev,
+				"snps,usb3-phy-reset-quirk");
 
 	dwc->lpm_nyet_threshold = lpm_nyet_threshold;
 	dwc->tx_de_emphasis = tx_de_emphasis;
@@ -2404,6 +2442,7 @@
 
 	switch (dwc->current_dr_role) {
 	case DWC3_GCTL_PRTCAP_DEVICE:
+	case DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED:
 		if (pm_runtime_suspended(dwc->dev))
 			break;
 		dwc3_gadget_suspend(dwc);
@@ -2464,11 +2503,12 @@
 
 	switch (dwc->current_dr_role) {
 	case DWC3_GCTL_PRTCAP_DEVICE:
+	case DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED:
 		ret = dwc3_core_init_for_resume(dwc);
 		if (ret)
 			return ret;
 
-		dwc3_set_prtcap(dwc, DWC3_GCTL_PRTCAP_DEVICE, true);
+		dwc3_set_prtcap(dwc, dwc->current_dr_role, true);
 		dwc3_gadget_resume(dwc);
 		break;
 	case DWC3_GCTL_PRTCAP_HOST:
@@ -2532,6 +2572,7 @@
 {
 	switch (dwc->current_dr_role) {
 	case DWC3_GCTL_PRTCAP_DEVICE:
+	case DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED:
 		if (dwc->connected)
 			return -EBUSY;
 		break;
@@ -2570,6 +2611,7 @@
 
 	switch (dwc->current_dr_role) {
 	case DWC3_GCTL_PRTCAP_DEVICE:
+	case DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED:
 		if (dwc->pending_events) {
 			pm_runtime_put(dwc->dev);
 			dwc->pending_events = false;
@@ -2593,6 +2635,7 @@
 
 	switch (dwc->current_dr_role) {
 	case DWC3_GCTL_PRTCAP_DEVICE:
+	case DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED:
 		if (dwc3_runtime_checks(dwc))
 			return -EBUSY;
 		break;
--- a/drivers/usb/dwc3/core.h
+++ b/drivers/usb/dwc3/core.h
@@ -264,6 +264,12 @@
 #define DWC3_GCTL_PRTCAP_HOST	1
 #define DWC3_GCTL_PRTCAP_DEVICE	2
 #define DWC3_GCTL_PRTCAP_OTG	3
+/* This is not a real register value, but a special state used for
+ * current_dr_role to mean DWC3_GCTL_PRTCAP_DEVICE in disconnected
+ * state. Value is chosen so that masking with register width
+ * produces DWC3_GCTL_PRTCAP_DEVICE value.
+ */
+#define DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED	6
 
 #define DWC3_GCTL_CORESOFTRESET		BIT(11)
 #define DWC3_GCTL_SOFITPSYNC		BIT(10)
@@ -1151,6 +1157,10 @@
  * @sys_wakeup: set if the device may do system wakeup.
  * @wakeup_configured: set if the device is configured for remote wakeup.
  * @suspended: set to track suspend event due to U3/L2.
+ * @usb3_phy_reset_quirk: set to power cycle the USB3 PHY during mode
+ *                        changes. Useful on RK3399 that needs this
+ *                        to apply Type-C orientation changes in
+ *                        Type-C phy driver.
  * @susphy_state: state of DWC3_GUSB2PHYCFG_SUSPHY + DWC3_GUSB3PIPECTL_SUSPHY
  *		  before PM suspend.
  * @imod_interval: set the interrupt moderation interval in 250ns
@@ -1213,6 +1223,8 @@
 	u8			num_usb2_ports;
 	u8			num_usb3_ports;
 
+	bool			usb3_phy_powered;
+
 	bool			phys_ready;
 
 	struct ulpi		*ulpi;
@@ -1390,6 +1402,8 @@
 	unsigned		suspended:1;
 	unsigned		susphy_state:1;
 
+	unsigned		usb3_phy_reset_quirk:1;
+
 	u16			imod_interval;
 
 	int			max_cfg_eps;
--- a/drivers/usb/dwc3/drd.c
+++ b/drivers/usb/dwc3/drd.c
@@ -417,15 +417,28 @@
 
 static void dwc3_drd_update(struct dwc3 *dwc)
 {
-	int id;
+	u32 mode = DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED;
+	int ret;
 
 	if (dwc->edev) {
-		id = extcon_get_state(dwc->edev, EXTCON_USB_HOST);
-		if (id < 0)
-			id = 0;
-		dwc3_set_mode(dwc, id ?
-			      DWC3_GCTL_PRTCAP_HOST :
-			      DWC3_GCTL_PRTCAP_DEVICE);
+		ret = extcon_get_state(dwc->edev, EXTCON_USB_HOST);
+		if (ret > 0)
+			mode = DWC3_GCTL_PRTCAP_HOST;
+
+		if (dwc->usb3_phy_reset_quirk) {
+			/*
+			 * With this quirk enabled, we want to pass 0
+			 * to dwc3_set_mode to signal no USB connection
+			 * state.
+			 */
+			ret = extcon_get_state(dwc->edev, EXTCON_USB);
+			if (ret > 0)
+				mode = DWC3_GCTL_PRTCAP_DEVICE;
+		} else {
+			mode = DWC3_GCTL_PRTCAP_DEVICE;
+		}
+
+		dwc3_set_mode(dwc, mode);
 	}
 }
 
@@ -434,9 +447,7 @@
 {
 	struct dwc3 *dwc = container_of(nb, struct dwc3, edev_nb);
 
-	dwc3_set_mode(dwc, event ?
-		      DWC3_GCTL_PRTCAP_HOST :
-		      DWC3_GCTL_PRTCAP_DEVICE);
+	dwc3_drd_update(dwc);
 
 	return NOTIFY_DONE;
 }
@@ -447,7 +458,7 @@
 				    enum usb_role role)
 {
 	struct dwc3 *dwc = usb_role_switch_get_drvdata(sw);
-	u32 mode;
+	u32 mode = DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED;
 
 	switch (role) {
 	case USB_ROLE_HOST:
@@ -457,6 +468,8 @@
 		mode = DWC3_GCTL_PRTCAP_DEVICE;
 		break;
 	default:
+		if (dwc->usb3_phy_reset_quirk)
+			break;
 		if (dwc->role_switch_default_mode == USB_DR_MODE_HOST)
 			mode = DWC3_GCTL_PRTCAP_HOST;
 		else
@@ -476,6 +489,9 @@
 
 	spin_lock_irqsave(&dwc->lock, flags);
 	switch (dwc->current_dr_role) {
+	case DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED:
+		role = USB_ROLE_NONE;
+		break;
 	case DWC3_GCTL_PRTCAP_HOST:
 		role = USB_ROLE_HOST;
 		break;
@@ -507,6 +523,8 @@
 	} else {
 		dwc->role_switch_default_mode = USB_DR_MODE_PERIPHERAL;
 		mode = DWC3_GCTL_PRTCAP_DEVICE;
+		if (dwc->usb3_phy_reset_quirk)
+			mode = DWC3_GCTL_PRTCAP_DEVICE_DISCONNECTED;
 	}
 	dwc3_set_mode(dwc, mode);
 
@@ -547,8 +565,7 @@
 
 	if (dwc->edev) {
 		dwc->edev_nb.notifier_call = dwc3_drd_notifier;
-		ret = extcon_register_notifier(dwc->edev, EXTCON_USB_HOST,
-					       &dwc->edev_nb);
+		ret = extcon_register_notifier_all(dwc->edev, &dwc->edev_nb);
 		if (ret < 0) {
 			dev_err(dwc->dev, "couldn't register cable notifier\n");
 			return ret;
--- a/drivers/usb/typec/altmodes/displayport.c
+++ b/drivers/usb/typec/altmodes/displayport.c
@@ -116,11 +116,29 @@
 		/* Account for active cable capabilities */
 		if (dp->plug_prime)
 			pin_assign &= DP_CAP_UFP_D_PIN_ASSIGN(dp->plug_prime->vdo);
+
+		/*
+		 * The Display Port Alt mode standard is not publicly available,
+		 * so this is based on guesswork and real VDOs received from
+		 * receptacle based and plug based Type-C alt mode supporting
+		 * docks to make configuration work in practice:
+		 *
+		 * Plug (captive cable) based dock: port=c46 alt=c05
+		 * Recpetacle based dock: port=c46 alt=c0045
+		 *
+		pin_assign = DP_CAP_DFP_D_PIN_ASSIGN(dp->port->vdo);
+		pin_assign &= dp->alt->vdo & DP_CAP_RECEPTACLE ?
+			DP_CAP_UFP_D_PIN_ASSIGN(dp->alt->vdo) :
+			DP_CAP_DFP_D_PIN_ASSIGN(dp->alt->vdo);
+		 */
 		break;
 	default:
 		break;
 	}
 
+	dev_info(&dp->alt->dev, "con=%d pin_assign=%x (port=%x alt=%x)\n",
+		 (int)con, (unsigned)pin_assign, dp->port->vdo, dp->alt->vdo);
+
 	/* Determining the initial pin assignment. */
 	if (!DP_CONF_GET_PIN_ASSIGN(dp->data.conf)) {
 		/* Is USB together with DP preferred */
@@ -726,15 +744,37 @@
 	struct typec_altmode *plug = typec_altmode_get_plug(alt, TYPEC_PLUG_SOP_P);
 	struct fwnode_handle *fwnode;
 	struct dp_altmode *dp;
+	u32 port_pins, alt_pins;
 
 	/* FIXME: Port can only be DFP_U. */
 
-	/* Make sure we have compatible pin configurations */
-	if (!(DP_CAP_PIN_ASSIGN_DFP_D(port->vdo) &
-	      DP_CAP_PIN_ASSIGN_UFP_D(alt->vdo)) &&
-	    !(DP_CAP_PIN_ASSIGN_UFP_D(port->vdo) &
-	      DP_CAP_PIN_ASSIGN_DFP_D(alt->vdo)))
+	/*
+	 * When port is a receptacle DP_CAP_xFP_D_PIN_ASSIGN macros have the
+	 * regular meaning. When the port is a plug, the meaning is swapped.
+	 *
+	 * Check if we have any matching DFP_D<->UFP_D or UFP_D<->DFP_D pin assignment.
+	 */
+        port_pins = port->vdo & DP_CAP_RECEPTACLE ?
+		DP_CAP_DFP_D_PIN_ASSIGN(port->vdo) | DP_CAP_UFP_D_PIN_ASSIGN(port->vdo) << 8 :
+		DP_CAP_UFP_D_PIN_ASSIGN(port->vdo) | DP_CAP_DFP_D_PIN_ASSIGN(port->vdo) << 8;
+
+        alt_pins = alt->vdo & DP_CAP_RECEPTACLE ?
+		DP_CAP_UFP_D_PIN_ASSIGN(alt->vdo) | DP_CAP_DFP_D_PIN_ASSIGN(alt->vdo) << 8 :
+		DP_CAP_DFP_D_PIN_ASSIGN(alt->vdo) | DP_CAP_UFP_D_PIN_ASSIGN(alt->vdo) << 8;
+
+	/* Can't plug plug into a plug */
+	if (!(port->vdo & DP_CAP_RECEPTACLE) && !(alt->vdo & DP_CAP_RECEPTACLE)) {
+		dev_warn(&alt->dev, "Our Alt-DP VDO 0x%06x and peer port VDO 0x%06x are not compatible (both are reported as plugs!)\n",
+			 port->vdo, alt->vdo);
+		return -ENODEV;
+	}
+
+	/* Make sure we have compatiple pin configurations */
+	if (!(port_pins & alt_pins)) {
+		dev_warn(&alt->dev, "Our Alt-DP VDO 0x%06x and peer port VDO 0x%06x are not compatible (no shared pinconf %04x<->%04x (UUDD))\n",
+			 port->vdo, alt->vdo, port_pins, alt_pins);
 		return -ENODEV;
+	}
 
 	dp = devm_kzalloc(&alt->dev, sizeof(*dp), GFP_KERNEL);
 	if (!dp)
--- a/drivers/usb/typec/tcpm/fusb302.c
+++ b/drivers/usb/typec/tcpm/fusb302.c
@@ -441,14 +441,24 @@
 	int current_limit = 0;
 	unsigned long timeout;
 
+	/*
+	 * To avoid cycles in OF dependencies, we get extcon when necessary
+	 * outside of probe function.
+	 */
+	if (of_property_read_bool(chip->dev->of_node, "extcon") && !chip->extcon) {
+		chip->extcon = extcon_get_edev_by_phandle(chip->dev, 0);
+		if (IS_ERR(chip->extcon))
+			chip->extcon = NULL;
+	}
+
 	if (!chip->extcon)
 		return 0;
 
 	/*
 	 * USB2 Charger detection may still be in progress when we get here,
-	 * this can take upto 600ms, wait 800ms max.
+	 * this can take upto 600ms, wait 1000ms max.
 	 */
-	timeout = jiffies + msecs_to_jiffies(800);
+	timeout = jiffies + msecs_to_jiffies(1000);
 	do {
 		if (extcon_get_state(chip->extcon, EXTCON_CHG_USB_SDP) == 1)
 			current_limit = 500;
@@ -499,6 +509,7 @@
 				enum toggling_mode mode)
 {
 	int ret = 0;
+	u8 reg;
 
 	/* first disable toggling */
 	ret = fusb302_i2c_clear_bits(chip, FUSB_REG_CONTROL2,
@@ -557,6 +568,12 @@
 	} else {
 		/* Datasheet says vconn MUST be off when toggling */
 		WARN(chip->vconn_on, "Vconn is on during toggle start");
+
+		/* clear interrupts */
+                ret = fusb302_i2c_read(chip, FUSB_REG_INTERRUPT, &reg);
+		if (ret < 0)
+			return ret;
+
 		/* unmask TOGDONE interrupt */
 		ret = fusb302_i2c_clear_bits(chip, FUSB_REG_MASKA,
 					     FUSB_REG_MASKA_TOGDONE);
@@ -636,6 +653,14 @@
 		goto done;
 	}
 
+	/* adjust current for SRC */
+	ret = fusb302_set_src_current(chip, cc_src_current[cc]);
+	if (ret < 0) {
+		fusb302_log(chip, "cannot set src current %s, ret=%d",
+			    typec_cc_status_name[cc], ret);
+		goto done;
+	}
+
 	ret = fusb302_i2c_mask_write(chip, FUSB_REG_SWITCHES0,
 				     switches0_mask, switches0_data);
 	if (ret < 0) {
@@ -646,14 +671,6 @@
 	chip->cc1 = TYPEC_CC_OPEN;
 	chip->cc2 = TYPEC_CC_OPEN;
 
-	/* adjust current for SRC */
-	ret = fusb302_set_src_current(chip, cc_src_current[cc]);
-	if (ret < 0) {
-		fusb302_log(chip, "cannot set src current %s, ret=%d",
-			    typec_cc_status_name[cc], ret);
-		goto done;
-	}
-
 	/* enable/disable interrupts, BC_LVL for SNK and COMP_CHNG for SRC */
 	switch (cc) {
 	case TYPEC_CC_RP_DEF:
@@ -1528,14 +1545,16 @@
 		    "IRQ: 0x%02x, a: 0x%02x, b: 0x%02x, status0: 0x%02x",
 		    interrupt, interrupta, interruptb, status0);
 
-	if (interrupt & FUSB_REG_INTERRUPT_VBUSOK) {
-		vbus_present = !!(status0 & FUSB_REG_STATUS0_VBUSOK);
+	vbus_present = !!(status0 & FUSB_REG_STATUS0_VBUSOK);
+	if (interrupt & FUSB_REG_INTERRUPT_VBUSOK)
 		fusb302_log(chip, "IRQ: VBUS_OK, vbus=%s",
 			    str_on_off(vbus_present));
-		if (vbus_present != chip->vbus_present) {
-			chip->vbus_present = vbus_present;
-			tcpm_vbus_change(chip->tcpm_port);
-		}
+	if (vbus_present != chip->vbus_present) {
+		chip->vbus_present = vbus_present;
+		if (!(interrupt & FUSB_REG_INTERRUPT_VBUSOK))
+		fusb302_log(chip, "IRQ: VBUS changed without interrupt, vbus=%s",
+			    str_on_off(vbus_present));
+		tcpm_vbus_change(chip->tcpm_port);
 	}
 
 	if ((interrupta & FUSB_REG_INTERRUPTA_TOGDONE) && intr_togdone) {
--- a/drivers/usb/typec/tcpm/fusb302_reg.h
+++ b/drivers/usb/typec/tcpm/fusb302_reg.h
@@ -27,14 +27,13 @@
 #define FUSB_REG_SWITCHES1_TXCC2_EN		BIT(1)
 #define FUSB_REG_SWITCHES1_TXCC1_EN		BIT(0)
 #define FUSB_REG_MEASURE			0x04
-#define FUSB_REG_MEASURE_MDAC5			BIT(7)
-#define FUSB_REG_MEASURE_MDAC4			BIT(6)
-#define FUSB_REG_MEASURE_MDAC3			BIT(5)
-#define FUSB_REG_MEASURE_MDAC2			BIT(4)
-#define FUSB_REG_MEASURE_MDAC1			BIT(3)
-#define FUSB_REG_MEASURE_MDAC0			BIT(2)
-#define FUSB_REG_MEASURE_VBUS			BIT(1)
-#define FUSB_REG_MEASURE_XXXX5			BIT(0)
+#define FUSB_REG_MEASURE_VBUS			BIT(6)
+#define FUSB_REG_MEASURE_MDAC5			BIT(5)
+#define FUSB_REG_MEASURE_MDAC4			BIT(4)
+#define FUSB_REG_MEASURE_MDAC3			BIT(3)
+#define FUSB_REG_MEASURE_MDAC2			BIT(2)
+#define FUSB_REG_MEASURE_MDAC1			BIT(1)
+#define FUSB_REG_MEASURE_MDAC0			BIT(0)
 #define FUSB_REG_CONTROL0			0x06
 #define FUSB_REG_CONTROL0_TX_FLUSH		BIT(6)
 #define FUSB_REG_CONTROL0_INT_MASK		BIT(5)
@@ -105,7 +104,6 @@
 #define FUSB_REG_STATUS0A_RX_SOFT_RESET		BIT(1)
 #define FUSB_REG_STATUS0A_RX_HARD_RESET		BIT(0)
 #define FUSB_REG_STATUS1A			0x3D
-#define FUSB_REG_STATUS1A_TOGSS			BIT(3)
 #define FUSB_REG_STATUS1A_TOGSS_RUNNING		0x0
 #define FUSB_REG_STATUS1A_TOGSS_SRC1		0x1
 #define FUSB_REG_STATUS1A_TOGSS_SRC2		0x2
--- a/drivers/usb/typec/tcpm/tcpm.c
+++ b/drivers/usb/typec/tcpm/tcpm.c
@@ -1857,6 +1857,9 @@
 		return;
 
 	for (i = 0; i < modep->altmodes; i++) {
+		typec_unregister_altmode(port->partner_altmode[i]);
+		port->partner_altmode[i] = NULL;
+
 		altmode = typec_partner_register_altmode(port->partner,
 						&modep->altmode_desc[i]);
 		if (IS_ERR(altmode)) {
@@ -3104,20 +3107,22 @@
 {
 	struct usb_power_delivery_desc desc = { port->negotiated_rev };
 	struct usb_power_delivery_capabilities_desc caps = { };
-	struct usb_power_delivery_capabilities *cap = port->partner_source_caps;
+	struct usb_power_delivery_capabilities *cap;
+	struct usb_power_delivery *partner_pd;
+
+	if (!port->partner_pd) {
+		partner_pd = usb_power_delivery_register(NULL, &desc);
+		if (IS_ERR(partner_pd))
+			return PTR_ERR(partner_pd);
 
-	if (!port->partner_pd)
-		port->partner_pd = usb_power_delivery_register(NULL, &desc);
-	if (IS_ERR(port->partner_pd))
-		return PTR_ERR(port->partner_pd);
+		port->partner_pd = partner_pd;
+	}
 
 	memcpy(caps.pdo, port->source_caps, sizeof(u32) * port->nr_source_caps);
 	caps.role = TYPEC_SOURCE;
 
-	if (cap) {
-		usb_power_delivery_unregister_capabilities(cap);
-		port->partner_source_caps = NULL;
-	}
+	usb_power_delivery_unregister_capabilities(port->partner_source_caps);
+	port->partner_source_caps = NULL;
 
 	cap = usb_power_delivery_register_capabilities(port->partner_pd, &caps);
 	if (IS_ERR(cap))
@@ -3133,15 +3138,22 @@
 	struct usb_power_delivery_desc desc = { port->negotiated_rev };
 	struct usb_power_delivery_capabilities_desc caps = { };
 	struct usb_power_delivery_capabilities *cap;
+	struct usb_power_delivery *partner_pd;
 
-	if (!port->partner_pd)
-		port->partner_pd = usb_power_delivery_register(NULL, &desc);
-	if (IS_ERR(port->partner_pd))
-		return PTR_ERR(port->partner_pd);
+	if (!port->partner_pd) {
+		partner_pd = usb_power_delivery_register(NULL, &desc);
+		if (IS_ERR(partner_pd))
+			return PTR_ERR(partner_pd);
+
+		port->partner_pd = partner_pd;
+	}
 
 	memcpy(caps.pdo, port->sink_caps, sizeof(u32) * port->nr_sink_caps);
 	caps.role = TYPEC_SINK;
 
+	usb_power_delivery_unregister_capabilities(port->partner_sink_caps);
+	port->partner_sink_caps = NULL;
+
 	cap = usb_power_delivery_register_capabilities(port->partner_pd, &caps);
 	if (IS_ERR(cap))
 		return PTR_ERR(cap);
@@ -7151,10 +7163,17 @@
 		port->pds[i] = usb_power_delivery_register(port->dev, &desc);
 		if (IS_ERR(port->pds[i])) {
 			ret = PTR_ERR(port->pds[i]);
+			port->pds[i] = NULL;
 			goto err_unregister;
 		}
 		port->pd_list[i]->pd = port->pds[i];
 
+		usb_power_delivery_unregister_capabilities(port->pd_list[i]->source_cap);
+		port->pd_list[i]->source_cap = NULL;
+
+		usb_power_delivery_unregister_capabilities(port->pd_list[i]->sink_cap);
+		port->pd_list[i]->sink_cap = NULL;
+
 		if (port->pd_list[i]->source_desc.pdo[0]) {
 			cap = usb_power_delivery_register_capabilities(port->pds[i],
 								&port->pd_list[i]->source_desc);
--- a/drivers/usb/typec/Kconfig
+++ b/drivers/usb/typec/Kconfig
@@ -110,6 +110,13 @@ config TYPEC_WUSB3801
 	  If you choose to build this driver as a dynamically linked module, the
 	  module will be called wusb3801.ko.
 
+config TYPEC_EXTCON
+	tristate "Type-C switch/mux -> extcon interface bridge driver"
+	depends on USB_ROLE_SWITCH
+	help
+	  Say Y or M here if your system needs bridging between typec class
+	  and extcon interfaces.
+
 source "drivers/usb/typec/mux/Kconfig"
 
 source "drivers/usb/typec/altmodes/Kconfig"
--- a/drivers/usb/typec/Makefile
+++ b/drivers/usb/typec/Makefile
@@ -11,4 +11,5 @@ obj-$(CONFIG_TYPEC_HD3SS3220)	+= hd3ss3220.o
 obj-$(CONFIG_TYPEC_STUSB160X) 	+= stusb160x.o
 obj-$(CONFIG_TYPEC_RT1719)	+= rt1719.o
 obj-$(CONFIG_TYPEC_WUSB3801)	+= wusb3801.o
+obj-$(CONFIG_TYPEC_EXTCON)	+= typec-extcon.o
 obj-$(CONFIG_TYPEC)		+= mux/
--- /dev/null
+++ b/drivers/usb/typec/typec-extcon.c
@@ -0,0 +1,345 @@
+/*
+ * typec -> extcon bridge
+ * Copyright (c) 2021 Ondřej Jirman <megi@xff.cz>
+ *
+ * This driver bridges standard type-c interfaces to drivers that
+ * expect extcon interface.
+ */
+
+#include <linux/delay.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/power_supply.h>
+#include <linux/platform_device.h>
+#include <linux/usb/pd.h>
+#include <linux/usb/role.h>
+#include <linux/usb/typec.h>
+#include <linux/usb/typec_dp.h>
+#include <linux/usb/typec_mux.h>
+#include <linux/extcon-provider.h>
+
+static bool reset_on_mux;
+module_param(reset_on_mux, bool, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(reset_on_mux, "Set DP=0 on each type-c mux change");
+
+struct typec_extcon {
+        struct device *dev;
+
+	/* consumers */
+	struct usb_role_switch *role_sw;
+        struct typec_switch_dev *sw;
+        struct typec_mux_dev *mux;
+
+	/* providers */
+	struct extcon_dev *extcon;
+	struct notifier_block extcon_nb;
+
+	/* cached state from typec controller */
+	enum usb_role role;
+	enum typec_orientation orientation;
+	struct typec_altmode alt;
+	unsigned long mode;
+	bool has_alt;
+	struct mutex lock;
+};
+
+static const unsigned int typec_extcon_cable[] = {
+	EXTCON_DISP_DP,
+
+	EXTCON_USB,
+	EXTCON_USB_HOST,
+
+	EXTCON_CHG_USB_SDP,
+	EXTCON_CHG_USB_CDP,
+	EXTCON_CHG_USB_DCP,
+	EXTCON_CHG_USB_ACA,
+
+	EXTCON_NONE,
+};
+
+static void typec_extcon_set_cable(struct typec_extcon *tce, int id, bool on,
+				   union extcon_property_value prop_ss,
+				   union extcon_property_value prop_or)
+{
+	union extcon_property_value cur_ss, cur_or;
+	bool prop_diff = false;
+	int ret;
+
+	ret = extcon_get_property(tce->extcon, id,
+				  EXTCON_PROP_USB_SS, &cur_ss);
+	if (ret || cur_ss.intval != prop_ss.intval)
+		prop_diff = true;
+
+	ret = extcon_get_property(tce->extcon, id,
+				  EXTCON_PROP_USB_TYPEC_POLARITY, &cur_or);
+	if (ret || cur_or.intval != prop_or.intval)
+		prop_diff = true;
+
+	if (!on && extcon_get_state(tce->extcon, id)) {
+		extcon_set_state_sync(tce->extcon, id, false);
+	} else if (on && (!extcon_get_state(tce->extcon, id) || prop_diff)) {
+		extcon_set_state(tce->extcon, id, true);
+		extcon_set_property(tce->extcon, id,
+				    EXTCON_PROP_USB_SS, prop_ss);
+		extcon_set_property(tce->extcon, id,
+				    EXTCON_PROP_USB_TYPEC_POLARITY, prop_or);
+		extcon_sync(tce->extcon, id);
+	}
+}
+
+static int typec_extcon_sync_extcon(struct typec_extcon *tce)
+{
+	union extcon_property_value prop_ss, prop_or;
+	bool has_dp = false;
+
+        mutex_lock(&tce->lock);
+
+	/* connector is disconnected */
+	if (tce->orientation == TYPEC_ORIENTATION_NONE) {
+		typec_extcon_set_cable(tce, EXTCON_USB, false, prop_ss, prop_or);
+		typec_extcon_set_cable(tce, EXTCON_USB_HOST, false, prop_ss, prop_or);
+		typec_extcon_set_cable(tce, EXTCON_DISP_DP, false, prop_ss, prop_or);
+
+                goto out_unlock;
+	}
+
+	prop_or.intval = tce->orientation == TYPEC_ORIENTATION_NORMAL ? 0 : 1;
+	prop_ss.intval = 0;
+
+	if (tce->has_alt && tce->alt.svid == USB_TYPEC_DP_SID) {
+		switch (tce->mode) {
+		case TYPEC_STATE_SAFE:
+			break;
+		case TYPEC_DP_STATE_C:
+		case TYPEC_DP_STATE_E:
+			has_dp = true;
+			break;
+		case TYPEC_DP_STATE_D:
+			has_dp = true;
+			fallthrough;
+		case TYPEC_STATE_USB:
+			prop_ss.intval = 1;
+			break;
+		default:
+			dev_err(tce->dev, "unhandled mux mode=%lu\n", tce->mode);
+			break;
+		}
+	}
+
+	typec_extcon_set_cable(tce, EXTCON_USB,
+			tce->role == USB_ROLE_DEVICE, prop_ss, prop_or);
+	typec_extcon_set_cable(tce, EXTCON_USB_HOST,
+			tce->role == USB_ROLE_HOST, prop_ss, prop_or);
+
+	typec_extcon_set_cable(tce, EXTCON_DISP_DP, has_dp, prop_ss, prop_or);
+
+out_unlock:
+	mutex_unlock(&tce->lock);
+	return 0;
+}
+
+static int typec_extcon_sw_set(struct typec_switch_dev *sw,
+			       enum typec_orientation orientation)
+{
+        struct typec_extcon *tce = typec_switch_get_drvdata(sw);
+
+	dev_dbg(tce->dev, "SW SET: orientation=%d\n", orientation);
+
+        mutex_lock(&tce->lock);
+	tce->orientation = orientation;
+        mutex_unlock(&tce->lock);
+
+	typec_extcon_sync_extcon(tce);
+
+        return 0;
+}
+
+static int typec_extcon_mux_set(struct typec_mux_dev *mux,
+				struct typec_mux_state *state)
+{
+	struct typec_extcon *tce = typec_mux_get_drvdata(mux);
+	struct typec_altmode *alt = state->alt;
+
+	dev_dbg(tce->dev, "MUX SET: state->mode=%lu\n", state->mode);
+	if (alt)
+		dev_dbg(tce->dev, "      ...alt: svid=%04hx mode=%d vdo=%08x active=%u\n",
+			alt->svid, alt->mode, alt->vdo, alt->active);
+
+	mutex_lock(&tce->lock);
+	if (reset_on_mux && alt != NULL && tce->has_alt) {
+		tce->mode = state->mode;
+		tce->has_alt = false;
+		mutex_unlock(&tce->lock);
+
+		typec_extcon_sync_extcon(tce);
+	} else {
+		mutex_unlock(&tce->lock);
+	}
+
+	mutex_lock(&tce->lock);
+	tce->mode = state->mode;
+	tce->has_alt = alt != NULL;
+        if (alt)
+		tce->alt = *alt;
+	mutex_unlock(&tce->lock);
+
+	typec_extcon_sync_extcon(tce);
+
+        return 0;
+}
+
+static int typec_extcon_usb_set_role(struct usb_role_switch *sw,
+				     enum usb_role role)
+{
+        struct typec_extcon *tce = usb_role_switch_get_drvdata(sw);
+
+	dev_dbg(tce->dev, "ROLE SET: role=%d\n", role);
+
+        mutex_lock(&tce->lock);
+	tce->role = role;
+	mutex_unlock(&tce->lock);
+
+	typec_extcon_sync_extcon(tce);
+
+        return 0;
+}
+
+static int typec_extcon_notifier(struct notifier_block *nb,
+					 unsigned long action, void *data)
+{
+	struct typec_extcon *tce = container_of(nb, struct typec_extcon, extcon_nb);
+
+	bool sdp = extcon_get_state(tce->extcon, EXTCON_CHG_USB_SDP);
+	bool cdp = extcon_get_state(tce->extcon, EXTCON_CHG_USB_CDP);
+	bool dcp = extcon_get_state(tce->extcon, EXTCON_CHG_USB_DCP);
+	bool usb = extcon_get_state(tce->extcon, EXTCON_USB);
+	bool usb_host = extcon_get_state(tce->extcon, EXTCON_USB_HOST);
+	bool dp = extcon_get_state(tce->extcon, EXTCON_DISP_DP);
+
+	dev_info(tce->dev, "extcon changed sdp=%d cdp=%d dcp=%d usb=%d usb_host=%d dp=%d\n",
+		 sdp, cdp, dcp, usb, usb_host, dp);
+
+	return NOTIFY_OK;
+}
+
+static int typec_extcon_probe(struct platform_device *pdev)
+{
+        struct typec_switch_desc sw_desc = { };
+        struct typec_mux_desc mux_desc = { };
+        struct usb_role_switch_desc role_desc = { };
+        struct device *dev = &pdev->dev;
+        struct typec_extcon *tce;
+        int ret = 0;
+
+        tce = devm_kzalloc(dev, sizeof(*tce), GFP_KERNEL);
+        if (!tce)
+                return -ENOMEM;
+
+        tce->dev = &pdev->dev;
+	mutex_init(&tce->lock);
+	tce->mode = TYPEC_STATE_SAFE;
+
+	sw_desc.drvdata = tce;
+	sw_desc.fwnode = dev->fwnode;
+	sw_desc.set = typec_extcon_sw_set;
+
+	tce->sw = typec_switch_register(dev, &sw_desc);
+	if (IS_ERR(tce->sw))
+		return dev_err_probe(dev, PTR_ERR(tce->sw),
+				     "Error registering typec switch\n");
+
+	mux_desc.drvdata = tce;
+	mux_desc.fwnode = dev->fwnode;
+	mux_desc.set = typec_extcon_mux_set;
+
+	tce->mux = typec_mux_register(dev, &mux_desc);
+	if (IS_ERR(tce->mux)) {
+		ret = dev_err_probe(dev, PTR_ERR(tce->mux),
+				    "Error registering typec mux\n");
+		goto err_sw;
+	}
+
+	role_desc.driver_data = tce;
+	role_desc.fwnode = dev->fwnode;
+	role_desc.name = fwnode_get_name(dev->fwnode);
+	role_desc.set = typec_extcon_usb_set_role;
+
+	tce->role_sw = usb_role_switch_register(dev, &role_desc);
+	if (IS_ERR(tce->role_sw)) {
+		ret = dev_err_probe(dev, PTR_ERR(tce->role_sw),
+				    "Error registering USB role switch\n");
+		goto err_mux;
+	}
+
+	tce->extcon = devm_extcon_dev_allocate(dev, typec_extcon_cable);
+	if (IS_ERR(tce->extcon)) {
+		ret = PTR_ERR(tce->extcon);
+		goto err_role;
+	}
+
+	ret = devm_extcon_dev_register(dev, tce->extcon);
+	if (ret) {
+		ret = dev_err_probe(dev, ret, "failed to register extcon device\n");
+		goto err_role;
+	}
+
+	extcon_set_property_capability(tce->extcon, EXTCON_USB,
+				       EXTCON_PROP_USB_SS);
+	extcon_set_property_capability(tce->extcon, EXTCON_USB,
+				       EXTCON_PROP_USB_TYPEC_POLARITY);
+	extcon_set_property_capability(tce->extcon, EXTCON_USB_HOST,
+				       EXTCON_PROP_USB_SS);
+	extcon_set_property_capability(tce->extcon, EXTCON_USB_HOST,
+				       EXTCON_PROP_USB_TYPEC_POLARITY);
+	extcon_set_property_capability(tce->extcon, EXTCON_DISP_DP,
+				       EXTCON_PROP_USB_SS);
+	extcon_set_property_capability(tce->extcon, EXTCON_DISP_DP,
+				       EXTCON_PROP_USB_TYPEC_POLARITY);
+
+	tce->extcon_nb.notifier_call = typec_extcon_notifier;
+	ret = devm_extcon_register_notifier_all(dev, tce->extcon, &tce->extcon_nb);
+	if (ret) {
+		dev_err_probe(dev, ret, "Failed to register extcon notifier\n");
+		goto err_role;
+	}
+
+	return 0;
+
+err_role:
+	usb_role_switch_unregister(tce->role_sw);
+err_mux:
+	typec_mux_unregister(tce->mux);
+err_sw:
+	typec_switch_unregister(tce->sw);
+	return ret;
+}
+
+static void typec_extcon_remove(struct platform_device *pdev)
+{
+        struct typec_extcon *tce = platform_get_drvdata(pdev);
+
+	usb_role_switch_unregister(tce->role_sw);
+	typec_mux_unregister(tce->mux);
+	typec_switch_unregister(tce->sw);
+}
+
+static struct of_device_id typec_extcon_of_match_table[] = {
+        { .compatible = "linux,typec-extcon-bridge" },
+        { },
+};
+MODULE_DEVICE_TABLE(of, typec_extcon_of_match_table);
+
+static struct platform_driver typec_extcon_driver = {
+        .driver = {
+                .name = "typec-extcon",
+                .of_match_table = typec_extcon_of_match_table,
+        },
+        .probe = typec_extcon_probe,
+        .remove = typec_extcon_remove,
+};
+
+module_platform_driver(typec_extcon_driver);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Ondrej Jirman <megi@xff.cz>");
+MODULE_DESCRIPTION("typec -> extcon bridge driver");
