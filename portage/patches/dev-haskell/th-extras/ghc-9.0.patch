--- a/src/Language/Haskell/TH/Extras.hs	2021-08-07 19:39:01.052279873 +0200
+++ b/src/Language/Haskell/TH/Extras.hs	2021-08-07 19:41:46.002346213 +0200
@@ -8,6 +8,7 @@ import Data.Set (Set)
 import qualified Data.Set as Set
 import Language.Haskell.TH
 import Language.Haskell.TH.Syntax
+import Language.Haskell.TH.Datatype.TyVarBndr
 
 intIs64 :: Bool
 intIs64 = toInteger (maxBound :: Int) > 2^(32 :: Integer)
@@ -39,16 +39,10 @@
 argTypesOfCon (RecGadtC _ args _) = [t | (_,_,t) <- args]
 #endif
 
-nameOfBinder :: TyVarBndr -> Name
-#if defined(__GLASGOW_HASKELL__) && __GLASGOW_HASKELL__ >= 700
-nameOfBinder (PlainTV n)    = n
-nameOfBinder (KindedTV n _) = n
-#else
-nameOfBinder = id
-type TyVarBndr = Name
-#endif
+nameOfBinder :: TyVarBndr a -> Name
+nameOfBinder = tvName
 
-varsBoundInCon :: Con -> [TyVarBndr]
+varsBoundInCon :: Con -> [TyVarBndrSpec]
 varsBoundInCon (ForallC bndrs _ con) = bndrs ++ varsBoundInCon con
 varsBoundInCon _ = []
 
@@ -141,7 +135,7 @@
 occursInType :: Name -> Type -> Bool
 occursInType var ty = case ty of
         ForallT bndrs _ ty
-            | any (var ==) (map nameOfBinder bndrs)
+            | any (var ==) (map tvName bndrs)
                 -> False
             | otherwise
                 -> occursInType var ty
--- a/th-extras.cabal	2021-08-07 19:42:06.624604195 +0200
+++ b/th-extras.cabal	2021-08-07 19:42:32.555928492 +0200
@@ -36,4 +36,4 @@
                         template-haskell
   
   if flag(base4)
-    build-depends:      base >= 4, syb
+    build-depends:      base >= 4, syb, th-abstraction >= 0.4 && < 0.5
