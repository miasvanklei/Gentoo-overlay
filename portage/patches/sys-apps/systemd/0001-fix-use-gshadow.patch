--- a/src/shared/userdb.c	2020-11-26 22:26:14.784927743 +0100
+++ b/src/shared/userdb.c	2020-11-26 22:29:36.940525702 +0100
@@ -823,6 +823,7 @@
                         return r;
         }
 
+#if ENABLE_GSHADOW
         if (!FLAGS_SET(flags, USERDB_AVOID_NSS) && !(iterator && iterator->nss_covered)) {
                 r = userdb_iterator_block_nss_systemd(iterator);
                 if (r >= 0) {
@@ -831,6 +832,7 @@
                                 return r;
                 }
         }
+#endif
 
         if (!FLAGS_SET(flags, USERDB_DONT_SYNTHESIZE)) {
                 if (streq(name, "root"))
@@ -867,6 +869,7 @@
                         return r;
         }
 
+#if ENABLE_GSHADOW
         if (!FLAGS_SET(flags, USERDB_AVOID_NSS) && !(iterator && iterator->nss_covered)) {
                 r = userdb_iterator_block_nss_systemd(iterator);
                 if (r >= 0) {
@@ -875,6 +878,7 @@
                                 return r;
                 }
         }
+#endif
 
         if (!FLAGS_SET(flags, USERDB_DONT_SYNTHESIZE)) {
                 if (gid == 0)
@@ -921,6 +925,7 @@
         assert(iterator);
         assert(iterator->what == LOOKUP_GROUP);
 
+#if ENABLE_GSHADOW
         if (iterator->nss_iterating) {
                 struct group *gr;
 
@@ -957,6 +962,7 @@
                 iterator->nss_iterating = false;
                 endgrent();
         }
+#endif
 
         r = userdb_process(iterator, NULL, ret, NULL, NULL);
         if (r < 0) {
@@ -1025,7 +1031,9 @@
 int membershipdb_by_group(const char *name, UserDBFlags flags, UserDBIterator **ret) {
         _cleanup_(userdb_iterator_freep) UserDBIterator *iterator = NULL;
         _cleanup_(json_variant_unrefp) JsonVariant *query = NULL;
+#if ENABLE_GSHADOW
         _cleanup_(group_record_unrefp) GroupRecord *gr = NULL;
+#endif
         int r;
 
         assert(ret);
@@ -1050,6 +1058,7 @@
         if (r < 0)
                 return r;
 
+#if ENABLE_GSHADOW
         /* We ignore all errors here, since the group might be defined by a userdb native service, and we queried them already above. */
         (void) nss_group_record_by_name(name, false, &gr);
         if (gr) {
@@ -1063,6 +1072,7 @@
                 if (!iterator->found_group_name)
                         return -ENOMEM;
         }
+#endif
 
         r = 0;
 
--- a/src/shared/user-record-nss.c	2020-11-26 22:23:47.767782564 +0100
+++ b/src/shared/user-record-nss.c	2020-11-26 22:25:37.508635820 +0100
@@ -317,6 +317,7 @@
         return 0;
 }
 
+#if ENABLE_GSHADOW
 int nss_group_to_group_record(
                 const struct group *grp,
                 const struct sgrp *sgrp,
@@ -529,3 +530,4 @@
         (*ret)->incomplete = incomplete;
         return 0;
 }
+#endif
--- a/src/shared/user-record-nss.h	2020-11-26 22:22:58.535403188 +0100
+++ b/src/shared/user-record-nss.h	2020-11-26 22:25:44.881693485 +0100
@@ -2,7 +2,9 @@
 #pragma once
 
 #include <grp.h>
-#include <gshadow.h>
+#if ENABLE_GSHADOW
+#include <gshadow.h>
+#endif
 #include <pwd.h>
 #include <shadow.h>
 
@@ -17,8 +19,10 @@
 int nss_user_record_by_name(const char *name, bool with_shadow, UserRecord **ret);
 int nss_user_record_by_uid(uid_t uid, bool with_shadow, UserRecord **ret);
 
+#if ENABLE_GSHADOW
 int nss_group_to_group_record(const struct group *grp, const struct sgrp *sgrp, GroupRecord **ret);
 int nss_sgrp_for_group(const struct group *grp, struct sgrp *ret_sgrp, char **ret_buffer);
 
 int nss_group_record_by_name(const char *name, bool with_shadow, GroupRecord **ret);
 int nss_group_record_by_gid(gid_t gid, bool with_shadow, GroupRecord **ret);
+#endif
