--- a/src/hotspot/cpu/x86/interp_masm_x86.cpp	2022-01-09 13:09:14.985206917 +0100
+++ b/src/hotspot/cpu/x86/interp_masm_x86.cpp	2022-01-09 13:17:11.646628474 +0100
@@ -1123,7 +1123,7 @@
 
     bind(loop);
     // check if current entry is used
-    cmpptr(Address(rmon, BasicObjectLock::obj_offset_in_bytes()), (int32_t) NULL);
+    cmpptr(Address(rmon, BasicObjectLock::obj_offset_in_bytes()), (int32_t)0);
     jcc(Assembler::notEqual, exception);
 
     addptr(rmon, entry_size); // otherwise advance to next entry
--- a/src/hotspot/cpu/x86/interpreterRT_x86_64.cpp	2022-01-09 13:10:14.246889047 +0100
+++ b/src/hotspot/cpu/x86/interpreterRT_x86_64.cpp	2022-01-09 13:14:01.741483811 +0100
@@ -443,10 +443,10 @@
     _from -= Interpreter::stackElementSize;
 
     if (_num_int_args < Argument::n_int_register_parameters_c-1) {
-      *_int_args++ = (*from_addr == 0) ? NULL : (intptr_t)from_addr;
+      *_int_args++ = (*from_addr == 0) ? 0 : (intptr_t)from_addr;
       _num_int_args++;
     } else {
-      *_to++ = (*from_addr == 0) ? NULL : (intptr_t) from_addr;
+      *_to++ = (*from_addr == 0) ? 0 : (intptr_t) from_addr;
     }
   }
 
--- a/src/hotspot/share/gc/shenandoah/shenandoahBarrierSet.inline.hpp	2022-01-09 13:05:04.181279691 +0100
+++ b/src/hotspot/share/gc/shenandoah/shenandoahBarrierSet.inline.hpp	2022-01-09 13:19:18.697055775 +0100
@@ -205,7 +205,7 @@
 
   // Note: We don't need a keep-alive-barrier here. We already enqueue any loaded reference for SATB anyway,
   // because it must be the previous value.
-  res = load_reference_barrier(decorators, res, reinterpret_cast<T*>(NULL));
+  res = load_reference_barrier(decorators, res, static_cast<T*>(NULL));
   satb_enqueue(res);
   return res;
 }
@@ -216,7 +216,7 @@
   oop previous = RawAccess<>::oop_atomic_xchg(addr, new_value);
   // Note: We don't need a keep-alive-barrier here. We already enqueue any loaded reference for SATB anyway,
   // because it must be the previous value.
-  previous = load_reference_barrier<T>(decorators, previous, reinterpret_cast<T*>(NULL));
+  previous = load_reference_barrier<T>(decorators, previous, static_cast<T*>(NULL));
   satb_enqueue(previous);
   return previous;
 }
--- a/src/hotspot/share/oops/access.hpp	2022-01-09 13:03:03.311838015 +0100
+++ b/src/hotspot/share/oops/access.hpp	2022-01-09 13:08:50.467923820 +0100
@@ -295,8 +295,8 @@
   static inline void arraycopy(arrayOop src_obj, size_t src_offset_in_bytes,
                                arrayOop dst_obj, size_t dst_offset_in_bytes,
                                size_t length) {
-    AccessT::arraycopy(src_obj, src_offset_in_bytes, reinterpret_cast<const T*>(NULL),
-                       dst_obj, dst_offset_in_bytes, reinterpret_cast<T*>(NULL),
+    AccessT::arraycopy(src_obj, src_offset_in_bytes, static_cast<const T*>(NULL),
+                       dst_obj, dst_offset_in_bytes, static_cast<T*>(NULL),
                        length);
   }
 
@@ -304,7 +304,7 @@
   static inline void arraycopy_to_native(arrayOop src_obj, size_t src_offset_in_bytes,
                                          T* dst,
                                          size_t length) {
-    AccessT::arraycopy(src_obj, src_offset_in_bytes, reinterpret_cast<const T*>(NULL),
+    AccessT::arraycopy(src_obj, src_offset_in_bytes, static_cast<const T*>(NULL),
                        NULL, 0, dst,
                        length);
   }
@@ -314,15 +314,15 @@
                                            arrayOop dst_obj, size_t dst_offset_in_bytes,
                                            size_t length) {
     AccessT::arraycopy(NULL, 0, src,
-                       dst_obj, dst_offset_in_bytes, reinterpret_cast<T*>(NULL),
+                       dst_obj, dst_offset_in_bytes, static_cast<T*>(NULL),
                        length);
   }
 
   static inline bool oop_arraycopy(arrayOop src_obj, size_t src_offset_in_bytes,
                                    arrayOop dst_obj, size_t dst_offset_in_bytes,
                                    size_t length) {
-    return AccessT::oop_arraycopy(src_obj, src_offset_in_bytes, reinterpret_cast<const HeapWord*>(NULL),
-                                  dst_obj, dst_offset_in_bytes, reinterpret_cast<HeapWord*>(NULL),
+    return AccessT::oop_arraycopy(src_obj, src_offset_in_bytes, static_cast<const HeapWord*>(NULL),
+                                  dst_obj, dst_offset_in_bytes, static_cast<HeapWord*>(NULL),
                                   length);
   }
 
